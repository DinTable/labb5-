
Debug/Labb5:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
static char keyb_state = 0xFF;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");        /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");                    /* call main */
20000004:	f000 fc2b 	bl	2000085e <main>
__asm__ volatile(".L1: B .L1\n");                /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_initialize>:

__attribute__((naked))
void graphic_initialize(void){
20000010:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
    __asm volatile (" .HWORD 0xDFF0\n");
    __asm volatile (" BX LR\n");
}
20000014:	46c0      	nop			; (mov r8, r8)

20000016 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void){
20000016:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
    __asm volatile (" .HWORD 0xDFF1\n");
    __asm volatile (" BX LR\n");
}
2000001a:	46c0      	nop			; (mov r8, r8)

2000001c <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(int x, int y){
2000001c:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
    __asm volatile (" .HWORD 0xDFF2\n");
    __asm volatile (" BX LR\n");
}
20000020:	46c0      	nop			; (mov r8, r8)

20000022 <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(int x, int y){
20000022:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
    __asm volatile (" .HWORD 0xDFF3\n");
    __asm volatile (" BX LR\n");
}
20000026:	46c0      	nop			; (mov r8, r8)

20000028 <init_app>:

void init_app(void) {
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
    *GPIO_MODER = 0x55005555;
2000002c:	4b02      	ldr	r3, [pc, #8]	; (20000038 <init_app+0x10>)
2000002e:	4a03      	ldr	r2, [pc, #12]	; (2000003c <init_app+0x14>)
20000030:	601a      	str	r2, [r3, #0]
}
20000032:	46c0      	nop			; (mov r8, r8)
20000034:	46bd      	mov	sp, r7
20000036:	bd80      	pop	{r7, pc}
20000038:	40020c00 	andmi	r0, r2, r0, lsl #24
2000003c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab

20000040 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
20000040:	b580      	push	{r7, lr}
20000042:	b084      	sub	sp, #16
20000044:	af00      	add	r7, sp, #0
20000046:	0002      	movs	r2, r0
20000048:	1dfb      	adds	r3, r7, #7
2000004a:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_ODR_LOW;
2000004c:	4a09      	ldr	r2, [pc, #36]	; (20000074 <ascii_ctrl_bit_set+0x34>)
2000004e:	210f      	movs	r1, #15
20000050:	187b      	adds	r3, r7, r1
20000052:	7812      	ldrb	r2, [r2, #0]
20000054:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = B_SELECT | x | c; // Select alltid 1 i vårt fall och sätt x biten till 1.
20000056:	1dfa      	adds	r2, r7, #7
20000058:	187b      	adds	r3, r7, r1
2000005a:	7812      	ldrb	r2, [r2, #0]
2000005c:	781b      	ldrb	r3, [r3, #0]
2000005e:	4313      	orrs	r3, r2
20000060:	b2db      	uxtb	r3, r3
20000062:	4a04      	ldr	r2, [pc, #16]	; (20000074 <ascii_ctrl_bit_set+0x34>)
20000064:	2104      	movs	r1, #4
20000066:	430b      	orrs	r3, r1
20000068:	b2db      	uxtb	r3, r3
2000006a:	7013      	strb	r3, [r2, #0]
}
2000006c:	46c0      	nop			; (mov r8, r8)
2000006e:	46bd      	mov	sp, r7
20000070:	b004      	add	sp, #16
20000072:	bd80      	pop	{r7, pc}
20000074:	40020c14 	andmi	r0, r2, r4, lsl ip

20000078 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
20000078:	b580      	push	{r7, lr}
2000007a:	b084      	sub	sp, #16
2000007c:	af00      	add	r7, sp, #0
2000007e:	0002      	movs	r2, r0
20000080:	1dfb      	adds	r3, r7, #7
20000082:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_ODR_LOW;
20000084:	4a0d      	ldr	r2, [pc, #52]	; (200000bc <ascii_ctrl_bit_clear+0x44>)
20000086:	210f      	movs	r1, #15
20000088:	187b      	adds	r3, r7, r1
2000008a:	7812      	ldrb	r2, [r2, #0]
2000008c:	701a      	strb	r2, [r3, #0]
	c = c & ~x; // detta gör att x biten nollställs medan alla andra bitar behåller sina värden.
2000008e:	1dfb      	adds	r3, r7, #7
20000090:	781b      	ldrb	r3, [r3, #0]
20000092:	b25b      	sxtb	r3, r3
20000094:	43db      	mvns	r3, r3
20000096:	b25b      	sxtb	r3, r3
20000098:	187a      	adds	r2, r7, r1
2000009a:	7812      	ldrb	r2, [r2, #0]
2000009c:	b252      	sxtb	r2, r2
2000009e:	4013      	ands	r3, r2
200000a0:	b25a      	sxtb	r2, r3
200000a2:	187b      	adds	r3, r7, r1
200000a4:	701a      	strb	r2, [r3, #0]
	*GPIO_ODR_LOW = B_SELECT | c; // Select alltid 1
200000a6:	4a05      	ldr	r2, [pc, #20]	; (200000bc <ascii_ctrl_bit_clear+0x44>)
200000a8:	187b      	adds	r3, r7, r1
200000aa:	781b      	ldrb	r3, [r3, #0]
200000ac:	2104      	movs	r1, #4
200000ae:	430b      	orrs	r3, r1
200000b0:	b2db      	uxtb	r3, r3
200000b2:	7013      	strb	r3, [r2, #0]
}
200000b4:	46c0      	nop			; (mov r8, r8)
200000b6:	46bd      	mov	sp, r7
200000b8:	b004      	add	sp, #16
200000ba:	bd80      	pop	{r7, pc}
200000bc:	40020c14 	andmi	r0, r2, r4, lsl ip

200000c0 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){	
200000c0:	b580      	push	{r7, lr}
200000c2:	b082      	sub	sp, #8
200000c4:	af00      	add	r7, sp, #0
200000c6:	0002      	movs	r2, r0
200000c8:	1dfb      	adds	r3, r7, #7
200000ca:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E); // E = 1 betyder att arbetscyklen startas
200000cc:	2040      	movs	r0, #64	; 0x40
200000ce:	f7ff ffb7 	bl	20000040 <ascii_ctrl_bit_set>
	*GPIO_ODR_HIGH = byte;
200000d2:	4a06      	ldr	r2, [pc, #24]	; (200000ec <ascii_write_controller+0x2c>)
200000d4:	1dfb      	adds	r3, r7, #7
200000d6:	781b      	ldrb	r3, [r3, #0]
200000d8:	7013      	strb	r3, [r2, #0]
	ascii_ctrl_bit_clear(B_E); // Efter att uppgiften utförts så avslutar vi arbetscykeln.
200000da:	2040      	movs	r0, #64	; 0x40
200000dc:	f7ff ffcc 	bl	20000078 <ascii_ctrl_bit_clear>
	delay_250ns();
200000e0:	f000 f9d6 	bl	20000490 <delay_250ns>
}
200000e4:	46c0      	nop			; (mov r8, r8)
200000e6:	46bd      	mov	sp, r7
200000e8:	b002      	add	sp, #8
200000ea:	bd80      	pop	{r7, pc}
200000ec:	40020c15 	andmi	r0, r2, r5, lsl ip

200000f0 <ascii_read_controller>:
	

unsigned char ascii_read_controller(void){
200000f0:	b580      	push	{r7, lr}
200000f2:	b082      	sub	sp, #8
200000f4:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E); // Starta arbetscyklen
200000f6:	2040      	movs	r0, #64	; 0x40
200000f8:	f7ff ffa2 	bl	20000040 <ascii_ctrl_bit_set>
	
	delay_250ns(); // Vänta minst 360 ns innan datan är förberedd av ascii displayen för att läsas
200000fc:	f000 f9c8 	bl	20000490 <delay_250ns>
	delay_250ns();
20000100:	f000 f9c6 	bl	20000490 <delay_250ns>
	
	c = *GPIO_IDR_HIGH;
20000104:	4a06      	ldr	r2, [pc, #24]	; (20000120 <ascii_read_controller+0x30>)
20000106:	1dfb      	adds	r3, r7, #7
20000108:	7812      	ldrb	r2, [r2, #0]
2000010a:	701a      	strb	r2, [r3, #0]
	
	ascii_ctrl_bit_clear(B_E);
2000010c:	2040      	movs	r0, #64	; 0x40
2000010e:	f7ff ffb3 	bl	20000078 <ascii_ctrl_bit_clear>
	
	return c;
20000112:	1dfb      	adds	r3, r7, #7
20000114:	781b      	ldrb	r3, [r3, #0]
}
20000116:	0018      	movs	r0, r3
20000118:	46bd      	mov	sp, r7
2000011a:	b002      	add	sp, #8
2000011c:	bd80      	pop	{r7, pc}
2000011e:	46c0      	nop			; (mov r8, r8)
20000120:	40020c11 	andmi	r0, r2, r1, lsl ip

20000124 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000124:	b580      	push	{r7, lr}
20000126:	b082      	sub	sp, #8
20000128:	af00      	add	r7, sp, #0
2000012a:	0002      	movs	r2, r0
2000012c:	1dfb      	adds	r3, r7, #7
2000012e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000130:	2001      	movs	r0, #1
20000132:	f7ff ffa1 	bl	20000078 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000136:	2002      	movs	r0, #2
20000138:	f7ff ff9e 	bl	20000078 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	781b      	ldrb	r3, [r3, #0]
20000140:	0018      	movs	r0, r3
20000142:	f7ff ffbd 	bl	200000c0 <ascii_write_controller>
}
20000146:	46c0      	nop			; (mov r8, r8)
20000148:	46bd      	mov	sp, r7
2000014a:	b002      	add	sp, #8
2000014c:	bd80      	pop	{r7, pc}

2000014e <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000014e:	b580      	push	{r7, lr}
20000150:	b082      	sub	sp, #8
20000152:	af00      	add	r7, sp, #0
20000154:	0002      	movs	r2, r0
20000156:	1dfb      	adds	r3, r7, #7
20000158:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000015a:	2001      	movs	r0, #1
2000015c:	f7ff ff70 	bl	20000040 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000160:	2002      	movs	r0, #2
20000162:	f7ff ff89 	bl	20000078 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
20000166:	1dfb      	adds	r3, r7, #7
20000168:	781b      	ldrb	r3, [r3, #0]
2000016a:	0018      	movs	r0, r3
2000016c:	f7ff ffa8 	bl	200000c0 <ascii_write_controller>
}
20000170:	46c0      	nop			; (mov r8, r8)
20000172:	46bd      	mov	sp, r7
20000174:	b002      	add	sp, #8
20000176:	bd80      	pop	{r7, pc}

20000178 <ascii_read_status>:

unsigned char ascii_read_status(void){
20000178:	b590      	push	{r4, r7, lr}
2000017a:	b083      	sub	sp, #12
2000017c:	af00      	add	r7, sp, #0
	char c;
	*GPIO_MODER = 0x00005555; //sätter bit 8-15 i porten (dataregistret för ascii displayen) till ingångar som förberedelse för att ascii_read_controller ska läsa från dem senare.
2000017e:	4b0b      	ldr	r3, [pc, #44]	; (200001ac <ascii_read_status+0x34>)
20000180:	4a0b      	ldr	r2, [pc, #44]	; (200001b0 <ascii_read_status+0x38>)
20000182:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000184:	2002      	movs	r0, #2
20000186:	f7ff ff5b 	bl	20000040 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
2000018a:	2001      	movs	r0, #1
2000018c:	f7ff ff74 	bl	20000078 <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
20000190:	1dfc      	adds	r4, r7, #7
20000192:	f7ff ffad 	bl	200000f0 <ascii_read_controller>
20000196:	0003      	movs	r3, r0
20000198:	7023      	strb	r3, [r4, #0]
	
	*GPIO_MODER = 0x55555555; //återställer dataregistret till utgång
2000019a:	4b04      	ldr	r3, [pc, #16]	; (200001ac <ascii_read_status+0x34>)
2000019c:	4a05      	ldr	r2, [pc, #20]	; (200001b4 <ascii_read_status+0x3c>)
2000019e:	601a      	str	r2, [r3, #0]
	
	return c;
200001a0:	1dfb      	adds	r3, r7, #7
200001a2:	781b      	ldrb	r3, [r3, #0]
}
200001a4:	0018      	movs	r0, r3
200001a6:	46bd      	mov	sp, r7
200001a8:	b003      	add	sp, #12
200001aa:	bd90      	pop	{r4, r7, pc}
200001ac:	40020c00 	andmi	r0, r2, r0, lsl #24
200001b0:	00005555 	andeq	r5, r0, r5, asr r5
200001b4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001b8 <ascii_read_data>:

unsigned char ascii_read_data(void){
200001b8:	b590      	push	{r4, r7, lr}
200001ba:	b083      	sub	sp, #12
200001bc:	af00      	add	r7, sp, #0
	char c;
	*GPIO_MODER = 0x00005555;  
200001be:	4b0b      	ldr	r3, [pc, #44]	; (200001ec <ascii_read_data+0x34>)
200001c0:	4a0b      	ldr	r2, [pc, #44]	; (200001f0 <ascii_read_data+0x38>)
200001c2:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
200001c4:	2002      	movs	r0, #2
200001c6:	f7ff ff3b 	bl	20000040 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RS); // som ovan men nu är RS = 1 för att vi läser data istället för status
200001ca:	2001      	movs	r0, #1
200001cc:	f7ff ff38 	bl	20000040 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
200001d0:	1dfc      	adds	r4, r7, #7
200001d2:	f7ff ff8d 	bl	200000f0 <ascii_read_controller>
200001d6:	0003      	movs	r3, r0
200001d8:	7023      	strb	r3, [r4, #0]
	
	*GPIO_MODER = 0x55555555;
200001da:	4b04      	ldr	r3, [pc, #16]	; (200001ec <ascii_read_data+0x34>)
200001dc:	4a05      	ldr	r2, [pc, #20]	; (200001f4 <ascii_read_data+0x3c>)
200001de:	601a      	str	r2, [r3, #0]
	
	return c;
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	781b      	ldrb	r3, [r3, #0]
}
200001e4:	0018      	movs	r0, r3
200001e6:	46bd      	mov	sp, r7
200001e8:	b003      	add	sp, #12
200001ea:	bd90      	pop	{r4, r7, pc}
200001ec:	40020c00 	andmi	r0, r2, r0, lsl #24
200001f0:	00005555 	andeq	r5, r0, r5, asr r5
200001f4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001f8 <ascii_command>:

void ascii_command(command){
200001f8:	b580      	push	{r7, lr}
200001fa:	b082      	sub	sp, #8
200001fc:	af00      	add	r7, sp, #0
200001fe:	6078      	str	r0, [r7, #4]
	while( ascii_read_status() & 0x80 ); // Vänta så länge ascii displayen är upptagen
20000200:	46c0      	nop			; (mov r8, r8)
20000202:	f7ff ffb9 	bl	20000178 <ascii_read_status>
20000206:	0003      	movs	r3, r0
20000208:	b25b      	sxtb	r3, r3
2000020a:	2b00      	cmp	r3, #0
2000020c:	dbf9      	blt.n	20000202 <ascii_command+0xa>
	delay_micro(8);
2000020e:	2008      	movs	r0, #8
20000210:	f000 f960 	bl	200004d4 <delay_micro>
	
	ascii_write_cmd(command);
20000214:	687b      	ldr	r3, [r7, #4]
20000216:	b2db      	uxtb	r3, r3
20000218:	0018      	movs	r0, r3
2000021a:	f7ff ff83 	bl	20000124 <ascii_write_cmd>
	
	if(command == CLEAR_DISPLAY){
2000021e:	687b      	ldr	r3, [r7, #4]
20000220:	2b01      	cmp	r3, #1
20000222:	d103      	bne.n	2000022c <ascii_command+0x34>
		delay_milli(2);
20000224:	2002      	movs	r0, #2
20000226:	f000 f978 	bl	2000051a <delay_milli>
	}
	else if(command == FUNCTION_SET || command == DISPLAY_CONTROL || ENTRY_MODE_SET){
		delay_micro(39);
	}
}
2000022a:	e002      	b.n	20000232 <ascii_command+0x3a>
		delay_micro(39);
2000022c:	2027      	movs	r0, #39	; 0x27
2000022e:	f000 f951 	bl	200004d4 <delay_micro>
}
20000232:	46c0      	nop			; (mov r8, r8)
20000234:	46bd      	mov	sp, r7
20000236:	b002      	add	sp, #8
20000238:	bd80      	pop	{r7, pc}

2000023a <ascii_init>:

void ascii_init(void){
2000023a:	b580      	push	{r7, lr}
2000023c:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS); // För dessa kommandon skall RS och RW = 0
2000023e:	2001      	movs	r0, #1
20000240:	f7ff ff1a 	bl	20000078 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000244:	2002      	movs	r0, #2
20000246:	f7ff ff17 	bl	20000078 <ascii_ctrl_bit_clear>
	
	ascii_command(FUNCTION_SET);
2000024a:	2038      	movs	r0, #56	; 0x38
2000024c:	f7ff ffd4 	bl	200001f8 <ascii_command>
	ascii_command(DISPLAY_CONTROL);
20000250:	200f      	movs	r0, #15
20000252:	f7ff ffd1 	bl	200001f8 <ascii_command>
	ascii_command(CLEAR_DISPLAY);
20000256:	2001      	movs	r0, #1
20000258:	f7ff ffce 	bl	200001f8 <ascii_command>
}
2000025c:	46c0      	nop			; (mov r8, r8)
2000025e:	46bd      	mov	sp, r7
20000260:	bd80      	pop	{r7, pc}

20000262 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000262:	b580      	push	{r7, lr}
20000264:	b082      	sub	sp, #8
20000266:	af00      	add	r7, sp, #0
20000268:	0002      	movs	r2, r0
2000026a:	1dfb      	adds	r3, r7, #7
2000026c:	701a      	strb	r2, [r3, #0]
	while( ascii_read_status() & 0x80 ); // Vänta så länge ascii displayen är upptagen
2000026e:	46c0      	nop			; (mov r8, r8)
20000270:	f7ff ff82 	bl	20000178 <ascii_read_status>
20000274:	0003      	movs	r3, r0
20000276:	b25b      	sxtb	r3, r3
20000278:	2b00      	cmp	r3, #0
2000027a:	dbf9      	blt.n	20000270 <ascii_write_char+0xe>
	delay_micro(8);
2000027c:	2008      	movs	r0, #8
2000027e:	f000 f929 	bl	200004d4 <delay_micro>
	
	ascii_write_data(c);
20000282:	1dfb      	adds	r3, r7, #7
20000284:	781b      	ldrb	r3, [r3, #0]
20000286:	0018      	movs	r0, r3
20000288:	f7ff ff61 	bl	2000014e <ascii_write_data>
}
2000028c:	46c0      	nop			; (mov r8, r8)
2000028e:	46bd      	mov	sp, r7
20000290:	b002      	add	sp, #8
20000292:	bd80      	pop	{r7, pc}

20000294 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){	
20000294:	b580      	push	{r7, lr}
20000296:	b084      	sub	sp, #16
20000298:	af00      	add	r7, sp, #0
2000029a:	6078      	str	r0, [r7, #4]
2000029c:	6039      	str	r1, [r7, #0]
	int address = x-1;
2000029e:	687b      	ldr	r3, [r7, #4]
200002a0:	3b01      	subs	r3, #1
200002a2:	60fb      	str	r3, [r7, #12]
	if (y == 2){
200002a4:	683b      	ldr	r3, [r7, #0]
200002a6:	2b02      	cmp	r3, #2
200002a8:	d102      	bne.n	200002b0 <ascii_gotoxy+0x1c>
		address = address + 0x40; // Teckenminnet har plats för 64 tecken per rad (20 visas), därför blir addressen för rad 2 lika med 0x40 (64 i decimal)
200002aa:	68fb      	ldr	r3, [r7, #12]
200002ac:	3340      	adds	r3, #64	; 0x40
200002ae:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80 | address);
200002b0:	68fb      	ldr	r3, [r7, #12]
200002b2:	b25b      	sxtb	r3, r3
200002b4:	2280      	movs	r2, #128	; 0x80
200002b6:	4252      	negs	r2, r2
200002b8:	4313      	orrs	r3, r2
200002ba:	b25b      	sxtb	r3, r3
200002bc:	b2db      	uxtb	r3, r3
200002be:	0018      	movs	r0, r3
200002c0:	f7ff ff30 	bl	20000124 <ascii_write_cmd>
}
200002c4:	46c0      	nop			; (mov r8, r8)
200002c6:	46bd      	mov	sp, r7
200002c8:	b004      	add	sp, #16
200002ca:	bd80      	pop	{r7, pc}

200002cc <kbdGetCol>:

int kbdGetCol(void) { /* Om någon tangent (i aktiverad rad)
200002cc:	b580      	push	{r7, lr}
200002ce:	b082      	sub	sp, #8
200002d0:	af00      	add	r7, sp, #0
* är nedtryckt, returnera dess kolumnnummer,
* annars, returnera 0 */
    unsigned char c;
    c = *GPIO_IDR_HIGH;
200002d2:	4a12      	ldr	r2, [pc, #72]	; (2000031c <kbdGetCol+0x50>)
200002d4:	1dfb      	adds	r3, r7, #7
200002d6:	7812      	ldrb	r2, [r2, #0]
200002d8:	701a      	strb	r2, [r3, #0]
    if (c & 0x8) return 4;
200002da:	1dfb      	adds	r3, r7, #7
200002dc:	781b      	ldrb	r3, [r3, #0]
200002de:	2208      	movs	r2, #8
200002e0:	4013      	ands	r3, r2
200002e2:	d001      	beq.n	200002e8 <kbdGetCol+0x1c>
200002e4:	2304      	movs	r3, #4
200002e6:	e015      	b.n	20000314 <kbdGetCol+0x48>
    if (c & 0x4) return 3;
200002e8:	1dfb      	adds	r3, r7, #7
200002ea:	781b      	ldrb	r3, [r3, #0]
200002ec:	2204      	movs	r2, #4
200002ee:	4013      	ands	r3, r2
200002f0:	d001      	beq.n	200002f6 <kbdGetCol+0x2a>
200002f2:	2303      	movs	r3, #3
200002f4:	e00e      	b.n	20000314 <kbdGetCol+0x48>
    if (c & 0x2) return 2;
200002f6:	1dfb      	adds	r3, r7, #7
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	2202      	movs	r2, #2
200002fc:	4013      	ands	r3, r2
200002fe:	d001      	beq.n	20000304 <kbdGetCol+0x38>
20000300:	2302      	movs	r3, #2
20000302:	e007      	b.n	20000314 <kbdGetCol+0x48>
    if (c & 0x1) return 1;
20000304:	1dfb      	adds	r3, r7, #7
20000306:	781b      	ldrb	r3, [r3, #0]
20000308:	2201      	movs	r2, #1
2000030a:	4013      	ands	r3, r2
2000030c:	d001      	beq.n	20000312 <kbdGetCol+0x46>
2000030e:	2301      	movs	r3, #1
20000310:	e000      	b.n	20000314 <kbdGetCol+0x48>
    return 0;
20000312:	2300      	movs	r3, #0
}
20000314:	0018      	movs	r0, r3
20000316:	46bd      	mov	sp, r7
20000318:	b002      	add	sp, #8
2000031a:	bd80      	pop	{r7, pc}
2000031c:	40020c11 	andmi	r0, r2, r1, lsl ip

20000320 <kbdActivate>:

void kbdActivate(unsigned int row) { /* Aktivera angiven rad hos tangentbordet, eller
20000320:	b580      	push	{r7, lr}
20000322:	b082      	sub	sp, #8
20000324:	af00      	add	r7, sp, #0
20000326:	6078      	str	r0, [r7, #4]
20000328:	687b      	ldr	r3, [r7, #4]
2000032a:	2b05      	cmp	r3, #5
2000032c:	d81d      	bhi.n	2000036a <kbdActivate+0x4a>
2000032e:	687b      	ldr	r3, [r7, #4]
20000330:	009a      	lsls	r2, r3, #2
20000332:	4b10      	ldr	r3, [pc, #64]	; (20000374 <kbdActivate+0x54>)
20000334:	18d3      	adds	r3, r2, r3
20000336:	681b      	ldr	r3, [r3, #0]
20000338:	469f      	mov	pc, r3
* deaktivera samtliga */
    switch (row) {
        case 1:
            *GPIO_ODR_HIGH = 0x10;
2000033a:	4b0f      	ldr	r3, [pc, #60]	; (20000378 <kbdActivate+0x58>)
2000033c:	2210      	movs	r2, #16
2000033e:	701a      	strb	r2, [r3, #0]
            break;
20000340:	e013      	b.n	2000036a <kbdActivate+0x4a>
        case 2:
            *GPIO_ODR_HIGH = 0x20;
20000342:	4b0d      	ldr	r3, [pc, #52]	; (20000378 <kbdActivate+0x58>)
20000344:	2220      	movs	r2, #32
20000346:	701a      	strb	r2, [r3, #0]
            break;
20000348:	e00f      	b.n	2000036a <kbdActivate+0x4a>
        case 3:
            *GPIO_ODR_HIGH = 0x40;
2000034a:	4b0b      	ldr	r3, [pc, #44]	; (20000378 <kbdActivate+0x58>)
2000034c:	2240      	movs	r2, #64	; 0x40
2000034e:	701a      	strb	r2, [r3, #0]
            break;
20000350:	e00b      	b.n	2000036a <kbdActivate+0x4a>
        case 4:
            *GPIO_ODR_HIGH = 0x80;
20000352:	4b09      	ldr	r3, [pc, #36]	; (20000378 <kbdActivate+0x58>)
20000354:	2280      	movs	r2, #128	; 0x80
20000356:	701a      	strb	r2, [r3, #0]
            break;
20000358:	e007      	b.n	2000036a <kbdActivate+0x4a>
        case 5:
            *GPIO_ODR_HIGH = 0xF0;
2000035a:	4b07      	ldr	r3, [pc, #28]	; (20000378 <kbdActivate+0x58>)
2000035c:	22f0      	movs	r2, #240	; 0xf0
2000035e:	701a      	strb	r2, [r3, #0]
            break;
20000360:	e003      	b.n	2000036a <kbdActivate+0x4a>
        case 0:
            *GPIO_ODR_HIGH = 0x00;
20000362:	4b05      	ldr	r3, [pc, #20]	; (20000378 <kbdActivate+0x58>)
20000364:	2200      	movs	r2, #0
20000366:	701a      	strb	r2, [r3, #0]
            break;
20000368:	46c0      	nop			; (mov r8, r8)
    }
}
2000036a:	46c0      	nop			; (mov r8, r8)
2000036c:	46bd      	mov	sp, r7
2000036e:	b002      	add	sp, #8
20000370:	bd80      	pop	{r7, pc}
20000372:	46c0      	nop			; (mov r8, r8)
20000374:	20001dac 	andcs	r1, r0, ip, lsr #27
20000378:	40020c15 	andmi	r0, r2, r5, lsl ip

2000037c <keyb>:

unsigned char keyb(void) {
2000037c:	b590      	push	{r4, r7, lr}
2000037e:	b087      	sub	sp, #28
20000380:	af00      	add	r7, sp, #0
    unsigned char key[] = {1, 2, 3, 0xA, 4, 5, 6, 0xB, 7, 8, 9, 0xC, 0xE, 0, 0xF, 0xD};
20000382:	003b      	movs	r3, r7
20000384:	4a16      	ldr	r2, [pc, #88]	; (200003e0 <keyb+0x64>)
20000386:	ca13      	ldmia	r2!, {r0, r1, r4}
20000388:	c313      	stmia	r3!, {r0, r1, r4}
2000038a:	6812      	ldr	r2, [r2, #0]
2000038c:	601a      	str	r2, [r3, #0]
    int row, col;
    for (row = 1; row <= 4; row++) {
2000038e:	2301      	movs	r3, #1
20000390:	617b      	str	r3, [r7, #20]
20000392:	e019      	b.n	200003c8 <keyb+0x4c>
        kbdActivate(row);
20000394:	697b      	ldr	r3, [r7, #20]
20000396:	0018      	movs	r0, r3
20000398:	f7ff ffc2 	bl	20000320 <kbdActivate>
        if ((col = kbdGetCol())) {
2000039c:	f7ff ff96 	bl	200002cc <kbdGetCol>
200003a0:	0003      	movs	r3, r0
200003a2:	613b      	str	r3, [r7, #16]
200003a4:	693b      	ldr	r3, [r7, #16]
200003a6:	2b00      	cmp	r3, #0
200003a8:	d00b      	beq.n	200003c2 <keyb+0x46>
            kbdActivate(0);
200003aa:	2000      	movs	r0, #0
200003ac:	f7ff ffb8 	bl	20000320 <kbdActivate>
            return key[4 * (row - 1) + (col - 1)];
200003b0:	697b      	ldr	r3, [r7, #20]
200003b2:	3b01      	subs	r3, #1
200003b4:	009a      	lsls	r2, r3, #2
200003b6:	693b      	ldr	r3, [r7, #16]
200003b8:	3b01      	subs	r3, #1
200003ba:	18d3      	adds	r3, r2, r3
200003bc:	003a      	movs	r2, r7
200003be:	5cd3      	ldrb	r3, [r2, r3]
200003c0:	e009      	b.n	200003d6 <keyb+0x5a>
    for (row = 1; row <= 4; row++) {
200003c2:	697b      	ldr	r3, [r7, #20]
200003c4:	3301      	adds	r3, #1
200003c6:	617b      	str	r3, [r7, #20]
200003c8:	697b      	ldr	r3, [r7, #20]
200003ca:	2b04      	cmp	r3, #4
200003cc:	dde2      	ble.n	20000394 <keyb+0x18>
        }
    }
    kbdActivate(0);
200003ce:	2000      	movs	r0, #0
200003d0:	f7ff ffa6 	bl	20000320 <kbdActivate>
    return 0xFF;
200003d4:	23ff      	movs	r3, #255	; 0xff
}
200003d6:	0018      	movs	r0, r3
200003d8:	46bd      	mov	sp, r7
200003da:	b007      	add	sp, #28
200003dc:	bd90      	pop	{r4, r7, pc}
200003de:	46c0      	nop			; (mov r8, r8)
200003e0:	20001dc4 	andcs	r1, r0, r4, asr #27

200003e4 <out7seg>:

void out7seg(unsigned char c) {
200003e4:	b5b0      	push	{r4, r5, r7, lr}
200003e6:	b086      	sub	sp, #24
200003e8:	af00      	add	r7, sp, #0
200003ea:	0002      	movs	r2, r0
200003ec:	1dfb      	adds	r3, r7, #7
200003ee:	701a      	strb	r2, [r3, #0]
    if (c > 16) kbdActivate(0);
200003f0:	1dfb      	adds	r3, r7, #7
200003f2:	781b      	ldrb	r3, [r3, #0]
200003f4:	2b10      	cmp	r3, #16
200003f6:	d902      	bls.n	200003fe <out7seg+0x1a>
200003f8:	2000      	movs	r0, #0
200003fa:	f7ff ff91 	bl	20000320 <kbdActivate>
    unsigned char segCodes[] = {0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x7, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79,
200003fe:	2008      	movs	r0, #8
20000400:	183b      	adds	r3, r7, r0
20000402:	4a07      	ldr	r2, [pc, #28]	; (20000420 <out7seg+0x3c>)
20000404:	ca32      	ldmia	r2!, {r1, r4, r5}
20000406:	c332      	stmia	r3!, {r1, r4, r5}
20000408:	6812      	ldr	r2, [r2, #0]
2000040a:	601a      	str	r2, [r3, #0]
                                0x71};
    *GPIO_ODR_LOW = segCodes[c];
2000040c:	1dfb      	adds	r3, r7, #7
2000040e:	781b      	ldrb	r3, [r3, #0]
20000410:	4904      	ldr	r1, [pc, #16]	; (20000424 <out7seg+0x40>)
20000412:	183a      	adds	r2, r7, r0
20000414:	5cd3      	ldrb	r3, [r2, r3]
20000416:	700b      	strb	r3, [r1, #0]

}
20000418:	46c0      	nop			; (mov r8, r8)
2000041a:	46bd      	mov	sp, r7
2000041c:	b006      	add	sp, #24
2000041e:	bdb0      	pop	{r4, r5, r7, pc}
20000420:	20001dd4 	ldrdcs	r1, [r0], -r4
20000424:	40020c14 	andmi	r0, r2, r4, lsl ip

20000428 <keyb_enhanced>:

unsigned char keyb_enhanced(void){
20000428:	b590      	push	{r4, r7, lr}
2000042a:	b083      	sub	sp, #12
2000042c:	af00      	add	r7, sp, #0

	if ( ts_state ){
2000042e:	4b16      	ldr	r3, [pc, #88]	; (20000488 <keyb_enhanced+0x60>)
20000430:	681b      	ldr	r3, [r3, #0]
20000432:	2b00      	cmp	r3, #0
20000434:	d00f      	beq.n	20000456 <keyb_enhanced+0x2e>
		kbdActivate(5);
20000436:	2005      	movs	r0, #5
20000438:	f7ff ff72 	bl	20000320 <kbdActivate>
		if( kbdGetCol() ) ts_state = 1;
2000043c:	f7ff ff46 	bl	200002cc <kbdGetCol>
20000440:	1e03      	subs	r3, r0, #0
20000442:	d003      	beq.n	2000044c <keyb_enhanced+0x24>
20000444:	4b10      	ldr	r3, [pc, #64]	; (20000488 <keyb_enhanced+0x60>)
20000446:	2201      	movs	r2, #1
20000448:	601a      	str	r2, [r3, #0]
2000044a:	e002      	b.n	20000452 <keyb_enhanced+0x2a>
		else ts_state = 0;
2000044c:	4b0e      	ldr	r3, [pc, #56]	; (20000488 <keyb_enhanced+0x60>)
2000044e:	2200      	movs	r2, #0
20000450:	601a      	str	r2, [r3, #0]
		return 0xFF;
20000452:	23ff      	movs	r3, #255	; 0xff
20000454:	e014      	b.n	20000480 <keyb_enhanced+0x58>
	}
	
	
	if( !ts_state ){
20000456:	4b0c      	ldr	r3, [pc, #48]	; (20000488 <keyb_enhanced+0x60>)
20000458:	681b      	ldr	r3, [r3, #0]
2000045a:	2b00      	cmp	r3, #0
2000045c:	d110      	bne.n	20000480 <keyb_enhanced+0x58>
		char c = keyb();
2000045e:	1dfc      	adds	r4, r7, #7
20000460:	f7ff ff8c 	bl	2000037c <keyb>
20000464:	0003      	movs	r3, r0
20000466:	7023      	strb	r3, [r4, #0]
		if(c != keyb_state){
20000468:	4b08      	ldr	r3, [pc, #32]	; (2000048c <keyb_enhanced+0x64>)
2000046a:	781b      	ldrb	r3, [r3, #0]
2000046c:	1dfa      	adds	r2, r7, #7
2000046e:	7812      	ldrb	r2, [r2, #0]
20000470:	429a      	cmp	r2, r3
20000472:	d005      	beq.n	20000480 <keyb_enhanced+0x58>
			ts_state = 1;
20000474:	4b04      	ldr	r3, [pc, #16]	; (20000488 <keyb_enhanced+0x60>)
20000476:	2201      	movs	r2, #1
20000478:	601a      	str	r2, [r3, #0]
			return c; 
2000047a:	1dfb      	adds	r3, r7, #7
2000047c:	781b      	ldrb	r3, [r3, #0]
2000047e:	e7ff      	b.n	20000480 <keyb_enhanced+0x58>
		}
	}
} 
20000480:	0018      	movs	r0, r3
20000482:	46bd      	mov	sp, r7
20000484:	b003      	add	sp, #12
20000486:	bd90      	pop	{r4, r7, pc}
20000488:	20001df0 	strdcs	r1, [r0], -r0
2000048c:	20000eac 	andcs	r0, r0, ip, lsr #29

20000490 <delay_250ns>:

void delay_250ns(void){
20000490:	b580      	push	{r7, lr}
20000492:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
20000494:	4b0c      	ldr	r3, [pc, #48]	; (200004c8 <delay_250ns+0x38>)
20000496:	2200      	movs	r2, #0
20000498:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4) - 1);
2000049a:	4b0c      	ldr	r3, [pc, #48]	; (200004cc <delay_250ns+0x3c>)
2000049c:	2229      	movs	r2, #41	; 0x29
2000049e:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
200004a0:	4b0b      	ldr	r3, [pc, #44]	; (200004d0 <delay_250ns+0x40>)
200004a2:	2200      	movs	r2, #0
200004a4:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
200004a6:	4b08      	ldr	r3, [pc, #32]	; (200004c8 <delay_250ns+0x38>)
200004a8:	2205      	movs	r2, #5
200004aa:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000) == 0); // Väntar tills statusbiten är lika med 0 innan den fortsätter då det innebär att nedräkningen är färdig.
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	4b06      	ldr	r3, [pc, #24]	; (200004c8 <delay_250ns+0x38>)
200004b0:	681a      	ldr	r2, [r3, #0]
200004b2:	2380      	movs	r3, #128	; 0x80
200004b4:	025b      	lsls	r3, r3, #9
200004b6:	4013      	ands	r3, r2
200004b8:	d0f9      	beq.n	200004ae <delay_250ns+0x1e>
    *STK_CTRL = 0;
200004ba:	4b03      	ldr	r3, [pc, #12]	; (200004c8 <delay_250ns+0x38>)
200004bc:	2200      	movs	r2, #0
200004be:	601a      	str	r2, [r3, #0]
}
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	46bd      	mov	sp, r7
200004c4:	bd80      	pop	{r7, pc}
200004c6:	46c0      	nop			; (mov r8, r8)
200004c8:	e000e010 	and	lr, r0, r0, lsl r0
200004cc:	e000e014 	and	lr, r0, r4, lsl r0
200004d0:	e000e018 	and	lr, r0, r8, lsl r0

200004d4 <delay_micro>:

void delay_micro(unsigned int us){
200004d4:	b580      	push	{r7, lr}
200004d6:	b082      	sub	sp, #8
200004d8:	af00      	add	r7, sp, #0
200004da:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 1000;
200004dc:	687b      	ldr	r3, [r7, #4]
200004de:	22fa      	movs	r2, #250	; 0xfa
200004e0:	0091      	lsls	r1, r2, #2
200004e2:	0018      	movs	r0, r3
200004e4:	f000 fb6c 	bl	20000bc0 <__udivsi3>
200004e8:	0003      	movs	r3, r0
200004ea:	607b      	str	r3, [r7, #4]
    us++;
200004ec:	687b      	ldr	r3, [r7, #4]
200004ee:	3301      	adds	r3, #1
200004f0:	607b      	str	r3, [r7, #4]
#endif 
    while( us > 0 ){
200004f2:	e00a      	b.n	2000050a <delay_micro+0x36>
        delay_250ns();
200004f4:	f7ff ffcc 	bl	20000490 <delay_250ns>
        delay_250ns();
200004f8:	f7ff ffca 	bl	20000490 <delay_250ns>
        delay_250ns();
200004fc:	f7ff ffc8 	bl	20000490 <delay_250ns>
        delay_250ns();
20000500:	f7ff ffc6 	bl	20000490 <delay_250ns>
        us--;
20000504:	687b      	ldr	r3, [r7, #4]
20000506:	3b01      	subs	r3, #1
20000508:	607b      	str	r3, [r7, #4]
    while( us > 0 ){
2000050a:	687b      	ldr	r3, [r7, #4]
2000050c:	2b00      	cmp	r3, #0
2000050e:	d1f1      	bne.n	200004f4 <delay_micro+0x20>
    }
}
20000510:	46c0      	nop			; (mov r8, r8)
20000512:	46c0      	nop			; (mov r8, r8)
20000514:	46bd      	mov	sp, r7
20000516:	b002      	add	sp, #8
20000518:	bd80      	pop	{r7, pc}

2000051a <delay_milli>:

void delay_milli(unsigned int ms){
2000051a:	b580      	push	{r7, lr}
2000051c:	b082      	sub	sp, #8
2000051e:	af00      	add	r7, sp, #0
20000520:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    ms /= 1000;
20000522:	687b      	ldr	r3, [r7, #4]
20000524:	22fa      	movs	r2, #250	; 0xfa
20000526:	0091      	lsls	r1, r2, #2
20000528:	0018      	movs	r0, r3
2000052a:	f000 fb49 	bl	20000bc0 <__udivsi3>
2000052e:	0003      	movs	r3, r0
20000530:	607b      	str	r3, [r7, #4]
    ms++;
20000532:	687b      	ldr	r3, [r7, #4]
20000534:	3301      	adds	r3, #1
20000536:	607b      	str	r3, [r7, #4]
#endif
    while(ms > 0){
20000538:	e007      	b.n	2000054a <delay_milli+0x30>
        delay_micro(1000);
2000053a:	23fa      	movs	r3, #250	; 0xfa
2000053c:	009b      	lsls	r3, r3, #2
2000053e:	0018      	movs	r0, r3
20000540:	f7ff ffc8 	bl	200004d4 <delay_micro>
        ms--;
20000544:	687b      	ldr	r3, [r7, #4]
20000546:	3b01      	subs	r3, #1
20000548:	607b      	str	r3, [r7, #4]
    while(ms > 0){
2000054a:	687b      	ldr	r3, [r7, #4]
2000054c:	2b00      	cmp	r3, #0
2000054e:	d1f4      	bne.n	2000053a <delay_milli+0x20>
    }
}
20000550:	46c0      	nop			; (mov r8, r8)
20000552:	46c0      	nop			; (mov r8, r8)
20000554:	46bd      	mov	sp, r7
20000556:	b002      	add	sp, #8
20000558:	bd80      	pop	{r7, pc}

2000055a <objects_overlap>:
	void (*clear) (struct tObj *);
	int (* move) (struct tObj *);
	void (* set_speed) (struct tObj *, int, int);
} OBJECT, *POBJECT;

int objects_overlap( POBJECT fucking_bird, POBJECT obst_1_t, POBJECT obst_1_b, POBJECT obst_2_t, POBJECT obst_2_b){
2000055a:	b580      	push	{r7, lr}
2000055c:	b084      	sub	sp, #16
2000055e:	af00      	add	r7, sp, #0
20000560:	60f8      	str	r0, [r7, #12]
20000562:	60b9      	str	r1, [r7, #8]
20000564:	607a      	str	r2, [r7, #4]
20000566:	603b      	str	r3, [r7, #0]

	if(obst_1_t->posx <= fucking_bird->posx + fucking_bird->geo->sizex - 1 && !(obst_1_t->posx + obst_1_t->geo->sizex < fucking_bird->posx)){
20000568:	68fb      	ldr	r3, [r7, #12]
2000056a:	68da      	ldr	r2, [r3, #12]
2000056c:	68fb      	ldr	r3, [r7, #12]
2000056e:	681b      	ldr	r3, [r3, #0]
20000570:	685b      	ldr	r3, [r3, #4]
20000572:	18d2      	adds	r2, r2, r3
20000574:	68bb      	ldr	r3, [r7, #8]
20000576:	68db      	ldr	r3, [r3, #12]
20000578:	429a      	cmp	r2, r3
2000057a:	dd24      	ble.n	200005c6 <objects_overlap+0x6c>
2000057c:	68bb      	ldr	r3, [r7, #8]
2000057e:	68da      	ldr	r2, [r3, #12]
20000580:	68bb      	ldr	r3, [r7, #8]
20000582:	681b      	ldr	r3, [r3, #0]
20000584:	685b      	ldr	r3, [r3, #4]
20000586:	18d2      	adds	r2, r2, r3
20000588:	68fb      	ldr	r3, [r7, #12]
2000058a:	68db      	ldr	r3, [r3, #12]
2000058c:	429a      	cmp	r2, r3
2000058e:	db1a      	blt.n	200005c6 <objects_overlap+0x6c>
		if(fucking_bird->posy <= obst_1_t->posy + obst_1_t->geo->sizey) return 1;
20000590:	68fb      	ldr	r3, [r7, #12]
20000592:	691a      	ldr	r2, [r3, #16]
20000594:	68bb      	ldr	r3, [r7, #8]
20000596:	6919      	ldr	r1, [r3, #16]
20000598:	68bb      	ldr	r3, [r7, #8]
2000059a:	681b      	ldr	r3, [r3, #0]
2000059c:	689b      	ldr	r3, [r3, #8]
2000059e:	18cb      	adds	r3, r1, r3
200005a0:	429a      	cmp	r2, r3
200005a2:	dc01      	bgt.n	200005a8 <objects_overlap+0x4e>
200005a4:	2301      	movs	r3, #1
200005a6:	e03e      	b.n	20000626 <objects_overlap+0xcc>
		else if(fucking_bird->posy + fucking_bird->geo->sizey - 3 >= obst_1_b->posy) return 1;
200005a8:	68fb      	ldr	r3, [r7, #12]
200005aa:	691a      	ldr	r2, [r3, #16]
200005ac:	68fb      	ldr	r3, [r7, #12]
200005ae:	681b      	ldr	r3, [r3, #0]
200005b0:	689b      	ldr	r3, [r3, #8]
200005b2:	18d3      	adds	r3, r2, r3
200005b4:	1e9a      	subs	r2, r3, #2
200005b6:	687b      	ldr	r3, [r7, #4]
200005b8:	691b      	ldr	r3, [r3, #16]
200005ba:	429a      	cmp	r2, r3
200005bc:	dd01      	ble.n	200005c2 <objects_overlap+0x68>
200005be:	2301      	movs	r3, #1
200005c0:	e031      	b.n	20000626 <objects_overlap+0xcc>
		else return 0;
200005c2:	2300      	movs	r3, #0
200005c4:	e02f      	b.n	20000626 <objects_overlap+0xcc>
	}
	
	else if(obst_2_t->posx <= fucking_bird->posx + fucking_bird->geo->sizex - 1 && !(obst_2_t->posx + obst_2_t->geo->sizex < fucking_bird->posx)){
200005c6:	68fb      	ldr	r3, [r7, #12]
200005c8:	68da      	ldr	r2, [r3, #12]
200005ca:	68fb      	ldr	r3, [r7, #12]
200005cc:	681b      	ldr	r3, [r3, #0]
200005ce:	685b      	ldr	r3, [r3, #4]
200005d0:	18d2      	adds	r2, r2, r3
200005d2:	683b      	ldr	r3, [r7, #0]
200005d4:	68db      	ldr	r3, [r3, #12]
200005d6:	429a      	cmp	r2, r3
200005d8:	dd24      	ble.n	20000624 <objects_overlap+0xca>
200005da:	683b      	ldr	r3, [r7, #0]
200005dc:	68da      	ldr	r2, [r3, #12]
200005de:	683b      	ldr	r3, [r7, #0]
200005e0:	681b      	ldr	r3, [r3, #0]
200005e2:	685b      	ldr	r3, [r3, #4]
200005e4:	18d2      	adds	r2, r2, r3
200005e6:	68fb      	ldr	r3, [r7, #12]
200005e8:	68db      	ldr	r3, [r3, #12]
200005ea:	429a      	cmp	r2, r3
200005ec:	db1a      	blt.n	20000624 <objects_overlap+0xca>
		if(fucking_bird->posy <= obst_2_t->posy + obst_2_t->geo->sizey) return 1;
200005ee:	68fb      	ldr	r3, [r7, #12]
200005f0:	691a      	ldr	r2, [r3, #16]
200005f2:	683b      	ldr	r3, [r7, #0]
200005f4:	6919      	ldr	r1, [r3, #16]
200005f6:	683b      	ldr	r3, [r7, #0]
200005f8:	681b      	ldr	r3, [r3, #0]
200005fa:	689b      	ldr	r3, [r3, #8]
200005fc:	18cb      	adds	r3, r1, r3
200005fe:	429a      	cmp	r2, r3
20000600:	dc01      	bgt.n	20000606 <objects_overlap+0xac>
20000602:	2301      	movs	r3, #1
20000604:	e00f      	b.n	20000626 <objects_overlap+0xcc>
		else if(fucking_bird->posy + fucking_bird->geo->sizey - 3 >= obst_2_b->posy) return 1;  
20000606:	68fb      	ldr	r3, [r7, #12]
20000608:	691a      	ldr	r2, [r3, #16]
2000060a:	68fb      	ldr	r3, [r7, #12]
2000060c:	681b      	ldr	r3, [r3, #0]
2000060e:	689b      	ldr	r3, [r3, #8]
20000610:	18d3      	adds	r3, r2, r3
20000612:	1e9a      	subs	r2, r3, #2
20000614:	69bb      	ldr	r3, [r7, #24]
20000616:	691b      	ldr	r3, [r3, #16]
20000618:	429a      	cmp	r2, r3
2000061a:	dd01      	ble.n	20000620 <objects_overlap+0xc6>
2000061c:	2301      	movs	r3, #1
2000061e:	e002      	b.n	20000626 <objects_overlap+0xcc>
		else return 0;
20000620:	2300      	movs	r3, #0
20000622:	e000      	b.n	20000626 <objects_overlap+0xcc>
	} else return 0; 
20000624:	2300      	movs	r3, #0
}
20000626:	0018      	movs	r0, r3
20000628:	46bd      	mov	sp, r7
2000062a:	b004      	add	sp, #16
2000062c:	bd80      	pop	{r7, pc}

2000062e <draw_object>:

void draw_object(POBJECT obj){
2000062e:	b580      	push	{r7, lr}
20000630:	b084      	sub	sp, #16
20000632:	af00      	add	r7, sp, #0
20000634:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < obj->geo->numpoints; i++){
20000636:	2300      	movs	r3, #0
20000638:	60fb      	str	r3, [r7, #12]
2000063a:	e01d      	b.n	20000678 <draw_object+0x4a>
		graphic_pixel_set(obj->geo->px[i].x + obj->posx, obj->geo->px[i].y + obj->posy);
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	681a      	ldr	r2, [r3, #0]
20000640:	68fb      	ldr	r3, [r7, #12]
20000642:	3304      	adds	r3, #4
20000644:	005b      	lsls	r3, r3, #1
20000646:	18d3      	adds	r3, r2, r3
20000648:	3304      	adds	r3, #4
2000064a:	781b      	ldrb	r3, [r3, #0]
2000064c:	001a      	movs	r2, r3
2000064e:	687b      	ldr	r3, [r7, #4]
20000650:	68db      	ldr	r3, [r3, #12]
20000652:	18d0      	adds	r0, r2, r3
20000654:	687b      	ldr	r3, [r7, #4]
20000656:	681a      	ldr	r2, [r3, #0]
20000658:	68fb      	ldr	r3, [r7, #12]
2000065a:	3304      	adds	r3, #4
2000065c:	005b      	lsls	r3, r3, #1
2000065e:	18d3      	adds	r3, r2, r3
20000660:	3305      	adds	r3, #5
20000662:	781b      	ldrb	r3, [r3, #0]
20000664:	001a      	movs	r2, r3
20000666:	687b      	ldr	r3, [r7, #4]
20000668:	691b      	ldr	r3, [r3, #16]
2000066a:	18d3      	adds	r3, r2, r3
2000066c:	0019      	movs	r1, r3
2000066e:	f7ff fcd5 	bl	2000001c <graphic_pixel_set>
	for(int i = 0; i < obj->geo->numpoints; i++){
20000672:	68fb      	ldr	r3, [r7, #12]
20000674:	3301      	adds	r3, #1
20000676:	60fb      	str	r3, [r7, #12]
20000678:	687b      	ldr	r3, [r7, #4]
2000067a:	681b      	ldr	r3, [r3, #0]
2000067c:	681b      	ldr	r3, [r3, #0]
2000067e:	68fa      	ldr	r2, [r7, #12]
20000680:	429a      	cmp	r2, r3
20000682:	dbdb      	blt.n	2000063c <draw_object+0xe>
	}
}
20000684:	46c0      	nop			; (mov r8, r8)
20000686:	46c0      	nop			; (mov r8, r8)
20000688:	46bd      	mov	sp, r7
2000068a:	b004      	add	sp, #16
2000068c:	bd80      	pop	{r7, pc}

2000068e <clear_object>:

void clear_object(POBJECT obj){
2000068e:	b580      	push	{r7, lr}
20000690:	b084      	sub	sp, #16
20000692:	af00      	add	r7, sp, #0
20000694:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < obj->geo->numpoints; i++){
20000696:	2300      	movs	r3, #0
20000698:	60fb      	str	r3, [r7, #12]
2000069a:	e01d      	b.n	200006d8 <clear_object+0x4a>
		graphic_pixel_clear(obj->geo->px[i].x + obj->posx, obj->geo->px[i].y + obj->posy);
2000069c:	687b      	ldr	r3, [r7, #4]
2000069e:	681a      	ldr	r2, [r3, #0]
200006a0:	68fb      	ldr	r3, [r7, #12]
200006a2:	3304      	adds	r3, #4
200006a4:	005b      	lsls	r3, r3, #1
200006a6:	18d3      	adds	r3, r2, r3
200006a8:	3304      	adds	r3, #4
200006aa:	781b      	ldrb	r3, [r3, #0]
200006ac:	001a      	movs	r2, r3
200006ae:	687b      	ldr	r3, [r7, #4]
200006b0:	68db      	ldr	r3, [r3, #12]
200006b2:	18d0      	adds	r0, r2, r3
200006b4:	687b      	ldr	r3, [r7, #4]
200006b6:	681a      	ldr	r2, [r3, #0]
200006b8:	68fb      	ldr	r3, [r7, #12]
200006ba:	3304      	adds	r3, #4
200006bc:	005b      	lsls	r3, r3, #1
200006be:	18d3      	adds	r3, r2, r3
200006c0:	3305      	adds	r3, #5
200006c2:	781b      	ldrb	r3, [r3, #0]
200006c4:	001a      	movs	r2, r3
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	691b      	ldr	r3, [r3, #16]
200006ca:	18d3      	adds	r3, r2, r3
200006cc:	0019      	movs	r1, r3
200006ce:	f7ff fca8 	bl	20000022 <graphic_pixel_clear>
	for(int i = 0; i < obj->geo->numpoints; i++){
200006d2:	68fb      	ldr	r3, [r7, #12]
200006d4:	3301      	adds	r3, #1
200006d6:	60fb      	str	r3, [r7, #12]
200006d8:	687b      	ldr	r3, [r7, #4]
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	681b      	ldr	r3, [r3, #0]
200006de:	68fa      	ldr	r2, [r7, #12]
200006e0:	429a      	cmp	r2, r3
200006e2:	dbdb      	blt.n	2000069c <clear_object+0xe>
	}
}
200006e4:	46c0      	nop			; (mov r8, r8)
200006e6:	46c0      	nop			; (mov r8, r8)
200006e8:	46bd      	mov	sp, r7
200006ea:	b004      	add	sp, #16
200006ec:	bd80      	pop	{r7, pc}

200006ee <move_object>:

void move_object(POBJECT obj){
200006ee:	b580      	push	{r7, lr}
200006f0:	b082      	sub	sp, #8
200006f2:	af00      	add	r7, sp, #0
200006f4:	6078      	str	r0, [r7, #4]
	clear_object(obj);
200006f6:	687b      	ldr	r3, [r7, #4]
200006f8:	0018      	movs	r0, r3
200006fa:	f7ff ffc8 	bl	2000068e <clear_object>
	obj->posx += obj->dirx;
200006fe:	687b      	ldr	r3, [r7, #4]
20000700:	68da      	ldr	r2, [r3, #12]
20000702:	687b      	ldr	r3, [r7, #4]
20000704:	685b      	ldr	r3, [r3, #4]
20000706:	18d2      	adds	r2, r2, r3
20000708:	687b      	ldr	r3, [r7, #4]
2000070a:	60da      	str	r2, [r3, #12]
	obj->posy += obj->diry;
2000070c:	687b      	ldr	r3, [r7, #4]
2000070e:	691a      	ldr	r2, [r3, #16]
20000710:	687b      	ldr	r3, [r7, #4]
20000712:	689b      	ldr	r3, [r3, #8]
20000714:	18d2      	adds	r2, r2, r3
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	611a      	str	r2, [r3, #16]
	draw_object(obj);
2000071a:	687b      	ldr	r3, [r7, #4]
2000071c:	0018      	movs	r0, r3
2000071e:	f7ff ff86 	bl	2000062e <draw_object>
}
20000722:	46c0      	nop			; (mov r8, r8)
20000724:	46bd      	mov	sp, r7
20000726:	b002      	add	sp, #8
20000728:	bd80      	pop	{r7, pc}

2000072a <set_object_speed>:

void set_object_speed(POBJECT obj, int x, int y){
2000072a:	b580      	push	{r7, lr}
2000072c:	b084      	sub	sp, #16
2000072e:	af00      	add	r7, sp, #0
20000730:	60f8      	str	r0, [r7, #12]
20000732:	60b9      	str	r1, [r7, #8]
20000734:	607a      	str	r2, [r7, #4]
	obj->dirx = x;
20000736:	68fb      	ldr	r3, [r7, #12]
20000738:	68ba      	ldr	r2, [r7, #8]
2000073a:	605a      	str	r2, [r3, #4]
	obj->diry = y;
2000073c:	68fb      	ldr	r3, [r7, #12]
2000073e:	687a      	ldr	r2, [r7, #4]
20000740:	609a      	str	r2, [r3, #8]
}
20000742:	46c0      	nop			; (mov r8, r8)
20000744:	46bd      	mov	sp, r7
20000746:	b004      	add	sp, #16
20000748:	bd80      	pop	{r7, pc}

2000074a <timer6_init>:

void timer6_init(){
2000074a:	b580      	push	{r7, lr}
2000074c:	af00      	add	r7, sp, #0
	*TIM6_CR1 &= ~CEN;
2000074e:	4b0b      	ldr	r3, [pc, #44]	; (2000077c <timer6_init+0x32>)
20000750:	881b      	ldrh	r3, [r3, #0]
20000752:	b29b      	uxth	r3, r3
20000754:	4a09      	ldr	r2, [pc, #36]	; (2000077c <timer6_init+0x32>)
20000756:	2101      	movs	r1, #1
20000758:	438b      	bics	r3, r1
2000075a:	b29b      	uxth	r3, r3
2000075c:	8013      	strh	r3, [r2, #0]
	*TIM6_ARR = 0xFFFF;
2000075e:	4b08      	ldr	r3, [pc, #32]	; (20000780 <timer6_init+0x36>)
20000760:	2201      	movs	r2, #1
20000762:	4252      	negs	r2, r2
20000764:	801a      	strh	r2, [r3, #0]
	*TIM6_CR1 |= (CEN | UDIS);
20000766:	4b05      	ldr	r3, [pc, #20]	; (2000077c <timer6_init+0x32>)
20000768:	881b      	ldrh	r3, [r3, #0]
2000076a:	b29b      	uxth	r3, r3
2000076c:	4a03      	ldr	r2, [pc, #12]	; (2000077c <timer6_init+0x32>)
2000076e:	2103      	movs	r1, #3
20000770:	430b      	orrs	r3, r1
20000772:	b29b      	uxth	r3, r3
20000774:	8013      	strh	r3, [r2, #0]
	
}
20000776:	46c0      	nop			; (mov r8, r8)
20000778:	46bd      	mov	sp, r7
2000077a:	bd80      	pop	{r7, pc}
2000077c:	40001000 	andmi	r1, r0, r0
20000780:	4000102c 	andmi	r1, r0, ip, lsr #32

20000784 <move_obstacles>:

void move_obstacles(POBJECT o1t, POBJECT o1b, POBJECT o2t, POBJECT o2b){
20000784:	b580      	push	{r7, lr}
20000786:	b084      	sub	sp, #16
20000788:	af00      	add	r7, sp, #0
2000078a:	60f8      	str	r0, [r7, #12]
2000078c:	60b9      	str	r1, [r7, #8]
2000078e:	607a      	str	r2, [r7, #4]
20000790:	603b      	str	r3, [r7, #0]
	o1t->move(o1t);
20000792:	68fb      	ldr	r3, [r7, #12]
20000794:	69db      	ldr	r3, [r3, #28]
20000796:	68fa      	ldr	r2, [r7, #12]
20000798:	0010      	movs	r0, r2
2000079a:	4798      	blx	r3
	o1b->move(o1b);
2000079c:	68bb      	ldr	r3, [r7, #8]
2000079e:	69db      	ldr	r3, [r3, #28]
200007a0:	68ba      	ldr	r2, [r7, #8]
200007a2:	0010      	movs	r0, r2
200007a4:	4798      	blx	r3
	o2t->move(o2t);
200007a6:	687b      	ldr	r3, [r7, #4]
200007a8:	69db      	ldr	r3, [r3, #28]
200007aa:	687a      	ldr	r2, [r7, #4]
200007ac:	0010      	movs	r0, r2
200007ae:	4798      	blx	r3
	o1b->move(o2b);
200007b0:	68bb      	ldr	r3, [r7, #8]
200007b2:	69db      	ldr	r3, [r3, #28]
200007b4:	683a      	ldr	r2, [r7, #0]
200007b6:	0010      	movs	r0, r2
200007b8:	4798      	blx	r3
}
200007ba:	46c0      	nop			; (mov r8, r8)
200007bc:	46bd      	mov	sp, r7
200007be:	b004      	add	sp, #16
200007c0:	bd80      	pop	{r7, pc}

200007c2 <set_obstacle_speed>:

void set_obstacle_speed(int x, int y, POBJECT o1t, POBJECT o1b, POBJECT o2t, POBJECT o2b){
200007c2:	b580      	push	{r7, lr}
200007c4:	b084      	sub	sp, #16
200007c6:	af00      	add	r7, sp, #0
200007c8:	60f8      	str	r0, [r7, #12]
200007ca:	60b9      	str	r1, [r7, #8]
200007cc:	607a      	str	r2, [r7, #4]
200007ce:	603b      	str	r3, [r7, #0]
	o1t->set_speed(o1t, x,y);
200007d0:	687b      	ldr	r3, [r7, #4]
200007d2:	6a1b      	ldr	r3, [r3, #32]
200007d4:	68ba      	ldr	r2, [r7, #8]
200007d6:	68f9      	ldr	r1, [r7, #12]
200007d8:	6878      	ldr	r0, [r7, #4]
200007da:	4798      	blx	r3
	o1b->set_speed(o1b, x,y);
200007dc:	683b      	ldr	r3, [r7, #0]
200007de:	6a1b      	ldr	r3, [r3, #32]
200007e0:	68ba      	ldr	r2, [r7, #8]
200007e2:	68f9      	ldr	r1, [r7, #12]
200007e4:	6838      	ldr	r0, [r7, #0]
200007e6:	4798      	blx	r3
	o2t->set_speed(o2t, x,y);
200007e8:	69bb      	ldr	r3, [r7, #24]
200007ea:	6a1b      	ldr	r3, [r3, #32]
200007ec:	68ba      	ldr	r2, [r7, #8]
200007ee:	68f9      	ldr	r1, [r7, #12]
200007f0:	69b8      	ldr	r0, [r7, #24]
200007f2:	4798      	blx	r3
	o2b->set_speed(o2b, x,y);
200007f4:	69fb      	ldr	r3, [r7, #28]
200007f6:	6a1b      	ldr	r3, [r3, #32]
200007f8:	68ba      	ldr	r2, [r7, #8]
200007fa:	68f9      	ldr	r1, [r7, #12]
200007fc:	69f8      	ldr	r0, [r7, #28]
200007fe:	4798      	blx	r3
}
20000800:	46c0      	nop			; (mov r8, r8)
20000802:	46bd      	mov	sp, r7
20000804:	b004      	add	sp, #16
20000806:	bd80      	pop	{r7, pc}

20000808 <reset_obj_position>:
	clear_object,
	move_object,
	set_object_speed
};

void reset_obj_position(POBJECT ot1, POBJECT ob1, POBJECT ot2, POBJECT ob2, POBJECT bs, POBJECT bf){
20000808:	b580      	push	{r7, lr}
2000080a:	b084      	sub	sp, #16
2000080c:	af00      	add	r7, sp, #0
2000080e:	60f8      	str	r0, [r7, #12]
20000810:	60b9      	str	r1, [r7, #8]
20000812:	607a      	str	r2, [r7, #4]
20000814:	603b      	str	r3, [r7, #0]
	ot1->posx = 60;
20000816:	68fb      	ldr	r3, [r7, #12]
20000818:	223c      	movs	r2, #60	; 0x3c
2000081a:	60da      	str	r2, [r3, #12]
	ot1->posy = -29;
2000081c:	68fb      	ldr	r3, [r7, #12]
2000081e:	221d      	movs	r2, #29
20000820:	4252      	negs	r2, r2
20000822:	611a      	str	r2, [r3, #16]
	ob1->posx = 60;
20000824:	68bb      	ldr	r3, [r7, #8]
20000826:	223c      	movs	r2, #60	; 0x3c
20000828:	60da      	str	r2, [r3, #12]
	ob1->posy = 43;
2000082a:	68bb      	ldr	r3, [r7, #8]
2000082c:	222b      	movs	r2, #43	; 0x2b
2000082e:	611a      	str	r2, [r3, #16]
	
	ot2->posx = 130;
20000830:	687b      	ldr	r3, [r7, #4]
20000832:	2282      	movs	r2, #130	; 0x82
20000834:	60da      	str	r2, [r3, #12]
	ot2->posy = -29;
20000836:	687b      	ldr	r3, [r7, #4]
20000838:	221d      	movs	r2, #29
2000083a:	4252      	negs	r2, r2
2000083c:	611a      	str	r2, [r3, #16]
	ob2->posx = 130;
2000083e:	683b      	ldr	r3, [r7, #0]
20000840:	2282      	movs	r2, #130	; 0x82
20000842:	60da      	str	r2, [r3, #12]
	ob2->posy = 43;
20000844:	683b      	ldr	r3, [r7, #0]
20000846:	222b      	movs	r2, #43	; 0x2b
20000848:	611a      	str	r2, [r3, #16]
	
	bs->posy = 30;
2000084a:	69bb      	ldr	r3, [r7, #24]
2000084c:	221e      	movs	r2, #30
2000084e:	611a      	str	r2, [r3, #16]
	bf->posy = 30;
20000850:	69fb      	ldr	r3, [r7, #28]
20000852:	221e      	movs	r2, #30
20000854:	611a      	str	r2, [r3, #16]
}
20000856:	46c0      	nop			; (mov r8, r8)
20000858:	46bd      	mov	sp, r7
2000085a:	b004      	add	sp, #16
2000085c:	bd80      	pop	{r7, pc}

2000085e <main>:

void main(void){
2000085e:	b5b0      	push	{r4, r5, r7, lr}
20000860:	b088      	sub	sp, #32
20000862:	af02      	add	r7, sp, #8
	init_app();
20000864:	f7ff fbe0 	bl	20000028 <init_app>
	
	graphic_initialize();
20000868:	f7ff fbd2 	bl	20000010 <graphic_initialize>
	graphic_clear_screen();
2000086c:	f7ff fbd3 	bl	20000016 <graphic_clear_screen>
	timer6_init();
20000870:	f7ff ff6b 	bl	2000074a <timer6_init>
	
	char *s;

	char counter[] = "Points: ";
20000874:	003b      	movs	r3, r7
20000876:	4ac7      	ldr	r2, [pc, #796]	; (20000b94 <main+0x336>)
20000878:	ca03      	ldmia	r2!, {r0, r1}
2000087a:	c303      	stmia	r3!, {r0, r1}
2000087c:	7812      	ldrb	r2, [r2, #0]
2000087e:	701a      	strb	r2, [r3, #0]
	
	ascii_gotoxy(1,1);
20000880:	2101      	movs	r1, #1
20000882:	2001      	movs	r0, #1
20000884:	f7ff fd06 	bl	20000294 <ascii_gotoxy>
	s = counter;
20000888:	003b      	movs	r3, r7
2000088a:	617b      	str	r3, [r7, #20]
	
	while(*s){
2000088c:	e006      	b.n	2000089c <main+0x3e>
		ascii_write_char(*s++);
2000088e:	697b      	ldr	r3, [r7, #20]
20000890:	1c5a      	adds	r2, r3, #1
20000892:	617a      	str	r2, [r7, #20]
20000894:	781b      	ldrb	r3, [r3, #0]
20000896:	0018      	movs	r0, r3
20000898:	f7ff fce3 	bl	20000262 <ascii_write_char>
	while(*s){
2000089c:	697b      	ldr	r3, [r7, #20]
2000089e:	781b      	ldrb	r3, [r3, #0]
200008a0:	2b00      	cmp	r3, #0
200008a2:	d1f4      	bne.n	2000088e <main+0x30>
	}
	
	short random = 0;
200008a4:	230e      	movs	r3, #14
200008a6:	18fb      	adds	r3, r7, r3
200008a8:	2200      	movs	r2, #0
200008aa:	801a      	strh	r2, [r3, #0]
	static POBJECT obstacle_top_2 = &obstacle_top_obj_2;
	static POBJECT obstacle_bottom_2 = &obstacle_bottom_obj_2;
	static POBJECT bird = &bird_soar_obj;
	static POBJECT start_screen = &starting_screen_obj;
	
	short the_y_pos_bird = bird->posy; 
200008ac:	4bba      	ldr	r3, [pc, #744]	; (20000b98 <main+0x33a>)
200008ae:	681b      	ldr	r3, [r3, #0]
200008b0:	691a      	ldr	r2, [r3, #16]
200008b2:	230c      	movs	r3, #12
200008b4:	18fb      	adds	r3, r7, r3
200008b6:	801a      	strh	r2, [r3, #0]
	short the_y_speed_bird = bird->diry;
200008b8:	4bb7      	ldr	r3, [pc, #732]	; (20000b98 <main+0x33a>)
200008ba:	681b      	ldr	r3, [r3, #0]
200008bc:	689a      	ldr	r2, [r3, #8]
200008be:	230a      	movs	r3, #10
200008c0:	18fb      	adds	r3, r7, r3
200008c2:	801a      	strh	r2, [r3, #0]
	
	set_obstacle_speed(-6, 0, obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2);
200008c4:	4bb5      	ldr	r3, [pc, #724]	; (20000b9c <main+0x33e>)
200008c6:	6819      	ldr	r1, [r3, #0]
200008c8:	4bb5      	ldr	r3, [pc, #724]	; (20000ba0 <main+0x342>)
200008ca:	681c      	ldr	r4, [r3, #0]
200008cc:	4bb5      	ldr	r3, [pc, #724]	; (20000ba4 <main+0x346>)
200008ce:	681a      	ldr	r2, [r3, #0]
200008d0:	4bb5      	ldr	r3, [pc, #724]	; (20000ba8 <main+0x34a>)
200008d2:	681b      	ldr	r3, [r3, #0]
200008d4:	2006      	movs	r0, #6
200008d6:	4240      	negs	r0, r0
200008d8:	9301      	str	r3, [sp, #4]
200008da:	9200      	str	r2, [sp, #0]
200008dc:	0023      	movs	r3, r4
200008de:	000a      	movs	r2, r1
200008e0:	2100      	movs	r1, #0
200008e2:	f7ff ff6e 	bl	200007c2 <set_obstacle_speed>

	while(1){
		points = 0; 
200008e6:	2300      	movs	r3, #0
200008e8:	613b      	str	r3, [r7, #16]
		graphic_clear_screen();
200008ea:	f7ff fb94 	bl	20000016 <graphic_clear_screen>
		reset_obj_position(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2, &bird_soar_obj, &bird_flap_obj);
200008ee:	4bab      	ldr	r3, [pc, #684]	; (20000b9c <main+0x33e>)
200008f0:	6818      	ldr	r0, [r3, #0]
200008f2:	4bab      	ldr	r3, [pc, #684]	; (20000ba0 <main+0x342>)
200008f4:	6819      	ldr	r1, [r3, #0]
200008f6:	4bab      	ldr	r3, [pc, #684]	; (20000ba4 <main+0x346>)
200008f8:	681a      	ldr	r2, [r3, #0]
200008fa:	4bab      	ldr	r3, [pc, #684]	; (20000ba8 <main+0x34a>)
200008fc:	681c      	ldr	r4, [r3, #0]
200008fe:	4bab      	ldr	r3, [pc, #684]	; (20000bac <main+0x34e>)
20000900:	9301      	str	r3, [sp, #4]
20000902:	4bab      	ldr	r3, [pc, #684]	; (20000bb0 <main+0x352>)
20000904:	9300      	str	r3, [sp, #0]
20000906:	0023      	movs	r3, r4
20000908:	f7ff ff7e 	bl	20000808 <reset_obj_position>
		start_screen->draw(start_screen);
2000090c:	4ba9      	ldr	r3, [pc, #676]	; (20000bb4 <main+0x356>)
2000090e:	681b      	ldr	r3, [r3, #0]
20000910:	695a      	ldr	r2, [r3, #20]
20000912:	4ba8      	ldr	r3, [pc, #672]	; (20000bb4 <main+0x356>)
20000914:	681b      	ldr	r3, [r3, #0]
20000916:	0018      	movs	r0, r3
20000918:	4790      	blx	r2
		while(keyb_enhanced() != 5){
2000091a:	e021      	b.n	20000960 <main+0x102>
			bird = &bird_soar_obj;
2000091c:	4b9e      	ldr	r3, [pc, #632]	; (20000b98 <main+0x33a>)
2000091e:	4aa4      	ldr	r2, [pc, #656]	; (20000bb0 <main+0x352>)
20000920:	601a      	str	r2, [r3, #0]
			draw_object(bird);
20000922:	4b9d      	ldr	r3, [pc, #628]	; (20000b98 <main+0x33a>)
20000924:	681b      	ldr	r3, [r3, #0]
20000926:	0018      	movs	r0, r3
20000928:	f7ff fe81 	bl	2000062e <draw_object>
			delay_milli(50000);
2000092c:	4ba2      	ldr	r3, [pc, #648]	; (20000bb8 <main+0x35a>)
2000092e:	0018      	movs	r0, r3
20000930:	f7ff fdf3 	bl	2000051a <delay_milli>
			clear_object(bird);
20000934:	4b98      	ldr	r3, [pc, #608]	; (20000b98 <main+0x33a>)
20000936:	681b      	ldr	r3, [r3, #0]
20000938:	0018      	movs	r0, r3
2000093a:	f7ff fea8 	bl	2000068e <clear_object>
			bird = &bird_flap_obj;
2000093e:	4b96      	ldr	r3, [pc, #600]	; (20000b98 <main+0x33a>)
20000940:	4a9a      	ldr	r2, [pc, #616]	; (20000bac <main+0x34e>)
20000942:	601a      	str	r2, [r3, #0]
			draw_object(bird);
20000944:	4b94      	ldr	r3, [pc, #592]	; (20000b98 <main+0x33a>)
20000946:	681b      	ldr	r3, [r3, #0]
20000948:	0018      	movs	r0, r3
2000094a:	f7ff fe70 	bl	2000062e <draw_object>
			delay_milli(50000);
2000094e:	4b9a      	ldr	r3, [pc, #616]	; (20000bb8 <main+0x35a>)
20000950:	0018      	movs	r0, r3
20000952:	f7ff fde2 	bl	2000051a <delay_milli>
			clear_object(bird);
20000956:	4b90      	ldr	r3, [pc, #576]	; (20000b98 <main+0x33a>)
20000958:	681b      	ldr	r3, [r3, #0]
2000095a:	0018      	movs	r0, r3
2000095c:	f7ff fe97 	bl	2000068e <clear_object>
		while(keyb_enhanced() != 5){
20000960:	f7ff fd62 	bl	20000428 <keyb_enhanced>
20000964:	0003      	movs	r3, r0
20000966:	2b05      	cmp	r3, #5
20000968:	d1d8      	bne.n	2000091c <main+0xbe>
		}
		graphic_clear_screen();
2000096a:	f7ff fb54 	bl	20000016 <graphic_clear_screen>
		while(1){
			bird->move(bird);
2000096e:	4b8a      	ldr	r3, [pc, #552]	; (20000b98 <main+0x33a>)
20000970:	681b      	ldr	r3, [r3, #0]
20000972:	69da      	ldr	r2, [r3, #28]
20000974:	4b88      	ldr	r3, [pc, #544]	; (20000b98 <main+0x33a>)
20000976:	681b      	ldr	r3, [r3, #0]
20000978:	0018      	movs	r0, r3
2000097a:	4790      	blx	r2
			delay_milli(50000);
2000097c:	4b8e      	ldr	r3, [pc, #568]	; (20000bb8 <main+0x35a>)
2000097e:	0018      	movs	r0, r3
20000980:	f7ff fdcb 	bl	2000051a <delay_milli>
			move_obstacles(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2);
20000984:	4b85      	ldr	r3, [pc, #532]	; (20000b9c <main+0x33e>)
20000986:	6818      	ldr	r0, [r3, #0]
20000988:	4b85      	ldr	r3, [pc, #532]	; (20000ba0 <main+0x342>)
2000098a:	6819      	ldr	r1, [r3, #0]
2000098c:	4b85      	ldr	r3, [pc, #532]	; (20000ba4 <main+0x346>)
2000098e:	681a      	ldr	r2, [r3, #0]
20000990:	4b85      	ldr	r3, [pc, #532]	; (20000ba8 <main+0x34a>)
20000992:	681b      	ldr	r3, [r3, #0]
20000994:	f7ff fef6 	bl	20000784 <move_obstacles>

		
			if(keyb_enhanced() == 2){
20000998:	f7ff fd46 	bl	20000428 <keyb_enhanced>
2000099c:	0003      	movs	r3, r0
2000099e:	2b02      	cmp	r3, #2
200009a0:	d12f      	bne.n	20000a02 <main+0x1a4>
				the_y_pos_bird = bird->posy;
200009a2:	4b7d      	ldr	r3, [pc, #500]	; (20000b98 <main+0x33a>)
200009a4:	681b      	ldr	r3, [r3, #0]
200009a6:	691a      	ldr	r2, [r3, #16]
200009a8:	240c      	movs	r4, #12
200009aa:	193b      	adds	r3, r7, r4
200009ac:	801a      	strh	r2, [r3, #0]
				the_y_speed_bird = bird->diry;
200009ae:	4b7a      	ldr	r3, [pc, #488]	; (20000b98 <main+0x33a>)
200009b0:	681b      	ldr	r3, [r3, #0]
200009b2:	689a      	ldr	r2, [r3, #8]
200009b4:	250a      	movs	r5, #10
200009b6:	197b      	adds	r3, r7, r5
200009b8:	801a      	strh	r2, [r3, #0]
				clear_object(bird);
200009ba:	4b77      	ldr	r3, [pc, #476]	; (20000b98 <main+0x33a>)
200009bc:	681b      	ldr	r3, [r3, #0]
200009be:	0018      	movs	r0, r3
200009c0:	f7ff fe65 	bl	2000068e <clear_object>
				bird = &bird_flap_obj;
200009c4:	4b74      	ldr	r3, [pc, #464]	; (20000b98 <main+0x33a>)
200009c6:	4a79      	ldr	r2, [pc, #484]	; (20000bac <main+0x34e>)
200009c8:	601a      	str	r2, [r3, #0]
				bird->posy = the_y_pos_bird; 
200009ca:	4b73      	ldr	r3, [pc, #460]	; (20000b98 <main+0x33a>)
200009cc:	681b      	ldr	r3, [r3, #0]
200009ce:	193a      	adds	r2, r7, r4
200009d0:	2100      	movs	r1, #0
200009d2:	5e52      	ldrsh	r2, [r2, r1]
200009d4:	611a      	str	r2, [r3, #16]
				bird->diry = the_y_speed_bird; 
200009d6:	4b70      	ldr	r3, [pc, #448]	; (20000b98 <main+0x33a>)
200009d8:	681b      	ldr	r3, [r3, #0]
200009da:	197a      	adds	r2, r7, r5
200009dc:	2100      	movs	r1, #0
200009de:	5e52      	ldrsh	r2, [r2, r1]
200009e0:	609a      	str	r2, [r3, #8]
				bird->diry = -4; 
200009e2:	4b6d      	ldr	r3, [pc, #436]	; (20000b98 <main+0x33a>)
200009e4:	681b      	ldr	r3, [r3, #0]
200009e6:	2204      	movs	r2, #4
200009e8:	4252      	negs	r2, r2
200009ea:	609a      	str	r2, [r3, #8]
				bird->move(bird);
200009ec:	4b6a      	ldr	r3, [pc, #424]	; (20000b98 <main+0x33a>)
200009ee:	681b      	ldr	r3, [r3, #0]
200009f0:	69da      	ldr	r2, [r3, #28]
200009f2:	4b69      	ldr	r3, [pc, #420]	; (20000b98 <main+0x33a>)
200009f4:	681b      	ldr	r3, [r3, #0]
200009f6:	0018      	movs	r0, r3
200009f8:	4790      	blx	r2
				delay_milli(50000);
200009fa:	4b6f      	ldr	r3, [pc, #444]	; (20000bb8 <main+0x35a>)
200009fc:	0018      	movs	r0, r3
200009fe:	f7ff fd8c 	bl	2000051a <delay_milli>
	
			} 
			if(bird->diry < 0){
20000a02:	4b65      	ldr	r3, [pc, #404]	; (20000b98 <main+0x33a>)
20000a04:	681b      	ldr	r3, [r3, #0]
20000a06:	689b      	ldr	r3, [r3, #8]
20000a08:	2b00      	cmp	r3, #0
20000a0a:	da07      	bge.n	20000a1c <main+0x1be>
				bird->diry += 2;
20000a0c:	4b62      	ldr	r3, [pc, #392]	; (20000b98 <main+0x33a>)
20000a0e:	681b      	ldr	r3, [r3, #0]
20000a10:	689a      	ldr	r2, [r3, #8]
20000a12:	4b61      	ldr	r3, [pc, #388]	; (20000b98 <main+0x33a>)
20000a14:	681b      	ldr	r3, [r3, #0]
20000a16:	3202      	adds	r2, #2
20000a18:	609a      	str	r2, [r3, #8]
20000a1a:	e00b      	b.n	20000a34 <main+0x1d6>
			}
			else if (bird->diry < 5){
20000a1c:	4b5e      	ldr	r3, [pc, #376]	; (20000b98 <main+0x33a>)
20000a1e:	681b      	ldr	r3, [r3, #0]
20000a20:	689b      	ldr	r3, [r3, #8]
20000a22:	2b04      	cmp	r3, #4
20000a24:	dc06      	bgt.n	20000a34 <main+0x1d6>
				bird->diry +=3;
20000a26:	4b5c      	ldr	r3, [pc, #368]	; (20000b98 <main+0x33a>)
20000a28:	681b      	ldr	r3, [r3, #0]
20000a2a:	689a      	ldr	r2, [r3, #8]
20000a2c:	4b5a      	ldr	r3, [pc, #360]	; (20000b98 <main+0x33a>)
20000a2e:	681b      	ldr	r3, [r3, #0]
20000a30:	3203      	adds	r2, #3
20000a32:	609a      	str	r2, [r3, #8]
			}
		
			if(bird->diry >= 0){
20000a34:	4b58      	ldr	r3, [pc, #352]	; (20000b98 <main+0x33a>)
20000a36:	681b      	ldr	r3, [r3, #0]
20000a38:	689b      	ldr	r3, [r3, #8]
20000a3a:	2b00      	cmp	r3, #0
20000a3c:	db1f      	blt.n	20000a7e <main+0x220>
				the_y_pos_bird = bird->posy;
20000a3e:	4b56      	ldr	r3, [pc, #344]	; (20000b98 <main+0x33a>)
20000a40:	681b      	ldr	r3, [r3, #0]
20000a42:	691a      	ldr	r2, [r3, #16]
20000a44:	240c      	movs	r4, #12
20000a46:	193b      	adds	r3, r7, r4
20000a48:	801a      	strh	r2, [r3, #0]
				the_y_speed_bird = bird->diry;
20000a4a:	4b53      	ldr	r3, [pc, #332]	; (20000b98 <main+0x33a>)
20000a4c:	681b      	ldr	r3, [r3, #0]
20000a4e:	689a      	ldr	r2, [r3, #8]
20000a50:	250a      	movs	r5, #10
20000a52:	197b      	adds	r3, r7, r5
20000a54:	801a      	strh	r2, [r3, #0]
				clear_object(bird);
20000a56:	4b50      	ldr	r3, [pc, #320]	; (20000b98 <main+0x33a>)
20000a58:	681b      	ldr	r3, [r3, #0]
20000a5a:	0018      	movs	r0, r3
20000a5c:	f7ff fe17 	bl	2000068e <clear_object>
				bird = &bird_soar_obj;
20000a60:	4b4d      	ldr	r3, [pc, #308]	; (20000b98 <main+0x33a>)
20000a62:	4a53      	ldr	r2, [pc, #332]	; (20000bb0 <main+0x352>)
20000a64:	601a      	str	r2, [r3, #0]
				bird->posy = the_y_pos_bird;
20000a66:	4b4c      	ldr	r3, [pc, #304]	; (20000b98 <main+0x33a>)
20000a68:	681b      	ldr	r3, [r3, #0]
20000a6a:	193a      	adds	r2, r7, r4
20000a6c:	2100      	movs	r1, #0
20000a6e:	5e52      	ldrsh	r2, [r2, r1]
20000a70:	611a      	str	r2, [r3, #16]
				bird->diry = the_y_speed_bird;
20000a72:	4b49      	ldr	r3, [pc, #292]	; (20000b98 <main+0x33a>)
20000a74:	681b      	ldr	r3, [r3, #0]
20000a76:	197a      	adds	r2, r7, r5
20000a78:	2100      	movs	r1, #0
20000a7a:	5e52      	ldrsh	r2, [r2, r1]
20000a7c:	609a      	str	r2, [r3, #8]
			}
			
			bird->move(bird);
20000a7e:	4b46      	ldr	r3, [pc, #280]	; (20000b98 <main+0x33a>)
20000a80:	681b      	ldr	r3, [r3, #0]
20000a82:	69da      	ldr	r2, [r3, #28]
20000a84:	4b44      	ldr	r3, [pc, #272]	; (20000b98 <main+0x33a>)
20000a86:	681b      	ldr	r3, [r3, #0]
20000a88:	0018      	movs	r0, r3
20000a8a:	4790      	blx	r2
			delay_milli(50000);
20000a8c:	4b4a      	ldr	r3, [pc, #296]	; (20000bb8 <main+0x35a>)
20000a8e:	0018      	movs	r0, r3
20000a90:	f7ff fd43 	bl	2000051a <delay_milli>
		
			if (objects_overlap(bird, obstacle_top_1, obstacle_bottom_1,obstacle_top_2, obstacle_bottom_2)){
20000a94:	4b40      	ldr	r3, [pc, #256]	; (20000b98 <main+0x33a>)
20000a96:	6818      	ldr	r0, [r3, #0]
20000a98:	4b40      	ldr	r3, [pc, #256]	; (20000b9c <main+0x33e>)
20000a9a:	6819      	ldr	r1, [r3, #0]
20000a9c:	4b40      	ldr	r3, [pc, #256]	; (20000ba0 <main+0x342>)
20000a9e:	681a      	ldr	r2, [r3, #0]
20000aa0:	4b40      	ldr	r3, [pc, #256]	; (20000ba4 <main+0x346>)
20000aa2:	681c      	ldr	r4, [r3, #0]
20000aa4:	4b40      	ldr	r3, [pc, #256]	; (20000ba8 <main+0x34a>)
20000aa6:	681b      	ldr	r3, [r3, #0]
20000aa8:	9300      	str	r3, [sp, #0]
20000aaa:	0023      	movs	r3, r4
20000aac:	f7ff fd55 	bl	2000055a <objects_overlap>
20000ab0:	1e03      	subs	r3, r0, #0
20000ab2:	d16c      	bne.n	20000b8e <main+0x330>
				break;
			}
			
			if(obstacle_top_1->posx + obstacle_top_1->geo->sizex <= 0){
20000ab4:	4b39      	ldr	r3, [pc, #228]	; (20000b9c <main+0x33e>)
20000ab6:	681b      	ldr	r3, [r3, #0]
20000ab8:	68da      	ldr	r2, [r3, #12]
20000aba:	4b38      	ldr	r3, [pc, #224]	; (20000b9c <main+0x33e>)
20000abc:	681b      	ldr	r3, [r3, #0]
20000abe:	681b      	ldr	r3, [r3, #0]
20000ac0:	685b      	ldr	r3, [r3, #4]
20000ac2:	18d3      	adds	r3, r2, r3
20000ac4:	2b00      	cmp	r3, #0
20000ac6:	dc2c      	bgt.n	20000b22 <main+0x2c4>
				++points;
20000ac8:	693b      	ldr	r3, [r7, #16]
20000aca:	3301      	adds	r3, #1
20000acc:	613b      	str	r3, [r7, #16]
				random = (char) *TIM6_CNT;
20000ace:	4b3b      	ldr	r3, [pc, #236]	; (20000bbc <main+0x35e>)
20000ad0:	881b      	ldrh	r3, [r3, #0]
20000ad2:	b29b      	uxth	r3, r3
20000ad4:	b2da      	uxtb	r2, r3
20000ad6:	250e      	movs	r5, #14
20000ad8:	197b      	adds	r3, r7, r5
20000ada:	801a      	strh	r2, [r3, #0]
				random %= 14;
20000adc:	197c      	adds	r4, r7, r5
20000ade:	197b      	adds	r3, r7, r5
20000ae0:	2200      	movs	r2, #0
20000ae2:	5e9b      	ldrsh	r3, [r3, r2]
20000ae4:	210e      	movs	r1, #14
20000ae6:	0018      	movs	r0, r3
20000ae8:	f000 f9da 	bl	20000ea0 <__aeabi_idivmod>
20000aec:	000b      	movs	r3, r1
20000aee:	8023      	strh	r3, [r4, #0]
				obstacle_top_1->posx = 128;
20000af0:	4b2a      	ldr	r3, [pc, #168]	; (20000b9c <main+0x33e>)
20000af2:	681b      	ldr	r3, [r3, #0]
20000af4:	2280      	movs	r2, #128	; 0x80
20000af6:	60da      	str	r2, [r3, #12]
				obstacle_bottom_1->posx = 128;
20000af8:	4b29      	ldr	r3, [pc, #164]	; (20000ba0 <main+0x342>)
20000afa:	681b      	ldr	r3, [r3, #0]
20000afc:	2280      	movs	r2, #128	; 0x80
20000afe:	60da      	str	r2, [r3, #12]
				obstacle_top_1->posy = -29 - random;
20000b00:	197b      	adds	r3, r7, r5
20000b02:	2200      	movs	r2, #0
20000b04:	5e9a      	ldrsh	r2, [r3, r2]
20000b06:	4b25      	ldr	r3, [pc, #148]	; (20000b9c <main+0x33e>)
20000b08:	681b      	ldr	r3, [r3, #0]
20000b0a:	211d      	movs	r1, #29
20000b0c:	4249      	negs	r1, r1
20000b0e:	1a8a      	subs	r2, r1, r2
20000b10:	611a      	str	r2, [r3, #16]
				obstacle_bottom_1->posy = 43 - random;
20000b12:	197b      	adds	r3, r7, r5
20000b14:	2200      	movs	r2, #0
20000b16:	5e9a      	ldrsh	r2, [r3, r2]
20000b18:	4b21      	ldr	r3, [pc, #132]	; (20000ba0 <main+0x342>)
20000b1a:	681b      	ldr	r3, [r3, #0]
20000b1c:	212b      	movs	r1, #43	; 0x2b
20000b1e:	1a8a      	subs	r2, r1, r2
20000b20:	611a      	str	r2, [r3, #16]
			}
		
			if(obstacle_top_2->posx + obstacle_top_2->geo->sizex <= 0){
20000b22:	4b20      	ldr	r3, [pc, #128]	; (20000ba4 <main+0x346>)
20000b24:	681b      	ldr	r3, [r3, #0]
20000b26:	68da      	ldr	r2, [r3, #12]
20000b28:	4b1e      	ldr	r3, [pc, #120]	; (20000ba4 <main+0x346>)
20000b2a:	681b      	ldr	r3, [r3, #0]
20000b2c:	681b      	ldr	r3, [r3, #0]
20000b2e:	685b      	ldr	r3, [r3, #4]
20000b30:	18d3      	adds	r3, r2, r3
20000b32:	2b00      	cmp	r3, #0
20000b34:	dd00      	ble.n	20000b38 <main+0x2da>
20000b36:	e71a      	b.n	2000096e <main+0x110>
				++points;
20000b38:	693b      	ldr	r3, [r7, #16]
20000b3a:	3301      	adds	r3, #1
20000b3c:	613b      	str	r3, [r7, #16]
				random = (char) *TIM6_CNT; 
20000b3e:	4b1f      	ldr	r3, [pc, #124]	; (20000bbc <main+0x35e>)
20000b40:	881b      	ldrh	r3, [r3, #0]
20000b42:	b29b      	uxth	r3, r3
20000b44:	b2da      	uxtb	r2, r3
20000b46:	250e      	movs	r5, #14
20000b48:	197b      	adds	r3, r7, r5
20000b4a:	801a      	strh	r2, [r3, #0]
				random %= 14;
20000b4c:	197c      	adds	r4, r7, r5
20000b4e:	197b      	adds	r3, r7, r5
20000b50:	2200      	movs	r2, #0
20000b52:	5e9b      	ldrsh	r3, [r3, r2]
20000b54:	210e      	movs	r1, #14
20000b56:	0018      	movs	r0, r3
20000b58:	f000 f9a2 	bl	20000ea0 <__aeabi_idivmod>
20000b5c:	000b      	movs	r3, r1
20000b5e:	8023      	strh	r3, [r4, #0]
				obstacle_top_2->posx = 128;
20000b60:	4b10      	ldr	r3, [pc, #64]	; (20000ba4 <main+0x346>)
20000b62:	681b      	ldr	r3, [r3, #0]
20000b64:	2280      	movs	r2, #128	; 0x80
20000b66:	60da      	str	r2, [r3, #12]
				obstacle_bottom_2->posx = 128;
20000b68:	4b0f      	ldr	r3, [pc, #60]	; (20000ba8 <main+0x34a>)
20000b6a:	681b      	ldr	r3, [r3, #0]
20000b6c:	2280      	movs	r2, #128	; 0x80
20000b6e:	60da      	str	r2, [r3, #12]
				obstacle_top_2->posy = -29 + random;
20000b70:	197b      	adds	r3, r7, r5
20000b72:	2200      	movs	r2, #0
20000b74:	5e9a      	ldrsh	r2, [r3, r2]
20000b76:	4b0b      	ldr	r3, [pc, #44]	; (20000ba4 <main+0x346>)
20000b78:	681b      	ldr	r3, [r3, #0]
20000b7a:	3a1d      	subs	r2, #29
20000b7c:	611a      	str	r2, [r3, #16]
				obstacle_bottom_2->posy = 43 + random;
20000b7e:	197b      	adds	r3, r7, r5
20000b80:	2200      	movs	r2, #0
20000b82:	5e9a      	ldrsh	r2, [r3, r2]
20000b84:	4b08      	ldr	r3, [pc, #32]	; (20000ba8 <main+0x34a>)
20000b86:	681b      	ldr	r3, [r3, #0]
20000b88:	322b      	adds	r2, #43	; 0x2b
20000b8a:	611a      	str	r2, [r3, #16]
			bird->move(bird);
20000b8c:	e6ef      	b.n	2000096e <main+0x110>
				break;
20000b8e:	46c0      	nop			; (mov r8, r8)
		points = 0; 
20000b90:	e6a9      	b.n	200008e6 <main+0x88>
20000b92:	46c0      	nop			; (mov r8, r8)
20000b94:	20001de4 	andcs	r1, r0, r4, ror #27
20000b98:	20001d94 	mulcs	r0, r4, sp
20000b9c:	20001d98 	mulcs	r0, r8, sp
20000ba0:	20001d9c 	mulcs	r0, ip, sp
20000ba4:	20001da0 	andcs	r1, r0, r0, lsr #27
20000ba8:	20001da4 	andcs	r1, r0, r4, lsr #27
20000bac:	20001d70 	andcs	r1, r0, r0, ror sp
20000bb0:	20001d4c 	andcs	r1, r0, ip, asr #26
20000bb4:	20001da8 	andcs	r1, r0, r8, lsr #27
20000bb8:	0000c350 	andeq	ip, r0, r0, asr r3
20000bbc:	40001024 	andmi	r1, r0, r4, lsr #32

20000bc0 <__udivsi3>:
20000bc0:	2200      	movs	r2, #0
20000bc2:	0843      	lsrs	r3, r0, #1
20000bc4:	428b      	cmp	r3, r1
20000bc6:	d374      	bcc.n	20000cb2 <__udivsi3+0xf2>
20000bc8:	0903      	lsrs	r3, r0, #4
20000bca:	428b      	cmp	r3, r1
20000bcc:	d35f      	bcc.n	20000c8e <__udivsi3+0xce>
20000bce:	0a03      	lsrs	r3, r0, #8
20000bd0:	428b      	cmp	r3, r1
20000bd2:	d344      	bcc.n	20000c5e <__udivsi3+0x9e>
20000bd4:	0b03      	lsrs	r3, r0, #12
20000bd6:	428b      	cmp	r3, r1
20000bd8:	d328      	bcc.n	20000c2c <__udivsi3+0x6c>
20000bda:	0c03      	lsrs	r3, r0, #16
20000bdc:	428b      	cmp	r3, r1
20000bde:	d30d      	bcc.n	20000bfc <__udivsi3+0x3c>
20000be0:	22ff      	movs	r2, #255	; 0xff
20000be2:	0209      	lsls	r1, r1, #8
20000be4:	ba12      	rev	r2, r2
20000be6:	0c03      	lsrs	r3, r0, #16
20000be8:	428b      	cmp	r3, r1
20000bea:	d302      	bcc.n	20000bf2 <__udivsi3+0x32>
20000bec:	1212      	asrs	r2, r2, #8
20000bee:	0209      	lsls	r1, r1, #8
20000bf0:	d065      	beq.n	20000cbe <__udivsi3+0xfe>
20000bf2:	0b03      	lsrs	r3, r0, #12
20000bf4:	428b      	cmp	r3, r1
20000bf6:	d319      	bcc.n	20000c2c <__udivsi3+0x6c>
20000bf8:	e000      	b.n	20000bfc <__udivsi3+0x3c>
20000bfa:	0a09      	lsrs	r1, r1, #8
20000bfc:	0bc3      	lsrs	r3, r0, #15
20000bfe:	428b      	cmp	r3, r1
20000c00:	d301      	bcc.n	20000c06 <__udivsi3+0x46>
20000c02:	03cb      	lsls	r3, r1, #15
20000c04:	1ac0      	subs	r0, r0, r3
20000c06:	4152      	adcs	r2, r2
20000c08:	0b83      	lsrs	r3, r0, #14
20000c0a:	428b      	cmp	r3, r1
20000c0c:	d301      	bcc.n	20000c12 <__udivsi3+0x52>
20000c0e:	038b      	lsls	r3, r1, #14
20000c10:	1ac0      	subs	r0, r0, r3
20000c12:	4152      	adcs	r2, r2
20000c14:	0b43      	lsrs	r3, r0, #13
20000c16:	428b      	cmp	r3, r1
20000c18:	d301      	bcc.n	20000c1e <__udivsi3+0x5e>
20000c1a:	034b      	lsls	r3, r1, #13
20000c1c:	1ac0      	subs	r0, r0, r3
20000c1e:	4152      	adcs	r2, r2
20000c20:	0b03      	lsrs	r3, r0, #12
20000c22:	428b      	cmp	r3, r1
20000c24:	d301      	bcc.n	20000c2a <__udivsi3+0x6a>
20000c26:	030b      	lsls	r3, r1, #12
20000c28:	1ac0      	subs	r0, r0, r3
20000c2a:	4152      	adcs	r2, r2
20000c2c:	0ac3      	lsrs	r3, r0, #11
20000c2e:	428b      	cmp	r3, r1
20000c30:	d301      	bcc.n	20000c36 <__udivsi3+0x76>
20000c32:	02cb      	lsls	r3, r1, #11
20000c34:	1ac0      	subs	r0, r0, r3
20000c36:	4152      	adcs	r2, r2
20000c38:	0a83      	lsrs	r3, r0, #10
20000c3a:	428b      	cmp	r3, r1
20000c3c:	d301      	bcc.n	20000c42 <__udivsi3+0x82>
20000c3e:	028b      	lsls	r3, r1, #10
20000c40:	1ac0      	subs	r0, r0, r3
20000c42:	4152      	adcs	r2, r2
20000c44:	0a43      	lsrs	r3, r0, #9
20000c46:	428b      	cmp	r3, r1
20000c48:	d301      	bcc.n	20000c4e <__udivsi3+0x8e>
20000c4a:	024b      	lsls	r3, r1, #9
20000c4c:	1ac0      	subs	r0, r0, r3
20000c4e:	4152      	adcs	r2, r2
20000c50:	0a03      	lsrs	r3, r0, #8
20000c52:	428b      	cmp	r3, r1
20000c54:	d301      	bcc.n	20000c5a <__udivsi3+0x9a>
20000c56:	020b      	lsls	r3, r1, #8
20000c58:	1ac0      	subs	r0, r0, r3
20000c5a:	4152      	adcs	r2, r2
20000c5c:	d2cd      	bcs.n	20000bfa <__udivsi3+0x3a>
20000c5e:	09c3      	lsrs	r3, r0, #7
20000c60:	428b      	cmp	r3, r1
20000c62:	d301      	bcc.n	20000c68 <__udivsi3+0xa8>
20000c64:	01cb      	lsls	r3, r1, #7
20000c66:	1ac0      	subs	r0, r0, r3
20000c68:	4152      	adcs	r2, r2
20000c6a:	0983      	lsrs	r3, r0, #6
20000c6c:	428b      	cmp	r3, r1
20000c6e:	d301      	bcc.n	20000c74 <__udivsi3+0xb4>
20000c70:	018b      	lsls	r3, r1, #6
20000c72:	1ac0      	subs	r0, r0, r3
20000c74:	4152      	adcs	r2, r2
20000c76:	0943      	lsrs	r3, r0, #5
20000c78:	428b      	cmp	r3, r1
20000c7a:	d301      	bcc.n	20000c80 <__udivsi3+0xc0>
20000c7c:	014b      	lsls	r3, r1, #5
20000c7e:	1ac0      	subs	r0, r0, r3
20000c80:	4152      	adcs	r2, r2
20000c82:	0903      	lsrs	r3, r0, #4
20000c84:	428b      	cmp	r3, r1
20000c86:	d301      	bcc.n	20000c8c <__udivsi3+0xcc>
20000c88:	010b      	lsls	r3, r1, #4
20000c8a:	1ac0      	subs	r0, r0, r3
20000c8c:	4152      	adcs	r2, r2
20000c8e:	08c3      	lsrs	r3, r0, #3
20000c90:	428b      	cmp	r3, r1
20000c92:	d301      	bcc.n	20000c98 <__udivsi3+0xd8>
20000c94:	00cb      	lsls	r3, r1, #3
20000c96:	1ac0      	subs	r0, r0, r3
20000c98:	4152      	adcs	r2, r2
20000c9a:	0883      	lsrs	r3, r0, #2
20000c9c:	428b      	cmp	r3, r1
20000c9e:	d301      	bcc.n	20000ca4 <__udivsi3+0xe4>
20000ca0:	008b      	lsls	r3, r1, #2
20000ca2:	1ac0      	subs	r0, r0, r3
20000ca4:	4152      	adcs	r2, r2
20000ca6:	0843      	lsrs	r3, r0, #1
20000ca8:	428b      	cmp	r3, r1
20000caa:	d301      	bcc.n	20000cb0 <__udivsi3+0xf0>
20000cac:	004b      	lsls	r3, r1, #1
20000cae:	1ac0      	subs	r0, r0, r3
20000cb0:	4152      	adcs	r2, r2
20000cb2:	1a41      	subs	r1, r0, r1
20000cb4:	d200      	bcs.n	20000cb8 <__udivsi3+0xf8>
20000cb6:	4601      	mov	r1, r0
20000cb8:	4152      	adcs	r2, r2
20000cba:	4610      	mov	r0, r2
20000cbc:	4770      	bx	lr
20000cbe:	e7ff      	b.n	20000cc0 <__udivsi3+0x100>
20000cc0:	b501      	push	{r0, lr}
20000cc2:	2000      	movs	r0, #0
20000cc4:	f000 f8f0 	bl	20000ea8 <__aeabi_idiv0>
20000cc8:	bd02      	pop	{r1, pc}
20000cca:	46c0      	nop			; (mov r8, r8)

20000ccc <__aeabi_uidivmod>:
20000ccc:	2900      	cmp	r1, #0
20000cce:	d0f7      	beq.n	20000cc0 <__udivsi3+0x100>
20000cd0:	e776      	b.n	20000bc0 <__udivsi3>
20000cd2:	4770      	bx	lr

20000cd4 <__divsi3>:
20000cd4:	4603      	mov	r3, r0
20000cd6:	430b      	orrs	r3, r1
20000cd8:	d47f      	bmi.n	20000dda <__divsi3+0x106>
20000cda:	2200      	movs	r2, #0
20000cdc:	0843      	lsrs	r3, r0, #1
20000cde:	428b      	cmp	r3, r1
20000ce0:	d374      	bcc.n	20000dcc <__divsi3+0xf8>
20000ce2:	0903      	lsrs	r3, r0, #4
20000ce4:	428b      	cmp	r3, r1
20000ce6:	d35f      	bcc.n	20000da8 <__divsi3+0xd4>
20000ce8:	0a03      	lsrs	r3, r0, #8
20000cea:	428b      	cmp	r3, r1
20000cec:	d344      	bcc.n	20000d78 <__divsi3+0xa4>
20000cee:	0b03      	lsrs	r3, r0, #12
20000cf0:	428b      	cmp	r3, r1
20000cf2:	d328      	bcc.n	20000d46 <__divsi3+0x72>
20000cf4:	0c03      	lsrs	r3, r0, #16
20000cf6:	428b      	cmp	r3, r1
20000cf8:	d30d      	bcc.n	20000d16 <__divsi3+0x42>
20000cfa:	22ff      	movs	r2, #255	; 0xff
20000cfc:	0209      	lsls	r1, r1, #8
20000cfe:	ba12      	rev	r2, r2
20000d00:	0c03      	lsrs	r3, r0, #16
20000d02:	428b      	cmp	r3, r1
20000d04:	d302      	bcc.n	20000d0c <__divsi3+0x38>
20000d06:	1212      	asrs	r2, r2, #8
20000d08:	0209      	lsls	r1, r1, #8
20000d0a:	d065      	beq.n	20000dd8 <__divsi3+0x104>
20000d0c:	0b03      	lsrs	r3, r0, #12
20000d0e:	428b      	cmp	r3, r1
20000d10:	d319      	bcc.n	20000d46 <__divsi3+0x72>
20000d12:	e000      	b.n	20000d16 <__divsi3+0x42>
20000d14:	0a09      	lsrs	r1, r1, #8
20000d16:	0bc3      	lsrs	r3, r0, #15
20000d18:	428b      	cmp	r3, r1
20000d1a:	d301      	bcc.n	20000d20 <__divsi3+0x4c>
20000d1c:	03cb      	lsls	r3, r1, #15
20000d1e:	1ac0      	subs	r0, r0, r3
20000d20:	4152      	adcs	r2, r2
20000d22:	0b83      	lsrs	r3, r0, #14
20000d24:	428b      	cmp	r3, r1
20000d26:	d301      	bcc.n	20000d2c <__divsi3+0x58>
20000d28:	038b      	lsls	r3, r1, #14
20000d2a:	1ac0      	subs	r0, r0, r3
20000d2c:	4152      	adcs	r2, r2
20000d2e:	0b43      	lsrs	r3, r0, #13
20000d30:	428b      	cmp	r3, r1
20000d32:	d301      	bcc.n	20000d38 <__divsi3+0x64>
20000d34:	034b      	lsls	r3, r1, #13
20000d36:	1ac0      	subs	r0, r0, r3
20000d38:	4152      	adcs	r2, r2
20000d3a:	0b03      	lsrs	r3, r0, #12
20000d3c:	428b      	cmp	r3, r1
20000d3e:	d301      	bcc.n	20000d44 <__divsi3+0x70>
20000d40:	030b      	lsls	r3, r1, #12
20000d42:	1ac0      	subs	r0, r0, r3
20000d44:	4152      	adcs	r2, r2
20000d46:	0ac3      	lsrs	r3, r0, #11
20000d48:	428b      	cmp	r3, r1
20000d4a:	d301      	bcc.n	20000d50 <__divsi3+0x7c>
20000d4c:	02cb      	lsls	r3, r1, #11
20000d4e:	1ac0      	subs	r0, r0, r3
20000d50:	4152      	adcs	r2, r2
20000d52:	0a83      	lsrs	r3, r0, #10
20000d54:	428b      	cmp	r3, r1
20000d56:	d301      	bcc.n	20000d5c <__divsi3+0x88>
20000d58:	028b      	lsls	r3, r1, #10
20000d5a:	1ac0      	subs	r0, r0, r3
20000d5c:	4152      	adcs	r2, r2
20000d5e:	0a43      	lsrs	r3, r0, #9
20000d60:	428b      	cmp	r3, r1
20000d62:	d301      	bcc.n	20000d68 <__divsi3+0x94>
20000d64:	024b      	lsls	r3, r1, #9
20000d66:	1ac0      	subs	r0, r0, r3
20000d68:	4152      	adcs	r2, r2
20000d6a:	0a03      	lsrs	r3, r0, #8
20000d6c:	428b      	cmp	r3, r1
20000d6e:	d301      	bcc.n	20000d74 <__divsi3+0xa0>
20000d70:	020b      	lsls	r3, r1, #8
20000d72:	1ac0      	subs	r0, r0, r3
20000d74:	4152      	adcs	r2, r2
20000d76:	d2cd      	bcs.n	20000d14 <__divsi3+0x40>
20000d78:	09c3      	lsrs	r3, r0, #7
20000d7a:	428b      	cmp	r3, r1
20000d7c:	d301      	bcc.n	20000d82 <__divsi3+0xae>
20000d7e:	01cb      	lsls	r3, r1, #7
20000d80:	1ac0      	subs	r0, r0, r3
20000d82:	4152      	adcs	r2, r2
20000d84:	0983      	lsrs	r3, r0, #6
20000d86:	428b      	cmp	r3, r1
20000d88:	d301      	bcc.n	20000d8e <__divsi3+0xba>
20000d8a:	018b      	lsls	r3, r1, #6
20000d8c:	1ac0      	subs	r0, r0, r3
20000d8e:	4152      	adcs	r2, r2
20000d90:	0943      	lsrs	r3, r0, #5
20000d92:	428b      	cmp	r3, r1
20000d94:	d301      	bcc.n	20000d9a <__divsi3+0xc6>
20000d96:	014b      	lsls	r3, r1, #5
20000d98:	1ac0      	subs	r0, r0, r3
20000d9a:	4152      	adcs	r2, r2
20000d9c:	0903      	lsrs	r3, r0, #4
20000d9e:	428b      	cmp	r3, r1
20000da0:	d301      	bcc.n	20000da6 <__divsi3+0xd2>
20000da2:	010b      	lsls	r3, r1, #4
20000da4:	1ac0      	subs	r0, r0, r3
20000da6:	4152      	adcs	r2, r2
20000da8:	08c3      	lsrs	r3, r0, #3
20000daa:	428b      	cmp	r3, r1
20000dac:	d301      	bcc.n	20000db2 <__divsi3+0xde>
20000dae:	00cb      	lsls	r3, r1, #3
20000db0:	1ac0      	subs	r0, r0, r3
20000db2:	4152      	adcs	r2, r2
20000db4:	0883      	lsrs	r3, r0, #2
20000db6:	428b      	cmp	r3, r1
20000db8:	d301      	bcc.n	20000dbe <__divsi3+0xea>
20000dba:	008b      	lsls	r3, r1, #2
20000dbc:	1ac0      	subs	r0, r0, r3
20000dbe:	4152      	adcs	r2, r2
20000dc0:	0843      	lsrs	r3, r0, #1
20000dc2:	428b      	cmp	r3, r1
20000dc4:	d301      	bcc.n	20000dca <__divsi3+0xf6>
20000dc6:	004b      	lsls	r3, r1, #1
20000dc8:	1ac0      	subs	r0, r0, r3
20000dca:	4152      	adcs	r2, r2
20000dcc:	1a41      	subs	r1, r0, r1
20000dce:	d200      	bcs.n	20000dd2 <__divsi3+0xfe>
20000dd0:	4601      	mov	r1, r0
20000dd2:	4152      	adcs	r2, r2
20000dd4:	4610      	mov	r0, r2
20000dd6:	4770      	bx	lr
20000dd8:	e05d      	b.n	20000e96 <__divsi3+0x1c2>
20000dda:	0fca      	lsrs	r2, r1, #31
20000ddc:	d000      	beq.n	20000de0 <__divsi3+0x10c>
20000dde:	4249      	negs	r1, r1
20000de0:	1003      	asrs	r3, r0, #32
20000de2:	d300      	bcc.n	20000de6 <__divsi3+0x112>
20000de4:	4240      	negs	r0, r0
20000de6:	4053      	eors	r3, r2
20000de8:	2200      	movs	r2, #0
20000dea:	469c      	mov	ip, r3
20000dec:	0903      	lsrs	r3, r0, #4
20000dee:	428b      	cmp	r3, r1
20000df0:	d32d      	bcc.n	20000e4e <__divsi3+0x17a>
20000df2:	0a03      	lsrs	r3, r0, #8
20000df4:	428b      	cmp	r3, r1
20000df6:	d312      	bcc.n	20000e1e <__divsi3+0x14a>
20000df8:	22fc      	movs	r2, #252	; 0xfc
20000dfa:	0189      	lsls	r1, r1, #6
20000dfc:	ba12      	rev	r2, r2
20000dfe:	0a03      	lsrs	r3, r0, #8
20000e00:	428b      	cmp	r3, r1
20000e02:	d30c      	bcc.n	20000e1e <__divsi3+0x14a>
20000e04:	0189      	lsls	r1, r1, #6
20000e06:	1192      	asrs	r2, r2, #6
20000e08:	428b      	cmp	r3, r1
20000e0a:	d308      	bcc.n	20000e1e <__divsi3+0x14a>
20000e0c:	0189      	lsls	r1, r1, #6
20000e0e:	1192      	asrs	r2, r2, #6
20000e10:	428b      	cmp	r3, r1
20000e12:	d304      	bcc.n	20000e1e <__divsi3+0x14a>
20000e14:	0189      	lsls	r1, r1, #6
20000e16:	d03a      	beq.n	20000e8e <__divsi3+0x1ba>
20000e18:	1192      	asrs	r2, r2, #6
20000e1a:	e000      	b.n	20000e1e <__divsi3+0x14a>
20000e1c:	0989      	lsrs	r1, r1, #6
20000e1e:	09c3      	lsrs	r3, r0, #7
20000e20:	428b      	cmp	r3, r1
20000e22:	d301      	bcc.n	20000e28 <__divsi3+0x154>
20000e24:	01cb      	lsls	r3, r1, #7
20000e26:	1ac0      	subs	r0, r0, r3
20000e28:	4152      	adcs	r2, r2
20000e2a:	0983      	lsrs	r3, r0, #6
20000e2c:	428b      	cmp	r3, r1
20000e2e:	d301      	bcc.n	20000e34 <__divsi3+0x160>
20000e30:	018b      	lsls	r3, r1, #6
20000e32:	1ac0      	subs	r0, r0, r3
20000e34:	4152      	adcs	r2, r2
20000e36:	0943      	lsrs	r3, r0, #5
20000e38:	428b      	cmp	r3, r1
20000e3a:	d301      	bcc.n	20000e40 <__divsi3+0x16c>
20000e3c:	014b      	lsls	r3, r1, #5
20000e3e:	1ac0      	subs	r0, r0, r3
20000e40:	4152      	adcs	r2, r2
20000e42:	0903      	lsrs	r3, r0, #4
20000e44:	428b      	cmp	r3, r1
20000e46:	d301      	bcc.n	20000e4c <__divsi3+0x178>
20000e48:	010b      	lsls	r3, r1, #4
20000e4a:	1ac0      	subs	r0, r0, r3
20000e4c:	4152      	adcs	r2, r2
20000e4e:	08c3      	lsrs	r3, r0, #3
20000e50:	428b      	cmp	r3, r1
20000e52:	d301      	bcc.n	20000e58 <__divsi3+0x184>
20000e54:	00cb      	lsls	r3, r1, #3
20000e56:	1ac0      	subs	r0, r0, r3
20000e58:	4152      	adcs	r2, r2
20000e5a:	0883      	lsrs	r3, r0, #2
20000e5c:	428b      	cmp	r3, r1
20000e5e:	d301      	bcc.n	20000e64 <__divsi3+0x190>
20000e60:	008b      	lsls	r3, r1, #2
20000e62:	1ac0      	subs	r0, r0, r3
20000e64:	4152      	adcs	r2, r2
20000e66:	d2d9      	bcs.n	20000e1c <__divsi3+0x148>
20000e68:	0843      	lsrs	r3, r0, #1
20000e6a:	428b      	cmp	r3, r1
20000e6c:	d301      	bcc.n	20000e72 <__divsi3+0x19e>
20000e6e:	004b      	lsls	r3, r1, #1
20000e70:	1ac0      	subs	r0, r0, r3
20000e72:	4152      	adcs	r2, r2
20000e74:	1a41      	subs	r1, r0, r1
20000e76:	d200      	bcs.n	20000e7a <__divsi3+0x1a6>
20000e78:	4601      	mov	r1, r0
20000e7a:	4663      	mov	r3, ip
20000e7c:	4152      	adcs	r2, r2
20000e7e:	105b      	asrs	r3, r3, #1
20000e80:	4610      	mov	r0, r2
20000e82:	d301      	bcc.n	20000e88 <__divsi3+0x1b4>
20000e84:	4240      	negs	r0, r0
20000e86:	2b00      	cmp	r3, #0
20000e88:	d500      	bpl.n	20000e8c <__divsi3+0x1b8>
20000e8a:	4249      	negs	r1, r1
20000e8c:	4770      	bx	lr
20000e8e:	4663      	mov	r3, ip
20000e90:	105b      	asrs	r3, r3, #1
20000e92:	d300      	bcc.n	20000e96 <__divsi3+0x1c2>
20000e94:	4240      	negs	r0, r0
20000e96:	b501      	push	{r0, lr}
20000e98:	2000      	movs	r0, #0
20000e9a:	f000 f805 	bl	20000ea8 <__aeabi_idiv0>
20000e9e:	bd02      	pop	{r1, pc}

20000ea0 <__aeabi_idivmod>:
20000ea0:	2900      	cmp	r1, #0
20000ea2:	d0f8      	beq.n	20000e96 <__divsi3+0x1c2>
20000ea4:	e716      	b.n	20000cd4 <__divsi3>
20000ea6:	4770      	bx	lr

20000ea8 <__aeabi_idiv0>:
20000ea8:	4770      	bx	lr
20000eaa:	46c0      	nop			; (mov r8, r8)

20000eac <keyb_state>:
20000eac:	00ff      	lsls	r7, r7, #3
	...

20000eb0 <obstacle_top_geometry>:
20000eb0:	0000007e 	andeq	r0, r0, lr, ror r0
20000eb4:	0000000e 	andeq	r0, r0, lr
20000eb8:	00000032 	andeq	r0, r0, r2, lsr r0
20000ebc:	000c0001 	andeq	r0, ip, r1
20000ec0:	010c0101 	tsteq	ip, r1, lsl #2
20000ec4:	020c0201 	andeq	r0, ip, #268435456	; 0x10000000
20000ec8:	030c0301 	movweq	r0, #49921	; 0xc301
20000ecc:	040c0401 	streq	r0, [ip], #-1025	; 0xfffffbff
20000ed0:	050c0501 	streq	r0, [ip, #-1281]	; 0xfffffaff
20000ed4:	060c0601 	streq	r0, [ip], -r1, lsl #12
20000ed8:	070c0701 	streq	r0, [ip, -r1, lsl #14]
20000edc:	080c0801 	stmdaeq	ip, {r0, fp}
20000ee0:	090c0901 	stmdbeq	ip, {r0, r8, fp}
20000ee4:	0a0c0a01 	beq	203036f0 <ts_state+0x301900>
20000ee8:	0b0c0b01 	bleq	20303af4 <ts_state+0x301d04>
20000eec:	0c0c0c01 	stceq	12, cr0, [ip], {1}
20000ef0:	0d0c0d01 	stceq	13, cr0, [ip, #-4]
20000ef4:	0e0c0e01 	cdpeq	14, 0, cr0, cr12, cr1, {0}
20000ef8:	0f0c0f01 	svceq	0x000c0f01
20000efc:	100c1001 	andne	r1, ip, r1
20000f00:	110c1101 	tstne	ip, r1, lsl #2
20000f04:	120c1201 	andne	r1, ip, #268435456	; 0x10000000
20000f08:	130c1301 	movwne	r1, #49921	; 0xc301
20000f0c:	140c1401 	strne	r1, [ip], #-1025	; 0xfffffbff
20000f10:	150c1501 	strne	r1, [ip, #-1281]	; 0xfffffaff
20000f14:	160c1601 	strne	r1, [ip], -r1, lsl #12
20000f18:	170c1701 	strne	r1, [ip, -r1, lsl #14]
20000f1c:	180c1801 	stmdane	ip, {r0, fp, ip}
20000f20:	190c1901 	stmdbne	ip, {r0, r8, fp, ip}
20000f24:	1a0c1a01 	bne	20307730 <ts_state+0x305940>
20000f28:	1b0c1b01 	blne	20307b34 <ts_state+0x305d44>
20000f2c:	1c0c1c01 	stcne	12, cr1, [ip], {1}
20000f30:	1d0c1d01 	stcne	13, cr1, [ip, #-4]
20000f34:	1e0c1e01 	cdpne	14, 0, cr1, cr12, cr1, {0}
20000f38:	1f0c1f01 	svcne	0x000c1f01
20000f3c:	200c2001 	andcs	r2, ip, r1
20000f40:	210c2101 	tstcs	ip, r1, lsl #2
20000f44:	220c2201 	andcs	r2, ip, #268435456	; 0x10000000
20000f48:	230c2301 	movwcs	r2, #49921	; 0xc301
20000f4c:	240c2401 	strcs	r2, [ip], #-1025	; 0xfffffbff
20000f50:	250c2501 	strcs	r2, [ip, #-1281]	; 0xfffffaff
20000f54:	260c2601 	strcs	r2, [ip], -r1, lsl #12
20000f58:	270c2701 	strcs	r2, [ip, -r1, lsl #14]
20000f5c:	280c2801 	stmdacs	ip, {r0, fp, sp}
20000f60:	290c2901 	stmdbcs	ip, {r0, r8, fp, sp}
20000f64:	2a0c2a01 	bcs	2030b770 <ts_state+0x309980>
20000f68:	2b0c2b01 	blcs	2030bb74 <ts_state+0x309d84>
20000f6c:	2c0c2c01 	stccs	12, cr2, [ip], {1}
20000f70:	2d0c2d01 	stccs	13, cr2, [ip, #-4]
20000f74:	2e012e00 	cdpcs	14, 0, cr2, cr1, cr0, {0}
20000f78:	2e032e02 	cdpcs	14, 0, cr2, cr3, cr2, {0}
20000f7c:	2e052e04 	cdpcs	14, 0, cr2, cr5, cr4, {0}
20000f80:	2e072e06 	cdpcs	14, 0, cr2, cr7, cr6, {0}
20000f84:	2e092e08 	cdpcs	14, 0, cr2, cr9, cr8, {0}
20000f88:	2e0b2e0a 	cdpcs	14, 0, cr2, cr11, cr10, {0}
20000f8c:	2e0d2e0c 	cdpcs	14, 0, cr2, cr13, cr12, {0}
20000f90:	2f0d2f00 	svccs	0x000d2f00
20000f94:	300d3000 	andcc	r3, sp, r0
20000f98:	310d3100 	mrscc	r3, (UNDEF: 29)
20000f9c:	32013200 	andcc	r3, r1, #0, 4
20000fa0:	32033202 	andcc	r3, r3, #536870912	; 0x20000000
20000fa4:	32053204 	andcc	r3, r5, #4, 4	; 0x40000000
20000fa8:	32073206 	andcc	r3, r7, #1610612736	; 0x60000000
20000fac:	32093208 	andcc	r3, r9, #8, 4	; 0x80000000
20000fb0:	320b320a 	andcc	r3, fp, #-1610612736	; 0xa0000000
20000fb4:	320d320c 	andcc	r3, sp, #12, 4	; 0xc0000000
	...

20001178 <obstacle_bottom_geometry>:
20001178:	0000007e 	andeq	r0, r0, lr, ror r0
2000117c:	0000000e 	andeq	r0, r0, lr
20001180:	00000032 	andeq	r0, r0, r2, lsr r0
20001184:	00010000 	andeq	r0, r1, r0
20001188:	00030002 	andeq	r0, r3, r2
2000118c:	00050004 	andeq	r0, r5, r4
20001190:	00070006 	andeq	r0, r7, r6
20001194:	00090008 	andeq	r0, r9, r8
20001198:	000b000a 	andeq	r0, fp, sl
2000119c:	000d000c 	andeq	r0, sp, ip
200011a0:	010d0100 	mrseq	r0, (UNDEF: 29)
200011a4:	020d0200 	andeq	r0, sp, #0, 4
200011a8:	030d0300 	movweq	r0, #54016	; 0xd300
200011ac:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
200011b0:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
200011b4:	04050404 	streq	r0, [r5], #-1028	; 0xfffffbfc
200011b8:	04070406 	streq	r0, [r7], #-1030	; 0xfffffbfa
200011bc:	04090408 	streq	r0, [r9], #-1032	; 0xfffffbf8
200011c0:	040b040a 	streq	r0, [fp], #-1034	; 0xfffffbf6
200011c4:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
200011c8:	050c0501 	streq	r0, [ip, #-1281]	; 0xfffffaff
200011cc:	060c0601 	streq	r0, [ip], -r1, lsl #12
200011d0:	070c0701 	streq	r0, [ip, -r1, lsl #14]
200011d4:	080c0801 	stmdaeq	ip, {r0, fp}
200011d8:	090c0901 	stmdbeq	ip, {r0, r8, fp}
200011dc:	0a0c0a01 	beq	203039e8 <ts_state+0x301bf8>
200011e0:	0b0c0b01 	bleq	20303dec <ts_state+0x301ffc>
200011e4:	0c0c0c01 	stceq	12, cr0, [ip], {1}
200011e8:	0d0c0d01 	stceq	13, cr0, [ip, #-4]
200011ec:	0e0c0e01 	cdpeq	14, 0, cr0, cr12, cr1, {0}
200011f0:	0f0c0f01 	svceq	0x000c0f01
200011f4:	100c1001 	andne	r1, ip, r1
200011f8:	110c1101 	tstne	ip, r1, lsl #2
200011fc:	120c1201 	andne	r1, ip, #268435456	; 0x10000000
20001200:	130c1301 	movwne	r1, #49921	; 0xc301
20001204:	140c1401 	strne	r1, [ip], #-1025	; 0xfffffbff
20001208:	150c1501 	strne	r1, [ip, #-1281]	; 0xfffffaff
2000120c:	160c1601 	strne	r1, [ip], -r1, lsl #12
20001210:	170c1701 	strne	r1, [ip, -r1, lsl #14]
20001214:	180c1801 	stmdane	ip, {r0, fp, ip}
20001218:	190c1901 	stmdbne	ip, {r0, r8, fp, ip}
2000121c:	1a0c1a01 	bne	20307a28 <ts_state+0x305c38>
20001220:	1b0c1b01 	blne	20307e2c <ts_state+0x30603c>
20001224:	1c0c1c01 	stcne	12, cr1, [ip], {1}
20001228:	1d0c1d01 	stcne	13, cr1, [ip, #-4]
2000122c:	1e0c1e01 	cdpne	14, 0, cr1, cr12, cr1, {0}
20001230:	1f0c1f01 	svcne	0x000c1f01
20001234:	200c2001 	andcs	r2, ip, r1
20001238:	210c2101 	tstcs	ip, r1, lsl #2
2000123c:	220c2201 	andcs	r2, ip, #268435456	; 0x10000000
20001240:	230c2301 	movwcs	r2, #49921	; 0xc301
20001244:	240c2401 	strcs	r2, [ip], #-1025	; 0xfffffbff
20001248:	250c2501 	strcs	r2, [ip, #-1281]	; 0xfffffaff
2000124c:	260c2601 	strcs	r2, [ip], -r1, lsl #12
20001250:	270c2701 	strcs	r2, [ip, -r1, lsl #14]
20001254:	280c2801 	stmdacs	ip, {r0, fp, sp}
20001258:	290c2901 	stmdbcs	ip, {r0, r8, fp, sp}
2000125c:	2a0c2a01 	bcs	2030ba68 <ts_state+0x309c78>
20001260:	2b0c2b01 	blcs	2030be6c <ts_state+0x30a07c>
20001264:	2c0c2c01 	stccs	12, cr2, [ip], {1}
20001268:	2d0c2d01 	stccs	13, cr2, [ip, #-4]
2000126c:	2e0c2e01 	cdpcs	14, 0, cr2, cr12, cr1, {0}
20001270:	2f0c2f01 	svccs	0x000c2f01
20001274:	300c3001 	andcc	r3, ip, r1
20001278:	310c3101 	tstcc	ip, r1, lsl #2
2000127c:	320c3201 	andcc	r3, ip, #268435456	; 0x10000000
	...

20001440 <bird_flap_geometry>:
20001440:	0000002c 	andeq	r0, r0, ip, lsr #32
20001444:	0000000d 	andeq	r0, r0, sp
20001448:	0000000c 	andeq	r0, r0, ip
2000144c:	08000700 	stmdaeq	r0, {r8, r9, sl}
20001450:	08010601 	stmdaeq	r1, {r0, r9, sl}
20001454:	05020402 	streq	r0, [r2, #-1026]	; 0xfffffbfe
20001458:	03030802 	movweq	r0, #14338	; 0x3802
2000145c:	08030603 	stmdaeq	r3, {r0, r1, r9, sl}
20001460:	0a030903 	beq	200c3874 <ts_state+0xc1a84>
20001464:	02040b03 	andeq	r0, r4, #3072	; 0xc00
20001468:	08040604 	stmdaeq	r4, {r2, r9, sl}
2000146c:	03050105 	movweq	r0, #20741	; 0x5105
20001470:	08050605 	stmdaeq	r5, {r0, r2, r9, sl}
20001474:	04060006 	streq	r0, [r6], #-6
20001478:	06060506 	streq	r0, [r6], -r6, lsl #10
2000147c:	09060806 	stmdbeq	r6, {r1, r2, fp}
20001480:	0b060a06 	bleq	20183ca0 <ts_state+0x181eb0>
20001484:	08070007 	stmdaeq	r7, {r0, r1, r2}
20001488:	02080008 	andeq	r0, r8, #8
2000148c:	00090808 	andeq	r0, r9, r8, lsl #16
20001490:	010a0809 	tsteq	sl, r9, lsl #16
20001494:	040a030a 	streq	r0, [sl], #-778	; 0xfffffcf6
20001498:	060a050a 	streq	r0, [sl], -sl, lsl #10
2000149c:	020b070a 	andeq	r0, fp, #2621440	; 0x280000
200014a0:	030c030b 	movweq	r0, #49931	; 0xc30b
	...

20001708 <bird_soar_geometry>:
20001708:	0000002f 	andeq	r0, r0, pc, lsr #32
2000170c:	0000000e 	andeq	r0, r0, lr
20001710:	0000000c 	andeq	r0, r0, ip
20001714:	00ff00ff 	ldrshteq	r0, [pc], #15
20001718:	02000000 	andeq	r0, r0, #0
2000171c:	08000700 	stmdaeq	r0, {r8, r9, sl}
20001720:	03010001 	movweq	r0, #4097	; 0x1001
20001724:	08010601 	stmdaeq	r1, {r0, r9, sl}
20001728:	04020002 	streq	r0, [r2], #-2
2000172c:	08020502 	stmdaeq	r2, {r1, r8, sl}
20001730:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
20001734:	08030303 	stmdaeq	r3, {r0, r1, r8, r9}
20001738:	0a030903 	beq	200c3b4c <ts_state+0xc1d5c>
2000173c:	02040b03 	andeq	r0, r4, #3072	; 0xc00
20001740:	08040304 	stmdaeq	r4, {r2, r8, r9}
20001744:	08050105 	stmdaeq	r5, {r0, r2, r8}
20001748:	08060006 	stmdaeq	r6, {r1, r2}
2000174c:	0a060906 	beq	20183b6c <ts_state+0x181d7c>
20001750:	00070b06 	andeq	r0, r7, r6, lsl #22
20001754:	00080807 	andeq	r0, r8, r7, lsl #16
20001758:	08080208 	stmdaeq	r8, {r3, r9}
2000175c:	08090009 	stmdaeq	r9, {r0, r3}
20001760:	030a010a 	movweq	r0, #41226	; 0xa10a
20001764:	050a040a 	streq	r0, [sl, #-1034]	; 0xfffffbf6
20001768:	070a060a 	streq	r0, [sl, -sl, lsl #12]
2000176c:	030b020b 	movweq	r0, #45579	; 0xb20b
20001770:	0000030c 	andeq	r0, r0, ip, lsl #6
	...

200019d0 <starting_screen_geometry>:
200019d0:	0000013d 	andeq	r0, r0, sp, lsr r1
200019d4:	00000043 	andeq	r0, r0, r3, asr #32
200019d8:	00000025 	andeq	r0, r0, r5, lsr #32
200019dc:	00030002 	andeq	r0, r3, r2
200019e0:	01010004 	tsteq	r1, r4
200019e4:	01040102 	tsteq	r4, r2, lsl #2
200019e8:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
200019ec:	02050201 	andeq	r0, r5, #268435456	; 0x10000000
200019f0:	03000206 	movweq	r0, #518	; 0x206
200019f4:	04000306 	streq	r0, [r0], #-774	; 0xfffffcfa
200019f8:	05000406 	streq	r0, [r0, #-1030]	; 0xfffffbfa
200019fc:	06000506 	streq	r0, [r0], -r6, lsl #10
20001a00:	07000606 	streq	r0, [r0, -r6, lsl #12]
20001a04:	08010706 	stmdaeq	r1, {r1, r2, r8, r9, sl}
20001a08:	09020805 	stmdbeq	r2, {r0, r2, fp}
20001a0c:	09040903 	stmdbeq	r4, {r0, r1, r8, fp}
20001a10:	0a030a02 	beq	200c4220 <ts_state+0xc2430>
20001a14:	0b010a04 	bleq	2004422c <ts_state+0x4243c>
20001a18:	0c000b05 			; <UNDEFINED> instruction: 0x0c000b05
20001a1c:	0dff0c06 	ldcleq	12, cr0, [pc, #24]!	; 20001a3c <starting_screen_geometry+0x6c>
20001a20:	0eff0d07 	cdpeq	13, 15, cr0, cr15, cr7, {0}
20001a24:	0fff0e07 	svceq	0x00ff0e07
20001a28:	10ff0f07 	rscsne	r0, pc, r7, lsl #30
20001a2c:	11ff1007 	mvnsne	r1, r7
20001a30:	12001107 	andne	r1, r0, #-1073741823	; 0xc0000001
20001a34:	13011206 	movwne	r1, #4614	; 0x1206
20001a38:	13031302 	movwne	r1, #13058	; 0x3302
20001a3c:	13051304 	movwne	r1, #21252	; 0x5304
20001a40:	0c0b0c0a 	stceq	12, cr0, [fp], {10}
20001a44:	0c0d0c0c 	stceq	12, cr0, [sp], {12}
20001a48:	07100610 			; <UNDEFINED> instruction: 0x07100610
20001a4c:	09100810 	ldmdbeq	r0, {r4, fp}
20001a50:	0b100a10 	bleq	20404298 <ts_state+0x4024a8>
20001a54:	0c110c10 	ldceq	12, cr0, [r1], {16}
20001a58:	0c130c12 	ldceq	12, cr0, [r3], {18}
20001a5c:	0d140d10 	ldceq	13, cr0, [r4, #-64]	; 0xffffffc0
20001a60:	0e150e10 	mrceq	14, 0, r0, cr5, cr0, {0}
20001a64:	0f150f10 	svceq	0x00150f10
20001a68:	10141010 	andsne	r1, r4, r0, lsl r0
20001a6c:	11111110 	tstne	r1, r0, lsl r1
20001a70:	11131112 	tstne	r3, r2, lsl r1
20001a74:	0b170917 	bleq	205c3ed8 <ts_state+0x5c20e8>
20001a78:	0d170c17 	ldceq	12, cr0, [r7, #-92]	; 0xffffffa4
20001a7c:	0f170e17 	svceq	0x00170e17
20001a80:	11171017 	tstne	r7, r7, lsl r0
20001a84:	0a1a091a 	beq	20683ef4 <ts_state+0x682104>
20001a88:	0c1a0b1a 			; <UNDEFINED> instruction: 0x0c1a0b1a
20001a8c:	0d1a0d19 	ldceq	13, cr0, [sl, #-100]	; 0xffffff9c
20001a90:	0e1a0d1b 	mrceq	13, 0, r0, cr10, cr11, {0}
20001a94:	101a0f1a 	andsne	r0, sl, sl, lsl pc
20001a98:	111b111a 	tstne	fp, sl, lsl r1
20001a9c:	0621111c 			; <UNDEFINED> instruction: 0x0621111c
20001aa0:	08210721 	stmdaeq	r1!, {r0, r5, r8, r9, sl}
20001aa4:	0a210921 	beq	20843f30 <ts_state+0x842140>
20001aa8:	0c210b21 			; <UNDEFINED> instruction: 0x0c210b21
20001aac:	0c230c22 	stceq	12, cr0, [r3], #-136	; 0xffffff78
20001ab0:	0d210c24 	stceq	12, cr0, [r1, #-144]!	; 0xffffff70
20001ab4:	0e210d25 	cdpeq	13, 2, cr0, cr1, cr5, {1}
20001ab8:	0f210e26 	svceq	0x00210e26
20001abc:	10210f26 	eorne	r0, r1, r6, lsr #30
20001ac0:	11211025 			; <UNDEFINED> instruction: 0x11211025
20001ac4:	11231122 			; <UNDEFINED> instruction: 0x11231122
20001ac8:	09281124 	stmdbeq	r8!, {r2, r5, r8, ip}
20001acc:	0c280b28 			; <UNDEFINED> instruction: 0x0c280b28
20001ad0:	0e280d28 	cdpeq	13, 2, cr0, cr8, cr8, {1}
20001ad4:	10280f28 	eorne	r0, r8, r8, lsr #30
20001ad8:	0b2b1128 	bleq	20ac5f80 <ts_state+0xac4190>
20001adc:	0b2e0b2d 	bleq	20b84798 <ts_state+0xb829a8>
20001ae0:	0c2c0c2b 	stceq	12, cr0, [ip], #-172	; 0xffffff54
20001ae4:	0e2b0d2b 	cdpeq	13, 2, cr0, cr11, cr11, {1}
20001ae8:	102b0f2b 	eorne	r0, fp, fp, lsr #30
20001aec:	0633112b 	ldrteq	r1, [r3], -fp, lsr #2
20001af0:	08330733 	ldmdaeq	r3!, {r0, r1, r4, r5, r8, r9, sl}
20001af4:	0a330933 	beq	20cc3fc8 <ts_state+0xcc21d8>
20001af8:	0c330b33 			; <UNDEFINED> instruction: 0x0c330b33
20001afc:	0c310c32 	ldceq	12, cr0, [r1], #-200	; 0xffffff38
20001b00:	0d330c30 	ldceq	12, cr0, [r3, #-192]!	; 0xffffff40
20001b04:	0e330d2f 	cdpeq	13, 3, cr0, cr3, cr15, {1}
20001b08:	0f330e2e 	svceq	0x00330e2e
20001b0c:	10330f2e 	eorsne	r0, r3, lr, lsr #30
20001b10:	1133102f 	teqne	r3, pc, lsr #32
20001b14:	11311132 	teqne	r1, r2, lsr r1
20001b18:	00351130 	eorseq	r1, r5, r0, lsr r1
20001b1c:	00370036 	eorseq	r0, r7, r6, lsr r0
20001b20:	00390038 	eorseq	r0, r9, r8, lsr r0
20001b24:	02370137 	eorseq	r0, r7, #-1073741811	; 0xc000000d
20001b28:	04370337 	ldrteq	r0, [r7], #-823	; 0xfffffcc9
20001b2c:	003c0537 	eorseq	r0, ip, r7, lsr r5
20001b30:	013b0040 	teqeq	fp, r0, asr #32
20001b34:	013f013d 	teqeq	pc, sp, lsr r1	; <UNPREDICTABLE>
20001b38:	023b0141 	eorseq	r0, fp, #1073741840	; 0x40000010
20001b3c:	0241023e 	subeq	r0, r1, #-536870909	; 0xe0000003
20001b40:	0341033b 	movteq	r0, #4923	; 0x133b
20001b44:	0441043b 	strbeq	r0, [r1], #-1083	; 0xfffffbc5
20001b48:	0541053b 	strbeq	r0, [r1, #-1339]	; 0xfffffac5
20001b4c:	16111610 			; <UNDEFINED> instruction: 0x16111610
20001b50:	16131612 			; <UNDEFINED> instruction: 0x16131612
20001b54:	17141710 			; <UNDEFINED> instruction: 0x17141710
20001b58:	18151810 	ldmdane	r5, {r4, fp, ip}
20001b5c:	19151910 	ldmdbne	r5, {r4, r8, fp, ip}
20001b60:	1a111a10 	bne	204483a8 <ts_state+0x4465b8>
20001b64:	1a131a12 	bne	204c83b4 <ts_state+0x4c65c4>
20001b68:	1b101a14 	blne	204083c0 <ts_state+0x4065d0>
20001b6c:	1d101c10 	ldcne	12, cr1, [r0, #-64]	; 0xffffffc0
20001b70:	19191917 	ldmdbne	r9, {r0, r1, r2, r4, r8, fp, ip}
20001b74:	1a17191a 	bne	205c7fe4 <ts_state+0x5c61f4>
20001b78:	1b171a18 	blne	205c83e0 <ts_state+0x5c65f0>
20001b7c:	1d171c17 	ldcne	12, cr1, [r7, #-92]	; 0xffffffa4
20001b80:	191e191d 	ldmdbne	lr, {r0, r2, r3, r4, r8, fp, ip}
20001b84:	1a1f1a1c 	bne	207c83fc <ts_state+0x7c660c>
20001b88:	1b1d1b1c 	blne	20748800 <ts_state+0x746a10>
20001b8c:	1b1f1b1e 	blne	207c880c <ts_state+0x7c6a1c>
20001b90:	1d1c1c1c 	ldcne	12, cr1, [ip, #-112]	; 0xffffff90
20001b94:	1d1e1d1d 	ldcne	13, cr1, [lr, #-116]	; 0xffffff8c
20001b98:	19221d1f 	stmdbne	r2!, {r0, r1, r2, r3, r4, r8, sl, fp, ip}
20001b9c:	19241923 	stmdbne	r4!, {r0, r1, r5, r8, fp, ip}
20001ba0:	1b231a22 	blne	208c8430 <ts_state+0x8c6640>
20001ba4:	1d221c24 	stcne	12, cr1, [r2, #-144]!	; 0xffffff70
20001ba8:	1d241d23 	stcne	13, cr1, [r4, #-140]!	; 0xffffff74
20001bac:	19281927 	stmdbne	r8!, {r0, r1, r2, r5, r8, fp, ip}
20001bb0:	1a271929 	bne	209c805c <ts_state+0x9c626c>
20001bb4:	1c291b28 			; <UNDEFINED> instruction: 0x1c291b28
20001bb8:	1d281d27 	stcne	13, cr1, [r8, #-156]!	; 0xffffff64
20001bbc:	172d1d29 	strne	r1, [sp, -r9, lsr #26]!
20001bc0:	192f182d 	stmdbne	pc!, {r0, r2, r3, r5, fp, ip}	; <UNPREDICTABLE>
20001bc4:	19311930 	ldmdbne	r1!, {r4, r5, r8, fp, ip}
20001bc8:	1a2f1932 	bne	20bc8098 <ts_state+0xbc62a8>
20001bcc:	1b301b2f 	blne	20c08890 <ts_state+0xc06aa0>
20001bd0:	1c321b31 			; <UNDEFINED> instruction: 0x1c321b31
20001bd4:	1d301d2f 	ldcne	13, cr1, [r0, #-188]!	; 0xffffff44
20001bd8:	17341d31 			; <UNDEFINED> instruction: 0x17341d31
20001bdc:	1f101834 	svcne	0x00101834
20001be0:	210f2010 	tstcs	pc, r0, lsl r0	; <UNPREDICTABLE>
20001be4:	21112110 	tstcs	r1, r0, lsl r1
20001be8:	23102210 	tstcs	r0, #16, 4
20001bec:	24112410 	ldrcs	r2, [r1], #-1040	; 0xfffffbf0
20001bf0:	21142412 	tstcs	r4, r2, lsl r4
20001bf4:	22132115 	andscs	r2, r3, #1073741829	; 0x40000005
20001bf8:	23132216 	tstcs	r3, #1610612737	; 0x60000001
20001bfc:	24142316 	ldrcs	r2, [r4], #-790	; 0xfffffcea
20001c00:	1f1a2415 	svcne	0x001a2415
20001c04:	1f1c1f1b 	svcne	0x001c1f1b
20001c08:	201a1f1d 	andscs	r1, sl, sp, lsl pc
20001c0c:	211a201e 	tstcs	sl, lr, lsl r0
20001c10:	221a211e 	andscs	r2, sl, #-2147483641	; 0x80000007
20001c14:	221c221b 	andscs	r2, ip, #-1342177279	; 0xb0000001
20001c18:	231a221d 	tstcs	sl, #-805306367	; 0xd0000001
20001c1c:	1f20241a 	svcne	0x0020241a
20001c20:	21202020 			; <UNDEFINED> instruction: 0x21202020
20001c24:	23202220 			; <UNDEFINED> instruction: 0x23202220
20001c28:	24212420 	strtcs	r2, [r1], #-1056	; 0xfffffbe0
20001c2c:	20252024 	eorcs	r2, r5, r4, lsr #32
20001c30:	21232026 			; <UNDEFINED> instruction: 0x21232026
20001c34:	22232127 	eorcs	r2, r3, #-1073741815	; 0xc0000009
20001c38:	23232227 			; <UNDEFINED> instruction: 0x23232227
20001c3c:	24242327 	strtcs	r2, [r4], #-807	; 0xfffffcd9
20001c40:	24262425 	strtcs	r2, [r6], #-1061	; 0xfffffbdb
20001c44:	24292428 	strtcs	r2, [r9], #-1064	; 0xfffffbd8
20001c48:	202f202b 	eorcs	r2, pc, fp, lsr #32
20001c4c:	212e212c 			; <UNDEFINED> instruction: 0x212e212c
20001c50:	232c222d 			; <UNDEFINED> instruction: 0x232c222d
20001c54:	0000242b 	andeq	r2, r0, fp, lsr #8
	...

20001c98 <starting_screen_obj>:
20001c98:	200019d0 	ldrdcs	r1, [r0], -r0
	...
20001ca4:	00000020 	andeq	r0, r0, r0, lsr #32
20001ca8:	00000010 	andeq	r0, r0, r0, lsl r0
20001cac:	2000062f 	andcs	r0, r0, pc, lsr #12
20001cb0:	2000068f 	andcs	r0, r0, pc, lsl #13
	...

20001cbc <obstacle_top_obj_1>:
20001cbc:	20000eb0 			; <UNDEFINED> instruction: 0x20000eb0
	...
20001cc8:	0000003c 	andeq	r0, r0, ip, lsr r0
20001ccc:	ffffffe3 			; <UNDEFINED> instruction: 0xffffffe3
20001cd0:	2000062f 	andcs	r0, r0, pc, lsr #12
20001cd4:	2000068f 	andcs	r0, r0, pc, lsl #13
20001cd8:	200006ef 	andcs	r0, r0, pc, ror #13
20001cdc:	2000072b 	andcs	r0, r0, fp, lsr #14

20001ce0 <obstacle_bottom_obj_1>:
20001ce0:	20001178 	andcs	r1, r0, r8, ror r1
	...
20001cec:	0000003c 	andeq	r0, r0, ip, lsr r0
20001cf0:	0000002b 	andeq	r0, r0, fp, lsr #32
20001cf4:	2000062f 	andcs	r0, r0, pc, lsr #12
20001cf8:	2000068f 	andcs	r0, r0, pc, lsl #13
20001cfc:	200006ef 	andcs	r0, r0, pc, ror #13
20001d00:	2000072b 	andcs	r0, r0, fp, lsr #14

20001d04 <obstacle_top_obj_2>:
20001d04:	20000eb0 			; <UNDEFINED> instruction: 0x20000eb0
	...
20001d10:	00000082 	andeq	r0, r0, r2, lsl #1
20001d14:	ffffffe3 			; <UNDEFINED> instruction: 0xffffffe3
20001d18:	2000062f 	andcs	r0, r0, pc, lsr #12
20001d1c:	2000068f 	andcs	r0, r0, pc, lsl #13
20001d20:	200006ef 	andcs	r0, r0, pc, ror #13
20001d24:	2000072b 	andcs	r0, r0, fp, lsr #14

20001d28 <obstacle_bottom_obj_2>:
20001d28:	20001178 	andcs	r1, r0, r8, ror r1
	...
20001d34:	00000082 	andeq	r0, r0, r2, lsl #1
20001d38:	0000002b 	andeq	r0, r0, fp, lsr #32
20001d3c:	2000062f 	andcs	r0, r0, pc, lsr #12
20001d40:	2000068f 	andcs	r0, r0, pc, lsl #13
20001d44:	200006ef 	andcs	r0, r0, pc, ror #13
20001d48:	2000072b 	andcs	r0, r0, fp, lsr #14

20001d4c <bird_soar_obj>:
20001d4c:	20001708 	andcs	r1, r0, r8, lsl #14
	...
20001d58:	00000005 	andeq	r0, r0, r5
20001d5c:	0000001e 	andeq	r0, r0, lr, lsl r0
20001d60:	2000062f 	andcs	r0, r0, pc, lsr #12
20001d64:	2000068f 	andcs	r0, r0, pc, lsl #13
20001d68:	200006ef 	andcs	r0, r0, pc, ror #13
20001d6c:	2000072b 	andcs	r0, r0, fp, lsr #14

20001d70 <bird_flap_obj>:
20001d70:	20001440 	andcs	r1, r0, r0, asr #8
	...
20001d7c:	00000005 	andeq	r0, r0, r5
20001d80:	0000001e 	andeq	r0, r0, lr, lsl r0
20001d84:	2000062f 	andcs	r0, r0, pc, lsr #12
20001d88:	2000068f 	andcs	r0, r0, pc, lsl #13
20001d8c:	200006ef 	andcs	r0, r0, pc, ror #13
20001d90:	2000072b 	andcs	r0, r0, fp, lsr #14

20001d94 <bird.4205>:
20001d94:	20001d4c 	andcs	r1, r0, ip, asr #26

20001d98 <obstacle_top_1.4201>:
20001d98:	20001cbc 			; <UNDEFINED> instruction: 0x20001cbc

20001d9c <obstacle_bottom_1.4202>:
20001d9c:	20001ce0 	andcs	r1, r0, r0, ror #25

20001da0 <obstacle_top_2.4203>:
20001da0:	20001d04 	andcs	r1, r0, r4, lsl #26

20001da4 <obstacle_bottom_2.4204>:
20001da4:	20001d28 	andcs	r1, r0, r8, lsr #26

20001da8 <start_screen.4206>:
20001da8:	20001c98 	mulcs	r0, r8, ip
20001dac:	20000362 	andcs	r0, r0, r2, ror #6
20001db0:	2000033a 	andcs	r0, r0, sl, lsr r3
20001db4:	20000342 	andcs	r0, r0, r2, asr #6
20001db8:	2000034a 	andcs	r0, r0, sl, asr #6
20001dbc:	20000352 	andcs	r0, r0, r2, asr r3
20001dc0:	2000035a 	andcs	r0, r0, sl, asr r3
20001dc4:	0a030201 	beq	200c25d0 <ts_state+0xc07e0>
20001dc8:	0b060504 	bleq	201831e0 <ts_state+0x1813f0>
20001dcc:	0c090807 	stceq	8, cr0, [r9], {7}
20001dd0:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001da0 <obstacle_top_2.4203>
20001dd4:	4f5b063f 	svcmi	0x005b063f
20001dd8:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001ddc:	7c77677f 	ldclvc	7, cr6, [r7], #-508	; 0xfffffe04
20001de0:	71795e39 	cmnvc	r9, r9, lsr lr
20001de4:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
20001de8:	203a7374 	eorscs	r7, sl, r4, ror r3
20001dec:	00000000 	andeq	r0, r0, r0

20001df0 <ts_state>:
20001df0:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000ada 	ldrdeq	r0, [r0], -sl
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000296 	muleq	r0, r6, r2
  10:	00025c0c 	andeq	r5, r2, ip, lsl #24
  14:	0001b100 	andeq	fp, r1, r0, lsl #2
	...
  24:	01880200 	orreq	r0, r8, r0, lsl #4
  28:	32010000 	andcc	r0, r1, #0
  2c:	00003705 	andeq	r3, r0, r5, lsl #14
  30:	f0030500 			; <UNDEFINED> instruction: 0xf0030500
  34:	0320001d 			; <UNDEFINED> instruction: 0x0320001d
  38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  3c:	e2040074 	and	r0, r4, #116	; 0x74
  40:	01000004 	tsteq	r0, r4
  44:	00500d33 	subseq	r0, r0, r3, lsr sp
  48:	03050000 	movweq	r0, #20480	; 0x5000
  4c:	20000eac 	andcs	r0, r0, ip, lsr #29
  50:	91080105 	tstls	r8, r5, lsl #2
  54:	06000002 	streq	r0, [r0], -r2
  58:	01360102 	teqeq	r6, r2, lsl #2
  5c:	00007a09 	andeq	r7, r0, r9, lsl #20
  60:	00780700 	rsbseq	r0, r8, r0, lsl #14
  64:	07013701 	streq	r3, [r1, -r1, lsl #14]
  68:	00000050 	andeq	r0, r0, r0, asr r0
  6c:	00790700 	rsbseq	r0, r9, r0, lsl #14
  70:	09013701 	stmdbeq	r1, {r0, r8, r9, sl, ip, sp}
  74:	00000050 	andeq	r0, r0, r0, asr r0
  78:	6a080001 	bvs	200084 <startup-0x1fdfff7c>
  7c:	01000001 	tsteq	r0, r1
  80:	57030138 	smladxpl	r3, r8, r1, r0
  84:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  88:	3a0102c8 	bcc	40bb0 <startup-0x1ffbf450>
  8c:	00ca0901 	sbceq	r0, sl, r1, lsl #18
  90:	f10a0000 	cpsie	,#0
  94:	01000003 	tsteq	r0, r3
  98:	3706013b 	smladxcc	r6, fp, r1, r0
  9c:	00000000 	andeq	r0, r0, r0
  a0:	00020f0a 	andeq	r0, r2, sl, lsl #30
  a4:	013c0100 	teqeq	ip, r0, lsl #2
  a8:	00003706 	andeq	r3, r0, r6, lsl #14
  ac:	150a0400 	strne	r0, [sl, #-1024]	; 0xfffffc00
  b0:	01000002 	tsteq	r0, r2
  b4:	3706013d 	smladxcc	r6, sp, r1, r0
  b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  bc:	00787007 	rsbseq	r7, r8, r7
  c0:	08013e01 	stmdaeq	r1, {r0, r9, sl, fp, ip, sp}
  c4:	000000ca 	andeq	r0, r0, sl, asr #1
  c8:	7a0b000c 	bvc	2c0100 <startup-0x1fd3ff00>
  cc:	db000000 	blle	d4 <startup-0x1fffff2c>
  d0:	0c000000 	stceq	0, cr0, [r0], {-0}
  d4:	000000db 	ldrdeq	r0, [r0], -fp
  d8:	0500015d 	streq	r0, [r0, #-349]	; 0xfffffea3
  dc:	03380704 	teqeq	r8, #4, 14	; 0x100000
  e0:	e8080000 	stmda	r8, {}	; <UNPREDICTABLE>
  e4:	01000000 	mrseq	r0, (UNDEF: 0)
  e8:	8703013f 	smladxhi	r3, pc, r1, r0	; <UNPREDICTABLE>
  ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  f0:	000000e7 	andeq	r0, r0, r7, ror #1
  f4:	0e013f01 	cdpeq	15, 0, cr3, cr1, cr1, {0}
  f8:	000000fc 	strdeq	r0, [r0], -ip
  fc:	0087040d 	addeq	r0, r7, sp, lsl #8
 100:	830e0000 	movwhi	r0, #57344	; 0xe000
 104:	24000001 	strcs	r0, [r0], #-1
 108:	10014101 	andne	r4, r1, r1, lsl #2
 10c:	0000018f 	andeq	r0, r0, pc, lsl #3
 110:	6f656707 	svcvs	0x00656707
 114:	01420100 	mrseq	r0, (UNDEF: 82)
 118:	0000ef0c 	andeq	lr, r0, ip, lsl #30
 11c:	910a0000 	mrsls	r0, (UNDEF: 10)
 120:	01000001 	tsteq	r0, r1
 124:	37060143 	strcc	r0, [r6, -r3, asr #2]
 128:	04000000 	streq	r0, [r0], #-0
 12c:	0001960a 	andeq	r9, r1, sl, lsl #12
 130:	01430100 	mrseq	r0, (UNDEF: 83)
 134:	0000370c 	andeq	r3, r0, ip, lsl #14
 138:	000a0800 	andeq	r0, sl, r0, lsl #16
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	37060144 	strcc	r0, [r6, -r4, asr #2]
 144:	0c000000 	stceq	0, cr0, [r0], {-0}
 148:	0003700a 	andeq	r7, r3, sl
 14c:	01440100 	mrseq	r0, (UNDEF: 84)
 150:	0000370c 	andeq	r3, r0, ip, lsl #14
 154:	530a1000 	movwpl	r1, #40960	; 0xa000
 158:	01000004 	tsteq	r0, r4
 15c:	a0090145 	andge	r0, r9, r5, asr #2
 160:	14000001 	strne	r0, [r0], #-1
 164:	0003830a 	andeq	r8, r3, sl, lsl #6
 168:	01460100 	mrseq	r0, (UNDEF: 86)
 16c:	0001a009 	andeq	sl, r1, r9
 170:	ed0a1800 	stc	8, cr1, [sl, #-0]
 174:	01000004 	tsteq	r0, r4
 178:	b5090147 	strlt	r0, [r9, #-327]	; 0xfffffeb9
 17c:	1c000001 	stcne	0, cr0, [r0], {1}
 180:	0004580a 	andeq	r5, r4, sl, lsl #16
 184:	01480100 	mrseq	r0, (UNDEF: 88)
 188:	0001d00a 	andeq	sp, r1, sl
 18c:	0f002000 	svceq	0x00002000
 190:	0000019a 	muleq	r0, sl, r1
 194:	00019a10 	andeq	r9, r1, r0, lsl sl
 198:	040d0000 	streq	r0, [sp], #-0
 19c:	00000102 	andeq	r0, r0, r2, lsl #2
 1a0:	018f040d 	orreq	r0, pc, sp, lsl #8
 1a4:	37110000 	ldrcc	r0, [r1, -r0]
 1a8:	b5000000 	strlt	r0, [r0, #-0]
 1ac:	10000001 	andne	r0, r0, r1
 1b0:	0000019a 	muleq	r0, sl, r1
 1b4:	a6040d00 	strge	r0, [r4], -r0, lsl #26
 1b8:	0f000001 	svceq	0x00000001
 1bc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1c0:	00019a10 	andeq	r9, r1, r0, lsl sl
 1c4:	00371000 	eorseq	r1, r7, r0
 1c8:	37100000 	ldrcc	r0, [r0, -r0]
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	01bb040d 			; <UNDEFINED> instruction: 0x01bb040d
 1d4:	d3080000 	movwle	r0, #32768	; 0x8000
 1d8:	01000004 	tsteq	r0, r4
 1dc:	02030149 	andeq	r0, r3, #1073741842	; 0x40000012
 1e0:	08000001 	stmdaeq	r0, {r0}
 1e4:	000004d2 	ldrdeq	r0, [r0], -r2
 1e8:	0c014901 			; <UNDEFINED> instruction: 0x0c014901
 1ec:	0000019a 	muleq	r0, sl, r1
 1f0:	00014112 	andeq	r4, r1, r2, lsl r1
 1f4:	01870100 	orreq	r0, r7, r0, lsl #2
 1f8:	0000e20a 	andeq	lr, r0, sl, lsl #4
 1fc:	b0030500 	andlt	r0, r3, r0, lsl #10
 200:	1220000e 	eorne	r0, r0, #14
 204:	000003d8 	ldrdeq	r0, [r0], -r8
 208:	0a01c201 	beq	70a14 <startup-0x1ff8f5ec>
 20c:	000000e2 	andeq	r0, r0, r2, ror #1
 210:	11780305 	cmnne	r8, r5, lsl #6
 214:	0f122000 	svceq	0x00122000
 218:	01000004 	tsteq	r0, r4
 21c:	e20a01fd 	and	r0, sl, #1073741887	; 0x4000003f
 220:	05000000 	streq	r0, [r0, #-0]
 224:	00144003 	andseq	r4, r4, r3
 228:	00331220 	eorseq	r1, r3, r0, lsr #4
 22c:	11010000 	mrsne	r0, (UNDEF: 1)
 230:	00e20a02 	rsceq	r0, r2, r2, lsl #20
 234:	03050000 	movweq	r0, #20480	; 0x5000
 238:	20001708 	andcs	r1, r0, r8, lsl #14
 23c:	0000bf12 	andeq	fp, r0, r2, lsl pc
 240:	02260100 	eoreq	r0, r6, #0, 2
 244:	0000e20a 	andeq	lr, r0, sl, lsl #4
 248:	d0030500 	andle	r0, r3, r0, lsl #10
 24c:	13200019 			; <UNDEFINED> instruction: 0x13200019
 250:	000003fb 	strdeq	r0, [r0], -fp
 254:	0f02ee01 	svceq	0x0002ee01
 258:	000001d6 	ldrdeq	r0, [r0], -r6
 25c:	1c980305 	ldcne	3, cr0, [r8], {5}
 260:	d3132000 	tstle	r3, #0
 264:	01000001 	tsteq	r0, r1
 268:	d60f02f6 			; <UNDEFINED> instruction: 0xd60f02f6
 26c:	05000001 	streq	r0, [r0, #-1]
 270:	001cbc03 	andseq	fp, ip, r3, lsl #24
 274:	01f91320 	mvnseq	r1, r0, lsr #6
 278:	00010000 	andeq	r0, r1, r0
 27c:	01d60f03 	bicseq	r0, r6, r3, lsl #30
 280:	03050000 	movweq	r0, #20480	; 0x5000
 284:	20001ce0 	andcs	r1, r0, r0, ror #25
 288:	0001e613 	andeq	lr, r1, r3, lsl r6
 28c:	030a0100 	movweq	r0, #41216	; 0xa100
 290:	0001d60f 	andeq	sp, r1, pc, lsl #12
 294:	04030500 	streq	r0, [r3], #-1280	; 0xfffffb00
 298:	1320001d 			; <UNDEFINED> instruction: 0x1320001d
 29c:	0000019b 	muleq	r0, fp, r1
 2a0:	0f031401 	svceq	0x00031401
 2a4:	000001d6 	ldrdeq	r0, [r0], -r6
 2a8:	1d280305 	stcne	3, cr0, [r8, #-20]!	; 0xffffffec
 2ac:	33132000 	tstcc	r3, #0
 2b0:	01000001 	tsteq	r0, r1
 2b4:	d60f031e 			; <UNDEFINED> instruction: 0xd60f031e
 2b8:	05000001 	streq	r0, [r0, #-1]
 2bc:	001d4c03 	andseq	r4, sp, r3, lsl #24
 2c0:	00461320 	subeq	r1, r6, r0, lsr #6
 2c4:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
 2c8:	01d60f03 	bicseq	r0, r6, r3, lsl #30
 2cc:	03050000 	movweq	r0, #20480	; 0x5000
 2d0:	20001d70 	andcs	r1, r0, r0, ror sp
 2d4:	0000d814 	andeq	sp, r0, r4, lsl r8
 2d8:	03410100 	movteq	r0, #4352	; 0x1100
 2dc:	00085e06 	andeq	r5, r8, r6, lsl #28
 2e0:	00036220 	andeq	r6, r3, r0, lsr #4
 2e4:	bc9c0100 	ldflts	f0, [ip], {0}
 2e8:	15000003 	strne	r0, [r0, #-3]
 2ec:	48010073 	stmdami	r1, {r0, r1, r4, r5, r6}
 2f0:	03bc0803 			; <UNDEFINED> instruction: 0x03bc0803
 2f4:	91020000 	mrsls	r0, (UNDEF: 2)
 2f8:	0312136c 	tsteq	r2, #108, 6	; 0xb0000001
 2fc:	4a010000 	bmi	40304 <startup-0x1ffbfcfc>
 300:	03c20703 	biceq	r0, r2, #786432	; 0xc0000
 304:	91020000 	mrsls	r0, (UNDEF: 2)
 308:	002c1358 	eoreq	r1, ip, r8, asr r3
 30c:	53010000 	movwpl	r0, #4096	; 0x1000
 310:	03d20803 	bicseq	r0, r2, #196608	; 0x30000
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	03f41366 	mvnseq	r1, #-1744830463	; 0x98000001
 31c:	54010000 	strpl	r0, [r1], #-0
 320:	00370603 	eorseq	r0, r7, r3, lsl #12
 324:	91020000 	mrsls	r0, (UNDEF: 2)
 328:	008e1368 	addeq	r1, lr, r8, ror #6
 32c:	56010000 	strpl	r0, [r1], -r0
 330:	01e31103 	mvneq	r1, r3, lsl #2
 334:	03050000 	movweq	r0, #20480	; 0x5000
 338:	20001d98 	mulcs	r0, r8, sp
 33c:	00005413 	andeq	r5, r0, r3, lsl r4
 340:	03570100 	cmpeq	r7, #0, 2
 344:	0001e311 	andeq	lr, r1, r1, lsl r3
 348:	9c030500 	cfstr32ls	mvfx0, [r3], {-0}
 34c:	1320001d 			; <UNDEFINED> instruction: 0x1320001d
 350:	0000009d 	muleq	r0, sp, r0
 354:	11035801 	tstne	r3, r1, lsl #16
 358:	000001e3 	andeq	r0, r0, r3, ror #3
 35c:	1da00305 	stcne	3, cr0, [r0, #20]!
 360:	66132000 	ldrvs	r2, [r3], -r0
 364:	01000000 	mrseq	r0, (UNDEF: 0)
 368:	e3110359 	tst	r1, #1677721601	; 0x64000001
 36c:	05000001 	streq	r0, [r0, #-1]
 370:	001da403 	andseq	sl, sp, r3, lsl #8
 374:	03951320 	orrseq	r1, r5, #32, 6	; 0x80000000
 378:	5a010000 	bpl	40380 <startup-0x1ffbfc80>
 37c:	01e31103 	mvneq	r1, r3, lsl #2
 380:	03050000 	movweq	r0, #20480	; 0x5000
 384:	20001d94 	mulcs	r0, r4, sp
 388:	0003cb13 	andeq	ip, r3, r3, lsl fp
 38c:	035b0100 	cmpeq	fp, #0, 2
 390:	0001e311 	andeq	lr, r1, r1, lsl r3
 394:	a8030500 	stmdage	r3, {r8, sl}
 398:	1320001d 			; <UNDEFINED> instruction: 0x1320001d
 39c:	00000345 	andeq	r0, r0, r5, asr #6
 3a0:	08035d01 	stmdaeq	r3, {r0, r8, sl, fp, ip, lr}
 3a4:	000003d2 	ldrdeq	r0, [r0], -r2
 3a8:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
 3ac:	00000389 	andeq	r0, r0, r9, lsl #7
 3b0:	08035e01 	stmdaeq	r3, {r0, r9, sl, fp, ip, lr}
 3b4:	000003d2 	ldrdeq	r0, [r0], -r2
 3b8:	00629102 	rsbeq	r9, r2, r2, lsl #2
 3bc:	0050040d 	subseq	r0, r0, sp, lsl #8
 3c0:	500b0000 	andpl	r0, fp, r0
 3c4:	d2000000 	andle	r0, r0, #0
 3c8:	16000003 	strne	r0, [r0], -r3
 3cc:	000000db 	ldrdeq	r0, [r0], -fp
 3d0:	02050008 	andeq	r0, r5, #8
 3d4:	00007805 	andeq	r7, r0, r5, lsl #16
 3d8:	00ac1700 	adceq	r1, ip, r0, lsl #14
 3dc:	32010000 	andcc	r0, r1, #0
 3e0:	08080603 	stmdaeq	r8, {r0, r1, r9, sl}
 3e4:	00562000 	subseq	r2, r6, r0
 3e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 3ec:	0000044f 	andeq	r0, r0, pc, asr #8
 3f0:	31746f18 	cmncc	r4, r8, lsl pc
 3f4:	03320100 	teqeq	r2, #0, 2
 3f8:	0001e321 	andeq	lr, r1, r1, lsr #6
 3fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 400:	31626f18 	cmncc	r2, r8, lsl pc
 404:	03320100 	teqeq	r2, #0, 2
 408:	0001e32e 	andeq	lr, r1, lr, lsr #6
 40c:	70910200 	addsvc	r0, r1, r0, lsl #4
 410:	32746f18 	rsbscc	r6, r4, #24, 30	; 0x60
 414:	03320100 	teqeq	r2, #0, 2
 418:	0001e33b 	andeq	lr, r1, fp, lsr r3
 41c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 420:	32626f18 	rsbcc	r6, r2, #24, 30	; 0x60
 424:	03320100 	teqeq	r2, #0, 2
 428:	0001e348 	andeq	lr, r1, r8, asr #6
 42c:	68910200 	ldmvs	r1, {r9}
 430:	00736218 	rsbseq	r6, r3, r8, lsl r2
 434:	55033201 	strpl	r3, [r3, #-513]	; 0xfffffdff
 438:	000001e3 	andeq	r0, r0, r3, ror #3
 43c:	18009102 	stmdane	r0, {r1, r8, ip, pc}
 440:	01006662 	tsteq	r0, r2, ror #12
 444:	e3610332 	cmn	r1, #-939524096	; 0xc8000000
 448:	02000001 	andeq	r0, r0, #1
 44c:	14000491 	strne	r0, [r0], #-1169	; 0xfffffb6f
 450:	0000010f 	andeq	r0, r0, pc, lsl #2
 454:	06018001 	streq	r8, [r1], -r1
 458:	200007c2 	andcs	r0, r0, r2, asr #15
 45c:	00000046 	andeq	r0, r0, r6, asr #32
 460:	04c39c01 	strbeq	r9, [r3], #3073	; 0xc01
 464:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
 468:	01800100 	orreq	r0, r0, r0, lsl #2
 46c:	0000371d 	andeq	r3, r0, sp, lsl r7
 470:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 474:	01007918 	tsteq	r0, r8, lsl r9
 478:	37240180 	strcc	r0, [r4, -r0, lsl #3]!
 47c:	02000000 	andeq	r0, r0, #0
 480:	6f187091 	svcvs	0x00187091
 484:	01007431 	tsteq	r0, r1, lsr r4
 488:	e32f0180 			; <UNDEFINED> instruction: 0xe32f0180
 48c:	02000001 	andeq	r0, r0, #1
 490:	6f186c91 	svcvs	0x00186c91
 494:	01006231 	tsteq	r0, r1, lsr r2
 498:	e33c0180 	teq	ip, #128, 2
 49c:	02000001 	andeq	r0, r0, #1
 4a0:	6f186891 	svcvs	0x00186891
 4a4:	01007432 	tsteq	r0, r2, lsr r4
 4a8:	e3490180 	movt	r0, #37248	; 0x9180
 4ac:	02000001 	andeq	r0, r0, #1
 4b0:	6f180091 	svcvs	0x00180091
 4b4:	01006232 	tsteq	r0, r2, lsr r2
 4b8:	e3560180 	cmp	r6, #128, 2
 4bc:	02000001 	andeq	r0, r0, #1
 4c0:	14000491 	strne	r0, [r0], #-1169	; 0xfffffb6f
 4c4:	000003b3 			; <UNDEFINED> instruction: 0x000003b3
 4c8:	06017901 	streq	r7, [r1], -r1, lsl #18
 4cc:	20000784 	andcs	r0, r0, r4, lsl #15
 4d0:	0000003e 	andeq	r0, r0, lr, lsr r0
 4d4:	051b9c01 	ldreq	r9, [fp, #-3073]	; 0xfffff3ff
 4d8:	6f180000 	svcvs	0x00180000
 4dc:	01007431 	tsteq	r0, r1, lsr r4
 4e0:	e31d0179 	tst	sp, #1073741854	; 0x4000001e
 4e4:	02000001 	andeq	r0, r0, #1
 4e8:	6f187491 	svcvs	0x00187491
 4ec:	01006231 	tsteq	r0, r1, lsr r2
 4f0:	e32a0179 			; <UNDEFINED> instruction: 0xe32a0179
 4f4:	02000001 	andeq	r0, r0, #1
 4f8:	6f187091 	svcvs	0x00187091
 4fc:	01007432 	tsteq	r0, r2, lsr r4
 500:	e3370179 	teq	r7, #1073741854	; 0x4000001e
 504:	02000001 	andeq	r0, r0, #1
 508:	6f186c91 	svcvs	0x00186c91
 50c:	01006232 	tsteq	r0, r2, lsr r2
 510:	e3440179 	movt	r0, #16761	; 0x4179
 514:	02000001 	andeq	r0, r0, #1
 518:	19006891 	stmdbne	r0, {r0, r4, r7, fp, sp, lr}
 51c:	000004a5 	andeq	r0, r0, r5, lsr #9
 520:	06017201 	streq	r7, [r1], -r1, lsl #4
 524:	2000074a 	andcs	r0, r0, sl, asr #14
 528:	0000003a 	andeq	r0, r0, sl, lsr r0
 52c:	27179c01 	ldrcs	r9, [r7, -r1, lsl #24]
 530:	01000003 	tsteq	r0, r3
 534:	2a06016d 	bcs	180af0 <startup-0x1fe7f510>
 538:	20200007 	eorcs	r0, r0, r7
 53c:	01000000 	mrseq	r0, (UNDEF: 0)
 540:	0005729c 	muleq	r5, ip, r2
 544:	626f1800 	rsbvs	r1, pc, #0, 16
 548:	6d01006a 	stcvs	0, cr0, [r1, #-424]	; 0xfffffe58
 54c:	01e31f01 	mvneq	r1, r1, lsl #30
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	00781874 	rsbseq	r1, r8, r4, ror r8
 558:	28016d01 	stmdacs	r1, {r0, r8, sl, fp, sp, lr}
 55c:	00000037 	andeq	r0, r0, r7, lsr r0
 560:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
 564:	6d010079 	stcvs	0, cr0, [r1, #-484]	; 0xfffffe1c
 568:	00372f01 	eorseq	r2, r7, r1, lsl #30
 56c:	91020000 	mrsls	r0, (UNDEF: 2)
 570:	9a14006c 	bls	500728 <startup-0x1faff8d8>
 574:	01000003 	tsteq	r0, r3
 578:	ee060166 	adfsz	f0, f6, f6
 57c:	3c200006 	stccc	0, cr0, [r0], #-24	; 0xffffffe8
 580:	01000000 	mrseq	r0, (UNDEF: 0)
 584:	00059a9c 	muleq	r5, ip, sl
 588:	626f1800 	rsbvs	r1, pc, #0, 16
 58c:	6601006a 	strvs	r0, [r1], -sl, rrx
 590:	01e31a01 	mvneq	r1, r1, lsl #20
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	62140074 	andsvs	r0, r4, #116	; 0x74
 59c:	01000004 	tsteq	r0, r4
 5a0:	8e060160 	adfhisz	f0, f6, f0
 5a4:	60200006 	eorvs	r0, r0, r6
 5a8:	01000000 	mrseq	r0, (UNDEF: 0)
 5ac:	0005da9c 	muleq	r5, ip, sl
 5b0:	626f1800 	rsbvs	r1, pc, #0, 16
 5b4:	6001006a 	andvs	r0, r1, sl, rrx
 5b8:	01e31b01 	mvneq	r1, r1, lsl #22
 5bc:	91020000 	mrsls	r0, (UNDEF: 2)
 5c0:	06961a6c 	ldreq	r1, [r6], ip, ror #20
 5c4:	004e2000 	subeq	r2, lr, r0
 5c8:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 5cc:	01610100 	cmneq	r1, r0, lsl #2
 5d0:	0000370a 	andeq	r3, r0, sl, lsl #14
 5d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5d8:	f2140000 	vhadd.s16	d0, d4, d0
 5dc:	01000004 	tsteq	r0, r4
 5e0:	2e06015a 	mcrcs	1, 0, r0, cr6, cr10, {2}
 5e4:	60200006 	eorvs	r0, r0, r6
 5e8:	01000000 	mrseq	r0, (UNDEF: 0)
 5ec:	00061a9c 	muleq	r6, ip, sl
 5f0:	626f1800 	rsbvs	r1, pc, #0, 16
 5f4:	5a01006a 	bpl	407a4 <startup-0x1ffbf85c>
 5f8:	01e31a01 	mvneq	r1, r1, lsl #20
 5fc:	91020000 	mrsls	r0, (UNDEF: 2)
 600:	06361a6c 	ldrteq	r1, [r6], -ip, ror #20
 604:	004e2000 	subeq	r2, lr, r0
 608:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 60c:	015b0100 	cmpeq	fp, r0, lsl #2
 610:	0000370a 	andeq	r3, r0, sl, lsl #14
 614:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 618:	541b0000 	ldrpl	r0, [fp], #-0
 61c:	01000003 	tsteq	r0, r3
 620:	3705014b 	strcc	r0, [r5, -fp, asr #2]
 624:	5a000000 	bpl	62c <startup-0x1ffff9d4>
 628:	d4200005 	strtle	r0, [r0], #-5
 62c:	01000000 	mrseq	r0, (UNDEF: 0)
 630:	0006869c 	muleq	r6, ip, r6
 634:	00051c00 	andeq	r1, r5, r0, lsl #24
 638:	4b010000 	blmi	40640 <startup-0x1ffbf9c0>
 63c:	01e31e01 	mvneq	r1, r1, lsl #28
 640:	91020000 	mrsls	r0, (UNDEF: 2)
 644:	00f11c74 	rscseq	r1, r1, r4, ror ip
 648:	4b010000 	blmi	40650 <startup-0x1ffbf9b0>
 64c:	01e33401 	mvneq	r3, r1, lsl #8
 650:	91020000 	mrsls	r0, (UNDEF: 2)
 654:	00231c70 	eoreq	r1, r3, r0, ror ip
 658:	4b010000 	blmi	40660 <startup-0x1ffbf9a0>
 65c:	01e34601 	mvneq	r4, r1, lsl #12
 660:	91020000 	mrsls	r0, (UNDEF: 2)
 664:	04221c6c 	strteq	r1, [r2], #-3180	; 0xfffff394
 668:	4b010000 	blmi	40670 <startup-0x1ffbf990>
 66c:	01e35801 	mvneq	r5, r1, lsl #16
 670:	91020000 	mrsls	r0, (UNDEF: 2)
 674:	04fe1c68 	ldrbteq	r1, [lr], #3176	; 0xc68
 678:	4b010000 	blmi	40680 <startup-0x1ffbf980>
 67c:	01e36a01 	mvneq	r6, r1, lsl #20
 680:	91020000 	mrsls	r0, (UNDEF: 2)
 684:	3b140000 	blcc	50068c <startup-0x1faff974>
 688:	01000002 	tsteq	r0, r2
 68c:	1a06012b 	bne	180b40 <startup-0x1fe7f4c0>
 690:	40200005 	eormi	r0, r0, r5
 694:	01000000 	mrseq	r0, (UNDEF: 0)
 698:	0006ad9c 	muleq	r6, ip, sp
 69c:	736d1800 	cmnvc	sp, #0, 16
 6a0:	012b0100 			; <UNDEFINED> instruction: 0x012b0100
 6a4:	0000db1f 	andeq	sp, r0, pc, lsl fp
 6a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6ac:	00821400 	addeq	r1, r2, r0, lsl #8
 6b0:	1d010000 	stcne	0, cr0, [r1, #-0]
 6b4:	04d40601 	ldrbeq	r0, [r4], #1537	; 0x601
 6b8:	00462000 	subeq	r2, r6, r0
 6bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 6c0:	000006d4 	ldrdeq	r0, [r0], -r4
 6c4:	00737518 	rsbseq	r7, r3, r8, lsl r5
 6c8:	1f011d01 	svcne	0x00011d01
 6cc:	000000db 	ldrdeq	r0, [r0], -fp
 6d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 6d4:	00046f1d 	andeq	r6, r4, sp, lsl pc
 6d8:	01140100 	tsteq	r4, r0, lsl #2
 6dc:	00049006 	andeq	r9, r4, r6
 6e0:	00004420 	andeq	r4, r0, r0, lsr #8
 6e4:	1e9c0100 	fmlnee	f0, f4, f0
 6e8:	00000480 	andeq	r0, r0, r0, lsl #9
 6ec:	0f010101 	svceq	0x00010101
 6f0:	0000071b 	andeq	r0, r0, fp, lsl r7
 6f4:	20000428 	andcs	r0, r0, r8, lsr #8
 6f8:	00000068 	andeq	r0, r0, r8, rrx
 6fc:	071b9c01 	ldreq	r9, [fp, -r1, lsl #24]
 700:	5e1a0000 	cdppl	0, 1, cr0, cr10, cr0, {0}
 704:	22200004 	eorcs	r0, r0, #4
 708:	15000000 	strne	r0, [r0, #-0]
 70c:	0c010063 	stceq	0, cr0, [r1], {99}	; 0x63
 710:	00500801 	subseq	r0, r0, r1, lsl #16
 714:	91020000 	mrsls	r0, (UNDEF: 2)
 718:	0500006f 	streq	r0, [r0, #-111]	; 0xffffff91
 71c:	02880801 	addeq	r0, r8, #65536	; 0x10000
 720:	da1f0000 	ble	7c0728 <startup-0x1f83f8d8>
 724:	01000004 	tsteq	r0, r4
 728:	03e406f9 	mvneq	r0, #261095424	; 0xf900000
 72c:	00442000 	subeq	r2, r4, r0
 730:	9c010000 	stcls	0, cr0, [r1], {-0}
 734:	00000755 	andeq	r0, r0, r5, asr r7
 738:	01006320 	tsteq	r0, r0, lsr #6
 73c:	071b1cf9 			; <UNDEFINED> instruction: 0x071b1cf9
 740:	91020000 	mrsls	r0, (UNDEF: 2)
 744:	04c1045f 	strbeq	r0, [r1], #1119	; 0x45f
 748:	fb010000 	blx	40752 <startup-0x1ffbf8ae>
 74c:	00075513 	andeq	r5, r7, r3, lsl r5
 750:	60910200 	addsvs	r0, r1, r0, lsl #4
 754:	071b0b00 	ldreq	r0, [fp, -r0, lsl #22]
 758:	07650000 	strbeq	r0, [r5, -r0]!
 75c:	db160000 	blle	580764 <startup-0x1fa7f89c>
 760:	0f000000 	svceq	0x00000000
 764:	031a2100 	tsteq	sl, #0, 2
 768:	eb010000 	bl	40770 <startup-0x1ffbf890>
 76c:	00071b0f 	andeq	r1, r7, pc, lsl #22
 770:	00037c00 	andeq	r7, r3, r0, lsl #24
 774:	00006820 	andeq	r6, r0, r0, lsr #16
 778:	ad9c0100 	ldfges	f0, [ip]
 77c:	22000007 	andcs	r0, r0, #7
 780:	0079656b 	rsbseq	r6, r9, fp, ror #10
 784:	5513ec01 	ldrpl	lr, [r3, #-3073]	; 0xfffff3ff
 788:	02000007 	andeq	r0, r0, #7
 78c:	72225891 	eorvc	r5, r2, #9502720	; 0x910000
 790:	0100776f 	tsteq	r0, pc, ror #14
 794:	003709ed 	eorseq	r0, r7, sp, ror #19
 798:	91020000 	mrsls	r0, (UNDEF: 2)
 79c:	6f63226c 	svcvs	0x0063226c
 7a0:	ed01006c 	stc	0, cr0, [r1, #-432]	; 0xfffffe50
 7a4:	0000370e 	andeq	r3, r0, lr, lsl #14
 7a8:	68910200 	ldmvs	r1, {r9}
 7ac:	03642300 	cmneq	r4, #0, 6
 7b0:	d3010000 	movwle	r0, #4096	; 0x1000
 7b4:	00032006 	andeq	r2, r3, r6
 7b8:	00005c20 	andeq	r5, r0, r0, lsr #24
 7bc:	d39c0100 	orrsle	r0, ip, #0, 2
 7c0:	20000007 	andcs	r0, r0, r7
 7c4:	00776f72 	rsbseq	r6, r7, r2, ror pc
 7c8:	db1fd301 	blle	7f53d4 <startup-0x1f80ac2c>
 7cc:	02000000 	andeq	r0, r0, #0
 7d0:	24007491 	strcs	r7, [r0], #-1169	; 0xfffffb6f
 7d4:	000000dd 	ldrdeq	r0, [r0], -sp
 7d8:	3705c701 	strcc	ip, [r5, -r1, lsl #14]
 7dc:	cc000000 	stcgt	0, cr0, [r0], {-0}
 7e0:	54200002 	strtpl	r0, [r0], #-2
 7e4:	01000000 	mrseq	r0, (UNDEF: 0)
 7e8:	0007fb9c 	muleq	r7, ip, fp
 7ec:	00632200 	rsbeq	r2, r3, r0, lsl #4
 7f0:	1b13ca01 	blne	4f2ffc <startup-0x1fb0d004>
 7f4:	02000007 	andeq	r0, r0, #7
 7f8:	1f007791 	svcne	0x00007791
 7fc:	000003a6 	andeq	r0, r0, r6, lsr #7
 800:	9406bf01 	strls	fp, [r6], #-3841	; 0xfffff0ff
 804:	38200002 	stmdacc	r0!, {r1}
 808:	01000000 	mrseq	r0, (UNDEF: 0)
 80c:	00083b9c 	muleq	r8, ip, fp
 810:	00782000 	rsbseq	r2, r8, r0
 814:	3717bf01 	ldrcc	fp, [r7, -r1, lsl #30]
 818:	02000000 	andeq	r0, r0, #0
 81c:	79206c91 	stmdbvc	r0!, {r0, r4, r7, sl, fp, sp, lr}
 820:	1ebf0100 	frdnee	f0, f7, f0
 824:	00000037 	andeq	r0, r0, r7, lsr r0
 828:	04689102 	strbteq	r9, [r8], #-258	; 0xfffffefe
 82c:	0000031f 	andeq	r0, r0, pc, lsl r3
 830:	3706c001 	strcc	ip, [r6, -r1]
 834:	02000000 	andeq	r0, r0, #0
 838:	1f007491 	svcne	0x00007491
 83c:	00000122 	andeq	r0, r0, r2, lsr #2
 840:	6206b801 	andvs	fp, r6, #65536	; 0x10000
 844:	32200002 	eorcc	r0, r0, #2
 848:	01000000 	mrseq	r0, (UNDEF: 0)
 84c:	00086d9c 	muleq	r8, ip, sp
 850:	00632000 	rsbeq	r2, r3, r0
 854:	1b25b801 	blne	96e860 <startup-0x1f6917a0>
 858:	02000007 	andeq	r0, r0, #7
 85c:	82257791 	eorhi	r7, r5, #38010880	; 0x2440000
 860:	01000000 	mrseq	r0, (UNDEF: 0)
 864:	003702a3 	eorseq	r0, r7, r3, lsr #5
 868:	00260000 	eoreq	r0, r6, r0
 86c:	05072700 	streq	r2, [r7, #-1792]	; 0xfffff900
 870:	af010000 	svcge	0x00010000
 874:	00023a06 	andeq	r3, r2, r6, lsl #20
 878:	00002820 	andeq	r2, r0, r0, lsr #16
 87c:	289c0100 	ldmcs	ip, {r8}
 880:	0000022d 	andeq	r0, r0, sp, lsr #4
 884:	f806a101 			; <UNDEFINED> instruction: 0xf806a101
 888:	42200001 	eormi	r0, r0, #1
 88c:	01000000 	mrseq	r0, (UNDEF: 0)
 890:	0008cf9c 	muleq	r8, ip, pc	; <UNPREDICTABLE>
 894:	02332900 	eorseq	r2, r3, #0, 18
 898:	a1010000 	mrsge	r0, (UNDEF: 1)
 89c:	00003706 	andeq	r3, r0, r6, lsl #14
 8a0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 8a4:	0000822a 	andeq	r8, r0, sl, lsr #4
 8a8:	02a30100 	adceq	r0, r3, #0, 2
 8ac:	00000037 	andeq	r0, r0, r7, lsr r0
 8b0:	000008b6 			; <UNDEFINED> instruction: 0x000008b6
 8b4:	241a0026 	ldrcs	r0, [sl], #-38	; 0xffffffda
 8b8:	06200002 	strteq	r0, [r0], -r2
 8bc:	25000000 	strcs	r0, [r0, #-0]
 8c0:	0000023b 	andeq	r0, r0, fp, lsr r2
 8c4:	3703a801 	strcc	sl, [r3, -r1, lsl #16]
 8c8:	26000000 	strcs	r0, [r0], -r0
 8cc:	21000000 	mrscs	r0, (UNDEF: 0)
 8d0:	000004b1 			; <UNDEFINED> instruction: 0x000004b1
 8d4:	1b0f9501 	blne	3e5ce0 <startup-0x1fc1a320>
 8d8:	b8000007 	stmdalt	r0, {r0, r1, r2}
 8dc:	40200001 	eormi	r0, r0, r1
 8e0:	01000000 	mrseq	r0, (UNDEF: 0)
 8e4:	0008f79c 	muleq	r8, ip, r7
 8e8:	00632200 	rsbeq	r2, r3, r0, lsl #4
 8ec:	50079601 	andpl	r9, r7, r1, lsl #12
 8f0:	02000000 	andeq	r0, r0, #0
 8f4:	21006f91 			; <UNDEFINED> instruction: 0x21006f91
 8f8:	00000441 	andeq	r0, r0, r1, asr #8
 8fc:	1b0f8901 	blne	3e2d08 <startup-0x1fc1d2f8>
 900:	78000007 	stmdavc	r0, {r0, r1, r2}
 904:	40200001 	eormi	r0, r0, r1
 908:	01000000 	mrseq	r0, (UNDEF: 0)
 90c:	00091f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
 910:	00632200 	rsbeq	r2, r3, r0, lsl #4
 914:	50078a01 	andpl	r8, r7, r1, lsl #20
 918:	02000000 	andeq	r0, r0, #0
 91c:	1f006f91 	svcne	0x00006f91
 920:	00000012 	andeq	r0, r0, r2, lsl r0
 924:	4e068301 	cdpmi	3, 0, cr8, cr6, cr1, {0}
 928:	2a200001 	bcs	800934 <startup-0x1f7ff6cc>
 92c:	01000000 	mrseq	r0, (UNDEF: 0)
 930:	0009459c 	muleq	r9, ip, r5
 934:	04bc2900 	ldrteq	r2, [ip], #2304	; 0x900
 938:	83010000 	movwhi	r0, #4096	; 0x1000
 93c:	00071b25 	andeq	r1, r7, r5, lsr #22
 940:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 944:	05121f00 	ldreq	r1, [r2, #-3840]	; 0xfffff100
 948:	7d010000 	stcvc	0, cr0, [r1, #-0]
 94c:	00012406 	andeq	r2, r1, r6, lsl #8
 950:	00002a20 	andeq	r2, r0, r0, lsr #20
 954:	6b9c0100 	blvs	fe700d5c <ts_state+0xde6fef6c>
 958:	29000009 	stmdbcs	r0, {r0, r3}
 95c:	00000233 	andeq	r0, r0, r3, lsr r2
 960:	1b247d01 	blne	91fd6c <startup-0x1f6e0294>
 964:	02000007 	andeq	r0, r0, #7
 968:	21007791 			; <UNDEFINED> instruction: 0x21007791
 96c:	0000042b 	andeq	r0, r0, fp, lsr #8
 970:	1b0f6f01 	blne	3dc57c <startup-0x1fc23a84>
 974:	f0000007 			; <UNDEFINED> instruction: 0xf0000007
 978:	34200000 	strtcc	r0, [r0], #-0
 97c:	01000000 	mrseq	r0, (UNDEF: 0)
 980:	0009a19c 	muleq	r9, ip, r1
 984:	00632200 	rsbeq	r2, r3, r0, lsl #4
 988:	1b107001 	blne	41c994 <startup-0x1fbe366c>
 98c:	02000007 	andeq	r0, r0, #7
 990:	6f257791 	svcvs	0x00257791
 994:	01000004 	tsteq	r0, r4
 998:	0037026b 	eorseq	r0, r7, fp, ror #4
 99c:	00260000 	eoreq	r0, r6, r0
 9a0:	048e1f00 	streq	r1, [lr], #3840	; 0xf00
 9a4:	67010000 	strvs	r0, [r1, -r0]
 9a8:	0000c006 	andeq	ip, r0, r6
 9ac:	00003020 	andeq	r3, r0, r0, lsr #32
 9b0:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
 9b4:	29000009 	stmdbcs	r0, {r0, r3}
 9b8:	0000047b 	andeq	r0, r0, fp, ror r4
 9bc:	1b2b6701 	blne	ada5c8 <startup-0x1f525a38>
 9c0:	02000007 	andeq	r0, r0, #7
 9c4:	6f257791 	svcvs	0x00257791
 9c8:	01000004 	tsteq	r0, r4
 9cc:	0037026b 	eorseq	r0, r7, fp, ror #4
 9d0:	00260000 	eoreq	r0, r6, r0
 9d4:	02472300 	subeq	r2, r7, #0, 6
 9d8:	60010000 	andvs	r0, r1, r0
 9dc:	00007806 	andeq	r7, r0, r6, lsl #16
 9e0:	00004820 	andeq	r4, r0, r0, lsr #16
 9e4:	069c0100 	ldreq	r0, [ip], r0, lsl #2
 9e8:	2000000a 	andcs	r0, r0, sl
 9ec:	60010078 	andvs	r0, r1, r8, ror r0
 9f0:	00071b29 	andeq	r1, r7, r9, lsr #22
 9f4:	6f910200 	svcvs	0x00910200
 9f8:	01006322 	tsteq	r0, r2, lsr #6
 9fc:	00500761 	subseq	r0, r0, r1, ror #14
 a00:	91020000 	mrsls	r0, (UNDEF: 2)
 a04:	70230077 	eorvc	r0, r3, r7, ror r0
 a08:	01000001 	tsteq	r0, r1
 a0c:	0040065a 	subeq	r0, r0, sl, asr r6
 a10:	00382000 	eorseq	r2, r8, r0
 a14:	9c010000 	stcls	0, cr0, [r1], {-0}
 a18:	00000a37 	andeq	r0, r0, r7, lsr sl
 a1c:	01007820 	tsteq	r0, r0, lsr #16
 a20:	071b275a 			; <UNDEFINED> instruction: 0x071b275a
 a24:	91020000 	mrsls	r0, (UNDEF: 2)
 a28:	0063226f 	rsbeq	r2, r3, pc, ror #4
 a2c:	50075b01 	andpl	r5, r7, r1, lsl #22
 a30:	02000000 	andeq	r0, r0, #0
 a34:	2b007791 	blcs	1e880 <startup-0x1ffe1780>
 a38:	000003c2 	andeq	r0, r0, r2, asr #7
 a3c:	28065601 	stmdacs	r6, {r0, r9, sl, ip, lr}
 a40:	18200000 	stmdane	r0!, {}	; <UNPREDICTABLE>
 a44:	01000000 	mrseq	r0, (UNDEF: 0)
 a48:	0375239c 	cmneq	r5, #156, 6	; 0x70000002
 a4c:	51010000 	mrspl	r0, (UNDEF: 1)
 a50:	00002206 	andeq	r2, r0, r6, lsl #4
 a54:	00000620 	andeq	r0, r0, r0, lsr #12
 a58:	789c0100 	ldmvc	ip, {r8}
 a5c:	2000000a 	andcs	r0, r0, sl
 a60:	51010078 	tstpl	r1, r8, ror r0
 a64:	0000371e 	andeq	r3, r0, lr, lsl r7
 a68:	20500100 	subscs	r0, r0, r0, lsl #2
 a6c:	51010079 	tstpl	r1, r9, ror r0
 a70:	00003725 	andeq	r3, r0, r5, lsr #14
 a74:	00510100 	subseq	r0, r1, r0, lsl #2
 a78:	00021b23 	andeq	r1, r2, r3, lsr #22
 a7c:	064b0100 	strbeq	r0, [fp], -r0, lsl #2
 a80:	2000001c 	andcs	r0, r0, ip, lsl r0
 a84:	00000006 	andeq	r0, r0, r6
 a88:	0aa79c01 	beq	fe9e7a94 <ts_state+0xde9e5ca4>
 a8c:	78200000 	stmdavc	r0!, {}	; <UNPREDICTABLE>
 a90:	1c4b0100 	stfnee	f0, [fp], {-0}
 a94:	00000037 	andeq	r0, r0, r7, lsr r0
 a98:	79205001 	stmdbvc	r0!, {r0, ip, lr}
 a9c:	234b0100 	movtcs	r0, #45312	; 0xb100
 aa0:	00000037 	andeq	r0, r0, r7, lsr r0
 aa4:	2b005101 	blcs	14eb0 <startup-0x1ffeb150>
 aa8:	000000fa 	strdeq	r0, [r0], -sl
 aac:	16064501 	strne	r4, [r6], -r1, lsl #10
 ab0:	06200000 	strteq	r0, [r0], -r0
 ab4:	01000000 	mrseq	r0, (UNDEF: 0)
 ab8:	01572b9c 			; <UNDEFINED> instruction: 0x01572b9c
 abc:	3f010000 	svccc	0x00010000
 ac0:	00001006 	andeq	r1, r0, r6
 ac4:	00000620 	andeq	r0, r0, r0, lsr #12
 ac8:	2b9c0100 	blcs	fe700ed0 <ts_state+0xde6ff0e0>
 acc:	000004ca 	andeq	r0, r0, sl, asr #9
 ad0:	00063601 	andeq	r3, r6, r1, lsl #12
 ad4:	0c200000 	stceq	0, cr0, [r0], #-0
 ad8:	01000000 	mrseq	r0, (UNDEF: 0)
 adc:	Address 0x00000adc is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  24:	24030000 	strcs	r0, [r3], #-0
  28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  2c:	0008030b 	andeq	r0, r8, fp, lsl #6
  30:	00340400 	eorseq	r0, r4, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	0b390b3b 	bleq	e42d2c <startup-0x1f1bd2d4>
  3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  40:	24050000 	strcs	r0, [r5], #-0
  44:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  48:	000e030b 	andeq	r0, lr, fp, lsl #6
  4c:	01130600 	tsteq	r3, r0, lsl #12
  50:	0b3a0b0b 	bleq	e82c84 <startup-0x1f17d37c>
  54:	0b39053b 	bleq	e41548 <startup-0x1f1beab8>
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03000d07 	movweq	r0, #3335	; 0xd07
  60:	3b0b3a08 	blcc	2ce888 <startup-0x1fd31778>
  64:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  68:	000b3813 	andeq	r3, fp, r3, lsl r8
  6c:	00160800 	andseq	r0, r6, r0, lsl #16
  70:	0b3a0e03 	bleq	e83884 <startup-0x1f17c77c>
  74:	0b39053b 	bleq	e41568 <startup-0x1f1bea98>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	0b011309 	bleq	44ca8 <startup-0x1ffbb358>
  80:	3b0b3a05 	blcc	2ce89c <startup-0x1fd31764>
  84:	010b3905 	tsteq	fp, r5, lsl #18
  88:	0a000013 	beq	dc <startup-0x1fffff24>
  8c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  94:	13490b39 	movtne	r0, #39737	; 0x9b39
  98:	00000b38 	andeq	r0, r0, r8, lsr fp
  9c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  a0:	00130113 	andseq	r0, r3, r3, lsl r1
  a4:	00210c00 	eoreq	r0, r1, r0, lsl #24
  a8:	052f1349 	streq	r1, [pc, #-841]!	; fffffd67 <ts_state+0xdfffdf77>
  ac:	0f0d0000 	svceq	0x000d0000
  b0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  b4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  bc:	0b3a0b0b 	bleq	e82cf0 <startup-0x1f17d310>
  c0:	0b39053b 	bleq	e415b4 <startup-0x1f1bea4c>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
  cc:	00130119 	andseq	r0, r3, r9, lsl r1
  d0:	00051000 	andeq	r1, r5, r0
  d4:	00001349 	andeq	r1, r0, r9, asr #6
  d8:	27011511 	smladcs	r1, r1, r5, r1
  dc:	01134919 	tsteq	r3, r9, lsl r9
  e0:	12000013 	andne	r0, r0, #19
  e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  ec:	13490b39 	movtne	r0, #39737	; 0x9b39
  f0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  f4:	34130000 	ldrcc	r0, [r3], #-0
  f8:	3a0e0300 	bcc	380d00 <startup-0x1fc7f300>
  fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 100:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 104:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 108:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 10c:	0b3a0e03 	bleq	e83920 <startup-0x1f17c6e0>
 110:	0b39053b 	bleq	e41604 <startup-0x1f1be9fc>
 114:	01111927 	tsteq	r1, r7, lsr #18
 118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 11c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 120:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 124:	08030034 	stmdaeq	r3, {r2, r4, r5}
 128:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 12c:	13490b39 	movtne	r0, #39737	; 0x9b39
 130:	00001802 	andeq	r1, r0, r2, lsl #16
 134:	49002116 	stmdbmi	r0, {r1, r2, r4, r8, sp}
 138:	000b2f13 	andeq	r2, fp, r3, lsl pc
 13c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 140:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 148:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 14c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 150:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 154:	00130119 	andseq	r0, r3, r9, lsl r1
 158:	00051800 	andeq	r1, r5, r0, lsl #16
 15c:	0b3a0803 	bleq	e82170 <startup-0x1f17de90>
 160:	0b39053b 	bleq	e41654 <startup-0x1f1be9ac>
 164:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 168:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 16c:	03193f00 	tsteq	r9, #0, 30
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	110b3905 	tstne	fp, r5, lsl #18
 178:	40061201 	andmi	r1, r6, r1, lsl #4
 17c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 180:	0b1a0000 	bleq	680188 <startup-0x1f97fe78>
 184:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 188:	1b000006 	blne	1a8 <startup-0x1ffffe58>
 18c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b39053b 	bleq	e41688 <startup-0x1f1be978>
 198:	13491927 	movtne	r1, #39207	; 0x9927
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1a4:	00130119 	andseq	r0, r3, r9, lsl r1
 1a8:	00051c00 	andeq	r1, r5, r0, lsl #24
 1ac:	0b3a0e03 	bleq	e839c0 <startup-0x1f17c640>
 1b0:	0b39053b 	bleq	e416a4 <startup-0x1f1be95c>
 1b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1b8:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1bc:	03193f00 	tsteq	r9, #0, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 1c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1cc:	97184006 	ldrls	r4, [r8, -r6]
 1d0:	00001942 	andeq	r1, r0, r2, asr #18
 1d4:	3f012e1e 	svccc	0x00012e1e
 1d8:	3a0e0319 	bcc	380e44 <startup-0x1fc7f1bc>
 1dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1e8:	96184006 	ldrls	r4, [r8], -r6
 1ec:	13011942 	movwne	r1, #6466	; 0x1942
 1f0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1f4:	03193f01 	tsteq	r9, #1, 30
 1f8:	3b0b3a0e 	blcc	2cea38 <startup-0x1fd315c8>
 1fc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 200:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 204:	96184006 	ldrls	r4, [r8], -r6
 208:	13011942 	movwne	r1, #6466	; 0x1942
 20c:	05200000 	streq	r0, [r0, #-0]!
 210:	3a080300 	bcc	200e18 <startup-0x1fdff1e8>
 214:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 218:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 21c:	21000018 	tstcs	r0, r8, lsl r0
 220:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 224:	0b3a0e03 	bleq	e83a38 <startup-0x1f17c5c8>
 228:	0b390b3b 	bleq	e42f1c <startup-0x1f1bd0e4>
 22c:	13491927 	movtne	r1, #39207	; 0x9927
 230:	06120111 			; <UNDEFINED> instruction: 0x06120111
 234:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 238:	00130119 	andseq	r0, r3, r9, lsl r1
 23c:	00342200 	eorseq	r2, r4, r0, lsl #4
 240:	0b3a0803 	bleq	e82254 <startup-0x1f17ddac>
 244:	0b390b3b 	bleq	e42f38 <startup-0x1f1bd0c8>
 248:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 24c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 250:	03193f01 	tsteq	r9, #1, 30
 254:	3b0b3a0e 	blcc	2cea94 <startup-0x1fd3156c>
 258:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 25c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 260:	97184006 	ldrls	r4, [r8, -r6]
 264:	13011942 	movwne	r1, #6466	; 0x1942
 268:	2e240000 	cdpcs	0, 2, cr0, cr4, cr0, {0}
 26c:	03193f01 	tsteq	r9, #1, 30
 270:	3b0b3a0e 	blcc	2ceab0 <startup-0x1fd31550>
 274:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 278:	11134919 	tstne	r3, r9, lsl r9
 27c:	40061201 	andmi	r1, r6, r1, lsl #4
 280:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 284:	00001301 	andeq	r1, r0, r1, lsl #6
 288:	3f012e25 	svccc	0x00012e25
 28c:	3a0e0319 	bcc	380ef8 <startup-0x1fc7f108>
 290:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 298:	26000019 			; <UNDEFINED> instruction: 0x26000019
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	3f002e27 	svccc	0x00002e27
 2a4:	3a0e0319 	bcc	380f10 <startup-0x1fc7f0f0>
 2a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	1119270b 	tstne	r9, fp, lsl #14
 2b0:	40061201 	andmi	r1, r6, r1, lsl #4
 2b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2b8:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
 2bc:	03193f01 	tsteq	r9, #1, 30
 2c0:	3b0b3a0e 	blcc	2ceb00 <startup-0x1fd31500>
 2c4:	110b390b 	tstne	fp, fp, lsl #18
 2c8:	40061201 	andmi	r1, r6, r1, lsl #4
 2cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d0:	00001301 	andeq	r1, r0, r1, lsl #6
 2d4:	03000529 	movweq	r0, #1321	; 0x529
 2d8:	3b0b3a0e 	blcc	2ceb18 <startup-0x1fd314e8>
 2dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2e0:	00180213 	andseq	r0, r8, r3, lsl r2
 2e4:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
 2e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ec:	0b3b0b3a 	bleq	ec2fdc <startup-0x1f13d024>
 2f0:	13490b39 	movtne	r0, #39737	; 0x9b39
 2f4:	1301193c 	movwne	r1, #6460	; 0x193c
 2f8:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
 2fc:	03193f00 	tsteq	r9, #0, 30
 300:	3b0b3a0e 	blcc	2ceb40 <startup-0x1fd314c0>
 304:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 308:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 30c:	97184006 	ldrls	r4, [r8, -r6]
 310:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000bb0 			; <UNDEFINED> instruction: 0x00000bb0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000bc0 	andcs	r0, r0, r0, asr #23
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000006cd 	andeq	r0, r0, sp, asr #13
   4:	00420003 	subeq	r0, r2, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6b7a6f72 	blvs	1e9bdf4 <startup-0x1e16420c>
  28:	65442f68 	strbvs	r2, [r4, #-3944]	; 0xfffff098
  2c:	6f746b73 	svcvs	0x00746b73
  30:	4f4d2f70 	svcmi	0x004d2f70
  34:	616c2f50 	cmnvs	ip, r0, asr pc
  38:	2d356262 	lfmcs	f6, 4, [r5, #-392]!	; 0xfffffe78
  3c:	74730000 	ldrbtvc	r0, [r3], #-0
  40:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  44:	00632e70 	rsbeq	r2, r3, r0, ror lr
  48:	00000001 	andeq	r0, r0, r1
  4c:	05000105 	streq	r0, [r0, #-261]	; 0xfffffefb
  50:	00000002 	andeq	r0, r0, r2
  54:	01360320 	teqeq	r6, r0, lsr #6
  58:	2f212113 	svccs	0x00212113
  5c:	00030221 	andeq	r0, r3, r1, lsr #4
  60:	1e050101 	adfnes	f0, f5, f1
  64:	10020500 	andne	r0, r2, r0, lsl #10
  68:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  6c:	0505013e 	streq	r0, [r5, #-318]	; 0xfffffec2
  70:	01051321 	tsteq	r5, r1, lsr #6
  74:	23200521 			; <UNDEFINED> instruction: 0x23200521
  78:	13210505 			; <UNDEFINED> instruction: 0x13210505
  7c:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
  80:	05052325 	streq	r2, [r5, #-805]	; 0xfffffcdb
  84:	01051321 	tsteq	r5, r1, lsr #6
  88:	23270521 			; <UNDEFINED> instruction: 0x23270521
  8c:	13210505 			; <UNDEFINED> instruction: 0x13210505
  90:	05210105 	streq	r0, [r1, #-261]!	; 0xfffffefb
  94:	05052215 	streq	r2, [r5, #-533]	; 0xfffffdeb
  98:	2011052f 	andscs	r0, r1, pc, lsr #10
  9c:	052f0105 	streq	r0, [pc, #-261]!	; ffffff9f <ts_state+0xdfffe1af>
  a0:	06057629 	streq	r7, [r5], -r9, lsr #12
  a4:	20040568 	andcs	r0, r4, r8, ror #10
  a8:	054b1005 	strbeq	r1, [fp, #-5]
  ac:	10056602 	andne	r6, r5, r2, lsl #12
  b0:	4b010520 	blmi	41538 <startup-0x1ffbeac8>
  b4:	05682b05 	strbeq	r2, [r8, #-2821]!	; 0xfffff4fb
  b8:	04056806 	streq	r6, [r5], #-2054	; 0xfffff7fa
  bc:	4b080520 	blmi	201544 <startup-0x1fdfeabc>
  c0:	059e0405 	ldreq	r0, [lr, #1029]	; 0x405
  c4:	10052f02 	andne	r2, r5, r2, lsl #30
  c8:	67010520 	strvs	r0, [r1, -r0, lsr #10]
  cc:	05683005 	strbeq	r3, [r8, #-5]!
  d0:	053d6702 	ldreq	r6, [sp, #-1794]!	; 0xfffff8fe
  d4:	02052011 	andeq	r2, r5, #17
  d8:	01053d3d 	tsteq	r5, sp, lsr sp
  dc:	692a052f 	stmdbvs	sl!, {r0, r1, r2, r3, r5, r8, sl}
  e0:	3e3e0205 	cdpcc	2, 3, cr0, cr14, cr5, {0}
  e4:	3006052f 	andcc	r0, r6, pc, lsr #10
  e8:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
  ec:	09053e02 	stmdbeq	r5, {r1, r9, sl, fp, ip, sp}
  f0:	2f01053e 	svccs	0x0001053e
  f4:	05762c05 	ldrbeq	r2, [r6, #-3077]!	; 0xfffff3fb
  f8:	3d3d6702 	ldccc	7, cr6, [sp, #-8]!
  fc:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 100:	02054c2a 	andeq	r4, r5, #10752	; 0x2a00
 104:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 108:	26055901 	strcs	r5, [r5], -r1, lsl #18
 10c:	3e02054c 	cfsh32cc	mvfx0, mvfx2, #44
 110:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 114:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 118:	02053d06 	andeq	r3, r5, #384	; 0x180
 11c:	200e055a 	andcs	r0, lr, sl, asr r5
 120:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 124:	24052f01 	strcs	r2, [r5], #-3841	; 0xfffff0ff
 128:	3e0205a0 	cfsh32cc	mvfx0, mvfx2, #-48
 12c:	05200e05 	streq	r0, [r0, #-3589]!	; 0xfffff1fb
 130:	053d2f02 	ldreq	r2, [sp, #-3842]!	; 0xfffff0fe
 134:	02053d06 	andeq	r3, r5, #384	; 0x180
 138:	200e055a 	andcs	r0, lr, sl, asr r5
 13c:	05300905 	ldreq	r0, [r0, #-2309]!	; 0xfffff6fb
 140:	1c052f01 	stcne	15, cr2, [r5], {1}
 144:	4b0705a0 	blmi	1c17cc <startup-0x1fe3e834>
 148:	02000905 	andeq	r0, r0, #81920	; 0x14000
 14c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 150:	04020007 	streq	r0, [r2], #-7
 154:	02054a01 	andeq	r4, r5, #4096	; 0x1000
 158:	04053e2f 	streq	r3, [r5], #-3631	; 0xfffff1d1
 15c:	3d03055a 	cfstr32cc	mvfx0, [r3, #-360]	; 0xfffffe98
 160:	05410105 	strbeq	r0, [r1, #-261]	; 0xfffffefb
 164:	01051e03 	tsteq	r5, r3, lsl #28
 168:	4c16053e 	cfldr32mi	mvfx0, [r6], {62}	; 0x3e
 16c:	3d2f0205 	sfmcc	f0, 4, [pc, #-20]!	; 160 <startup-0x1ffffea0>
 170:	053d3d3e 	ldreq	r3, [sp, #-3390]!	; 0xfffff2c2
 174:	27053d01 	strcs	r3, [r5, -r1, lsl #26]
 178:	6707053e 	smladxvs	r7, lr, r5, r0
 17c:	02000905 	andeq	r0, r0, #81920	; 0x14000
 180:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 184:	04020007 	streq	r0, [r2], #-7
 188:	02054a01 	andeq	r4, r5, #4096	; 0x1000
 18c:	01053e2f 	tsteq	r5, pc, lsr #28
 190:	4c200559 	cfstr32mi	mvfx0, [r0], #-356	; 0xfffffe9c
 194:	05590605 	ldrbeq	r0, [r9, #-1541]	; 0xfffff9fb
 198:	0b053d05 	bleq	14f5b4 <startup-0x1feb0a4c>
 19c:	3e17053d 	mrccc	5, 0, r0, cr7, cr13, {1}
 1a0:	05660205 	strbeq	r0, [r6, #-517]!	; 0xfffffdfb
 1a4:	15054b01 	strne	r4, [r5, #-2817]	; 0xfffff4ff
 1a8:	4009054c 	andmi	r0, r9, ip, asr #10
 1ac:	05200705 	streq	r0, [r0, #-1797]!	; 0xfffff8fb
 1b0:	08053d0b 	stmdaeq	r5, {r0, r1, r3, r8, sl, fp, ip, sp}
 1b4:	0019054a 	andseq	r0, r9, sl, asr #10
 1b8:	20010402 	andcs	r0, r1, r2, lsl #8
 1bc:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff6bf <ts_state+0xdfffd8cf>
 1c0:	19054a08 	stmdbne	r5, {r3, r9, fp, lr}
 1c4:	01040200 	mrseq	r0, R12_usr
 1c8:	2f0b0520 	svccs	0x000b0520
 1cc:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1d0:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 1d4:	0b052001 	bleq	1481e0 <startup-0x1feb7e20>
 1d8:	4a08052f 	bmi	20169c <startup-0x1fdfe964>
 1dc:	02001905 	andeq	r1, r0, #81920	; 0x14000
 1e0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 1e4:	01052f0c 	tsteq	r5, ip, lsl #30
 1e8:	68240521 	stmdavs	r4!, {r0, r5, r8, sl}
 1ec:	05cc0d05 	strbeq	r0, [ip, #3333]	; 0xd05
 1f0:	0d05201c 	stceq	0, cr2, [r5, #-112]	; 0xffffff90
 1f4:	1c05222f 	sfmne	f2, 4, [r5], {47}	; 0x2f
 1f8:	2f0d0520 	svccs	0x000d0520
 1fc:	201c0522 	andscs	r0, ip, r2, lsr #10
 200:	222f0d05 	eorcs	r0, pc, #320	; 0x140
 204:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 208:	05222f0d 	streq	r2, [r2, #-3853]!	; 0xfffff0f3
 20c:	0d05201c 	stceq	0, cr2, [r5, #-112]	; 0xffffff90
 210:	1c05222f 	sfmne	f2, 4, [r5], {47}	; 0x2f
 214:	2f0d0520 	svccs	0x000d0520
 218:	05220105 	streq	r0, [r2, #-261]!	; 0xfffffefb
 21c:	1305921a 	movwne	r9, #21018	; 0x521a
 220:	680e053d 	stmdavs	lr, {r0, r2, r3, r4, r5, r8, sl}
 224:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 228:	14052109 	strne	r2, [r5], #-265	; 0xfffffef7
 22c:	4a0c054b 	bmi	301760 <startup-0x1fcfe8a0>
 230:	053d0d05 	ldreq	r0, [sp, #-3333]!	; 0xfffff2fb
 234:	1a053d21 	bne	14f6c0 <startup-0x1feb0940>
 238:	202d052e 	eorcs	r0, sp, lr, lsr #10
 23c:	052e2605 	streq	r2, [lr, #-1541]!	; 0xfffff9fb
 240:	20052017 	andcs	r2, r5, r7, lsl r0
 244:	02040200 	andeq	r0, r4, #0, 4
 248:	00050538 	andeq	r0, r5, r8, lsr r5
 24c:	3c010402 	cfstrscc	mvf0, [r1], {2}
 250:	3d0c0543 	cfstr32cc	mvfx0, [ip, #-268]	; 0xfffffef4
 254:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
 258:	05210104 	streq	r0, [r1, #-260]!	; 0xfffffefc
 25c:	0805761f 	stmdaeq	r5, {r0, r1, r2, r3, r4, r9, sl, ip, sp, lr}
 260:	00110567 	andseq	r0, r1, r7, ror #10
 264:	4a010402 	bmi	41274 <startup-0x1ffbed8c>
 268:	053d1305 	ldreq	r1, [sp, #-773]!	; 0xfffffcfb
 26c:	0505761d 	streq	r7, [r5, #-1565]	; 0xfffff9e3
 270:	201d052e 	andscs	r0, sp, lr, lsr #10
 274:	052e1305 	streq	r1, [lr, #-773]!	; 0xfffffcfb
 278:	22052201 	andcs	r2, r5, #268435456	; 0x10000000
 27c:	3e070584 	cfsh32cc	mvfx0, mvfx7, #-60
 280:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 284:	07052f03 	streq	r2, [r5, -r3, lsl #30]
 288:	3c05053d 	cfstr32cc	mvfx0, [r5], {61}	; 0x3d
 28c:	02001e05 	andeq	r1, r0, #5, 28	; 0x50
 290:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 294:	0a054b11 	beq	152ee0 <startup-0x1fead120>
 298:	3206053d 	andcc	r0, r6, #255852544	; 0xf400000
 29c:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 2a0:	08052f0c 	stmdaeq	r5, {r2, r3, r8, r9, sl, fp, sp}
 2a4:	2e050559 	cfrshl32cs	mvfx5, mvfx9, r0
 2a8:	054b0d05 	strbeq	r0, [fp, #-3333]	; 0xfffff2fb
 2ac:	01053d0b 	tsteq	r5, fp, lsl #26
 2b0:	8417053f 	ldrhi	r0, [r7], #-1343	; 0xfffffac1
 2b4:	052f0505 	streq	r0, [pc, #-1285]!	; fffffdb7 <ts_state+0xdfffdfc7>
 2b8:	0505200f 	streq	r2, [r5, #-15]
 2bc:	200f052f 	andcs	r0, pc, pc, lsr #10
 2c0:	052f0505 	streq	r0, [pc, #-1285]!	; fffffdc3 <ts_state+0xdfffdfd3>
 2c4:	0505200e 	streq	r2, [r5, #-14]
 2c8:	200f052f 	andcs	r0, pc, pc, lsr #10
 2cc:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff8cf <ts_state+0xdfffdadf>
 2d0:	0402000d 	streq	r0, [r2], #-13
 2d4:	17052001 	strne	r2, [r5, -r1]
 2d8:	01040200 	mrseq	r0, R12_usr
 2dc:	000a052e 	andeq	r0, sl, lr, lsr #10
 2e0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2e4:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
 2e8:	0105200f 	tsteq	r5, pc
 2ec:	a022052f 	eorge	r0, r2, pc, lsr #10
 2f0:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
 2f4:	0a058307 	beq	160f18 <startup-0x1fe9f0e8>
 2f8:	2109053e 	tstcs	r9, lr, lsr r5
 2fc:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff3d5 <ts_state+0xdfffd5e5>
 300:	0a052f0b 	beq	14bf34 <startup-0x1feb40cc>
 304:	43010537 	movwmi	r0, #5431	; 0x1537
 308:	055a2205 	ldrbeq	r2, [sl, #-517]	; 0xfffffdfb
 30c:	07054c08 	streq	r4, [r5, -r8, lsl #24]
 310:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 314:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 318:	0a05590b 	beq	15674c <startup-0x1fea98b4>
 31c:	4001053a 	andmi	r0, r1, sl, lsr r5
 320:	17037305 	strne	r7, [r3, -r5, lsl #6]
 324:	76230558 			; <UNDEFINED> instruction: 0x76230558
 328:	052e3805 	streq	r3, [lr, #-2053]!	; 0xfffff7fb
 32c:	2a052e3d 	bcs	14bc28 <startup-0x1feb43d8>
 330:	200d0520 	andcs	r0, sp, r0, lsr #10
 334:	052e0405 	streq	r0, [lr, #-1029]!	; 0xfffffbfb
 338:	04020056 	streq	r0, [r2], #-86	; 0xffffffaa
 33c:	67052e01 	strvs	r2, [r5, -r1, lsl #28]
 340:	01040200 	mrseq	r0, R12_usr
 344:	006c052e 	rsbeq	r0, ip, lr, lsr #10
 348:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 34c:	02005d05 	andeq	r5, r0, #320	; 0x140
 350:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 354:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
 358:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 35c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 360:	12052e01 	andne	r2, r5, #1, 28
 364:	2e24052f 	cfsh64cs	mvdx0, mvdx4, #31
 368:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
 36c:	2b052e3a 	blcs	14bc5c <startup-0x1feb43a4>
 370:	20050520 	andcs	r0, r5, r0, lsr #10
 374:	02004a05 	andeq	r4, r0, #20480	; 0x5000
 378:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 37c:	2c052f17 	stccs	15, cr2, [r5], {23}
 380:	2e31052e 	cdpcs	5, 3, cr0, cr1, cr14, {1}
 384:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
 388:	4805203d 	stmdami	r5, {r0, r2, r3, r4, r5, sp}
 38c:	2e0a0520 	cfsh32cs	mvfx0, mvfx10, #16
 390:	02005705 	andeq	r5, r0, #1310720	; 0x140000
 394:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 398:	28052f0f 	stmdacs	r5, {r0, r1, r2, r3, r8, r9, sl, fp, sp}
 39c:	2e3d0531 	mrccs	5, 1, r0, cr13, cr1, {1}
 3a0:	052e4205 	streq	r4, [lr, #-517]!	; 0xfffffdfb
 3a4:	1205202f 	andne	r2, r5, #47	; 0x2f
 3a8:	2e090520 	cfsh32cs	mvfx0, mvfx9, #16
 3ac:	02005b05 	andeq	r5, r0, #5120	; 0x1400
 3b0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3b4:	0402006c 	streq	r0, [r2], #-108	; 0xffffff94
 3b8:	71052e01 	tstvc	r5, r1, lsl #28
 3bc:	01040200 	mrseq	r0, R12_usr
 3c0:	0062052e 	rsbeq	r0, r2, lr, lsr #10
 3c4:	20010402 	andcs	r0, r1, r2, lsl #8
 3c8:	00018705 	andeq	r8, r1, r5, lsl #14
 3cc:	20010402 	andcs	r0, r1, r2, lsl #8
 3d0:	02004e05 	andeq	r4, r0, #5, 28	; 0x50
 3d4:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3d8:	24052f12 	strcs	r2, [r5], #-3858	; 0xfffff0ee
 3dc:	2e35052e 	cdpcs	5, 3, cr0, cr5, cr14, {1}
 3e0:	052e3a05 	streq	r3, [lr, #-2565]!	; 0xfffff5fb
 3e4:	0505202b 	streq	r2, [r5, #-43]	; 0xffffffd5
 3e8:	004a0520 	subeq	r0, sl, r0, lsr #10
 3ec:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3f0:	052f1705 	streq	r1, [pc, #-1797]!	; fffffcf3 <ts_state+0xdfffdf03>
 3f4:	31052e2c 	tstcc	r5, ip, lsr #28
 3f8:	201e052e 	andscs	r0, lr, lr, lsr #10
 3fc:	05203d05 	streq	r3, [r0, #-3333]!	; 0xfffff2fb
 400:	0a052048 	beq	148528 <startup-0x1feb7ad8>
 404:	0057052e 	subseq	r0, r7, lr, lsr #10
 408:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 40c:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff50f <ts_state+0xdfffd71f>
 410:	01052f10 	tsteq	r5, r0, lsl pc
 414:	4c1e0521 	cfldr32mi	mvfx0, [lr], {33}	; 0x21
 418:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 41c:	18052e02 	stmdane	r5, {r1, r9, sl, fp, sp}
 420:	03040200 	movweq	r0, #16896	; 0x4200
 424:	00240521 	eoreq	r0, r4, r1, lsr #10
 428:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 42c:	02002c05 	andeq	r2, r0, #1280	; 0x500
 430:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 434:	04020003 	streq	r0, [r2], #-3
 438:	37052e03 	strcc	r2, [r5, -r3, lsl #28]
 43c:	03040200 	movweq	r0, #16896	; 0x4200
 440:	00430520 	subeq	r0, r3, r0, lsr #10
 444:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 448:	02004b05 	andeq	r4, r0, #5120	; 0x1400
 44c:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 450:	04020003 	streq	r0, [r2], #-3
 454:	2b052e03 	blcs	14bc68 <startup-0x1feb4398>
 458:	03040200 	movweq	r0, #16896	; 0x4200
 45c:	00180549 	andseq	r0, r8, r9, asr #10
 460:	3c010402 	cfstrscc	mvf0, [r1], {2}
 464:	02001d05 	andeq	r1, r0, #320	; 0x140
 468:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 46c:	04020002 	streq	r0, [r2], #-2
 470:	01052001 	tsteq	r5, r1
 474:	5a1f053f 	bpl	7c1978 <startup-0x1f83e688>
 478:	054b0a05 	strbeq	r0, [fp, #-2565]	; 0xfffff5fb
 47c:	1a052e02 	bne	14bc8c <startup-0x1feb4374>
 480:	03040200 	movweq	r0, #16896	; 0x4200
 484:	00260521 	eoreq	r0, r6, r1, lsr #10
 488:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 48c:	02002e05 	andeq	r2, r0, #5, 28	; 0x50
 490:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 494:	04020003 	streq	r0, [r2], #-3
 498:	39052e03 	stmdbcc	r5, {r0, r1, r9, sl, fp, sp}
 49c:	03040200 	movweq	r0, #16896	; 0x4200
 4a0:	00450520 	subeq	r0, r5, r0, lsr #10
 4a4:	2e030402 	cdpcs	4, 0, cr0, cr3, cr2, {0}
 4a8:	02004d05 	andeq	r4, r0, #320	; 0x140
 4ac:	05740304 	ldrbeq	r0, [r4, #-772]!	; 0xfffffcfc
 4b0:	04020003 	streq	r0, [r2], #-3
 4b4:	2b052e03 	blcs	14bcc8 <startup-0x1feb4338>
 4b8:	03040200 	movweq	r0, #16896	; 0x4200
 4bc:	00180549 	andseq	r0, r8, r9, asr #10
 4c0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 4c4:	02001d05 	andeq	r1, r0, #320	; 0x140
 4c8:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 4cc:	04020002 	streq	r0, [r2], #-2
 4d0:	01052001 	tsteq	r5, r1
 4d4:	5a1e053f 	bpl	7819d8 <startup-0x1f87e628>
 4d8:	054b0205 	strbeq	r0, [fp, #-517]	; 0xfffffdfb
 4dc:	12054b0c 	andne	r4, r5, #12, 22	; 0x3000
 4e0:	2e0c052e 	cfsh32cs	mvfx0, mvfx12, #30
 4e4:	2e12053d 	mrccs	5, 0, r0, cr2, cr13, {1}
 4e8:	052e0c05 	streq	r0, [lr, #-3077]!	; 0xfffff3fb
 4ec:	01053d02 	tsteq	r5, r2, lsl #26
 4f0:	4c31054b 	cfldr32mi	mvfx0, [r1], #-300	; 0xfffffed4
 4f4:	3d670c05 	stclcc	12, cr0, [r7, #-20]!	; 0xffffffec
 4f8:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 4fc:	0c054c13 	stceq	12, cr4, [r5], {19}
 500:	8302052f 	movwhi	r0, #9519	; 0x252f
 504:	3d200c05 	stccc	12, cr0, [r0, #-20]!	; 0xffffffec
 508:	05840105 	streq	r0, [r4, #261]	; 0x105
 50c:	05057648 	streq	r7, [r5, #-1608]	; 0xfffff9b8
 510:	2e020575 	cfrshl64cs	mvdx2, mvdx5, r0
 514:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 518:	05052e02 	streq	r2, [r5, #-3586]	; 0xfffff1fe
 51c:	2e02053d 	mcrcs	5, 0, r0, cr2, cr13, {1}
 520:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 524:	01052e02 	tsteq	r5, r2, lsl #28
 528:	4c5a053d 	cfldr64mi	mvdx0, [sl], {61}	; 0x3d
 52c:	05750505 	ldrbeq	r0, [r5, #-1285]!	; 0xfffffafb
 530:	05052e02 	streq	r2, [r5, #-3586]	; 0xfffff1fe
 534:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 538:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 53c:	05052e02 	streq	r2, [r5, #-3586]	; 0xfffff1fe
 540:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 544:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
 548:	03ad0364 			; <UNDEFINED> instruction: 0x03ad0364
 54c:	750c054a 	strvc	r0, [ip, #-1354]	; 0xfffffab6
 550:	3e3d4b3d 	vmovcc.s16	r4, d13[2]
 554:	053d4b3d 	ldreq	r4, [sp, #-2877]!	; 0xfffff4c3
 558:	053d3e0b 	ldreq	r3, [sp, #-3595]!	; 0xfffff1f5
 55c:	10053d01 	andne	r3, r5, r1, lsl #26
 560:	3d02054c 	cfstr32cc	mvfx0, [r2, #-304]	; 0xfffffed0
 564:	052f2f30 	streq	r2, [pc, #-3888]!	; fffff63c <ts_state+0xdfffd84c>
 568:	02053207 	andeq	r3, r5, #1879048192	; 0x70000000
 56c:	4b040568 	blmi	101b14 <startup-0x1fefe4ec>
 570:	05300705 	ldreq	r0, [r0, #-1797]!	; 0xfffff8fb
 574:	03052116 	movweq	r2, #20758	; 0x5116
 578:	4908053c 	stmdbmi	r8, {r2, r3, r4, r5, r8, sl}
 57c:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 580:	1d053208 	sfmne	f3, 4, [r5, #-32]	; 0xffffffe0
 584:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
 588:	1f053c08 	svcne	0x00053c08
 58c:	3c08053d 	cfstr32cc	mvfx0, [r8], {61}	; 0x3d
 590:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 594:	0515080a 	ldreq	r0, [r5, #-2058]	; 0xfffff7f6
 598:	052f2f03 	streq	r2, [pc, #-3843]!	; fffff69d <ts_state+0xdfffd8ad>
 59c:	0305e50f 	movweq	lr, #21775	; 0x550f
 5a0:	4b08053c 	blmi	201a98 <startup-0x1fdfe568>
 5a4:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 5a8:	4b593d04 	blmi	164f9c0 <startup-0x1e9b0640>
 5ac:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 5b0:	4b593d04 	blmi	164f9c8 <startup-0x1e9b0638>
 5b4:	78030905 	stmdavc	r3, {r0, r2, r8, fp}
 5b8:	3c080558 	cfstr32cc	mvfx0, [r8], {88}	; 0x58
 5bc:	0a030305 	beq	c11d8 <startup-0x1ff3ee28>
 5c0:	3008052e 	andcc	r0, r8, lr, lsr #10
 5c4:	4b3c0405 	blmi	f015e0 <startup-0x1f0fea20>
 5c8:	a107054b 	tstge	r7, fp, asr #10
 5cc:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 5d0:	14052f1a 	strne	r2, [r5], #-3866	; 0xfffff0e6
 5d4:	3d1c053c 	cfldr32cc	mvfx0, [ip, #-240]	; 0xffffff10
 5d8:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 5dc:	0a053d05 	beq	14f9f8 <startup-0x1feb0608>
 5e0:	3d090559 	cfstr32cc	mvfx0, [r9, #-356]	; 0xfffffe9c
 5e4:	052e1005 	streq	r1, [lr, #-5]!
 5e8:	10054b09 	andne	r4, r5, r9, lsl #22
 5ec:	4b09052e 	blmi	241aac <startup-0x1fdbe554>
 5f0:	052e1005 	streq	r1, [lr, #-5]!
 5f4:	05053d09 	streq	r3, [r5, #-3337]	; 0xfffff2f7
 5f8:	0b054b3c 	bleq	1532f0 <startup-0x1feacd10>
 5fc:	3c06054d 	cfstr32cc	mvfx0, [r6], {77}	; 0x4d
 600:	052f1005 	streq	r1, [pc, #-5]!	; 603 <startup-0x1ffff9fd>
 604:	0c058411 	cfstrseq	mvf8, [r5], {17}
 608:	2f10053c 	svccs	0x0010053c
 60c:	05770b05 	ldrbeq	r0, [r7, #-2821]!	; 0xfffff4fb
 610:	1a053c06 	bne	14f630 <startup-0x1feb09d0>
 614:	3c14052f 	cfldr32cc	mvfx0, [r4], {47}	; 0x2f
 618:	053d1c05 	ldreq	r1, [sp, #-3077]!	; 0xfffff3fb
 61c:	05053c16 	streq	r3, [r5, #-3094]	; 0xfffff3ea
 620:	590a053d 	stmdbpl	sl, {r0, r2, r3, r4, r5, r8, sl}
 624:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 628:	09052e10 	stmdbeq	r5, {r4, r9, sl, fp, sp}
 62c:	2e10054b 	cfmac32cs	mvfx0, mvfx0, mvfx11
 630:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
 634:	054b3c04 	strbeq	r3, [fp, #-3076]	; 0xfffff3fc
 638:	07054c08 	streq	r4, [r5, -r8, lsl #24]
 63c:	241505e4 	ldrcs	r0, [r5], #-1508	; 0xfffffa1c
 640:	053c2c05 	ldreq	r2, [ip, #-3077]!	; 0xfffff3fb
 644:	1c053c31 	stcne	12, cr3, [r5], {49}	; 0x31
 648:	20060520 	andcs	r0, r6, r0, lsr #10
 64c:	052f0505 	streq	r0, [pc, #-1285]!	; 14f <startup-0x1ffffeb1>
 650:	0e053d15 	mcreq	13, 0, r3, cr5, cr5, {0}
 654:	200c053c 	andcs	r0, ip, ip, lsr r5
 658:	9f13053d 	svcls	0x0013053d
 65c:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
 660:	1d052f16 	stcne	15, cr2, [r5, #-88]	; 0xffffffa8
 664:	2f20052e 	svccs	0x0020052e
 668:	053c1305 	ldreq	r1, [ip, #-773]!	; 0xfffffcfb
 66c:	1a052e20 	bne	14bef4 <startup-0x1feb410c>
 670:	2122053c 			; <UNDEFINED> instruction: 0x2122053c
 674:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 678:	1d052e22 	stcne	14, cr2, [r5, #-136]	; 0xffffff78
 67c:	2315052e 	tstcs	r5, #192937984	; 0xb800000
 680:	053c2c05 	ldreq	r2, [ip, #-3077]!	; 0xfffff3fb
 684:	1c053c31 	stcne	12, cr3, [r5], {49}	; 0x31
 688:	20060520 	andcs	r0, r6, r0, lsr #10
 68c:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 690:	0e053d15 	mcreq	13, 0, r3, cr5, cr5, {0}
 694:	200c053c 	andcs	r0, ip, ip, lsr r5
 698:	9f13053d 	svcls	0x0013053d
 69c:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
 6a0:	1d052f16 	stcne	15, cr2, [r5, #-88]	; 0xffffffa8
 6a4:	2f20052e 	svccs	0x0020052e
 6a8:	053c1305 	ldreq	r1, [ip, #-773]!	; 0xfffffcfb
 6ac:	1a052e20 	bne	14bf34 <startup-0x1feb40cc>
 6b0:	21220520 			; <UNDEFINED> instruction: 0x21220520
 6b4:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 6b8:	1d052e22 	stcne	14, cr2, [r5, #-136]	; 0xffffff78
 6bc:	03040520 	movweq	r0, #17696	; 0x4520
 6c0:	05052047 	streq	r2, [r5, #-71]	; 0xffffffb9
 6c4:	05202503 	streq	r2, [r0, #-1283]!	; 0xfffffafd
 6c8:	204b030a 	subcs	r0, fp, sl, lsl #6
 6cc:	01001802 	tsteq	r0, r2, lsl #16
 6d0:	Address 0x000006d0 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
   4:	63756600 	cmnvs	r5, #0, 12
   8:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
   c:	7269625f 	rsbvc	r6, r9, #-268435451	; 0xf0000005
  10:	73610064 	cmnvc	r1, #100	; 0x64
  14:	5f696963 	svcpl	0x00696963
  18:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  1c:	61645f65 	cmnvs	r4, r5, ror #30
  20:	6f006174 	svcvs	0x00006174
  24:	5f747362 	svcpl	0x00747362
  28:	00625f31 	rsbeq	r5, r2, r1, lsr pc
  2c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
  30:	62006d6f 	andvs	r6, r0, #7104	; 0x1bc0
  34:	5f647269 	svcpl	0x00647269
  38:	72616f73 	rsbvc	r6, r1, #460	; 0x1cc
  3c:	6f65675f 	svcvs	0x0065675f
  40:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  44:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
  48:	665f6472 			; <UNDEFINED> instruction: 0x665f6472
  4c:	5f70616c 	svcpl	0x0070616c
  50:	006a626f 	rsbeq	r6, sl, pc, ror #4
  54:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
  58:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
  5c:	746f625f 	strbtvc	r6, [pc], #-607	; 64 <startup-0x1fffff9c>
  60:	5f6d6f74 	svcpl	0x006d6f74
  64:	626f0031 	rsbvs	r0, pc, #49	; 0x31
  68:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
  6c:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
  70:	6f74746f 	svcvs	0x0074746f
  74:	00325f6d 	eorseq	r5, r2, sp, ror #30
  78:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  7c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
  80:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
  84:	5f79616c 	svcpl	0x0079616c
  88:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
  8c:	626f006f 	rsbvs	r0, pc, #111	; 0x6f
  90:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
  94:	745f656c 	ldrbvc	r6, [pc], #-1388	; 9c <startup-0x1fffff64>
  98:	315f706f 	cmpcc	pc, pc, rrx
  9c:	73626f00 	cmnvc	r2, #0, 30
  a0:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
  a4:	6f745f65 	svcvs	0x00745f65
  a8:	00325f70 	eorseq	r5, r2, r0, ror pc
  ac:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
  b0:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
  b4:	6f705f6a 	svcvs	0x00705f6a
  b8:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
  bc:	73006e6f 	movwvc	r6, #3695	; 0xe6f
  c0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  c4:	5f676e69 	svcpl	0x00676e69
  c8:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
  cc:	675f6e65 	ldrbvs	r6, [pc, -r5, ror #28]
  d0:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  d4:	00797274 	rsbseq	r7, r9, r4, ror r2
  d8:	6e69616d 	powvsez	f6, f1, #5.0
  dc:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
  e0:	43746547 	cmnmi	r4, #297795584	; 0x11c00000
  e4:	50006c6f 	andpl	r6, r0, pc, ror #24
  e8:	4d4f4547 	cfstr64mi	mvdx4, [pc, #-284]	; ffffffd4 <ts_state+0xdfffe1e4>
  ec:	59525445 	ldmdbpl	r2, {r0, r2, r6, sl, ip, lr}^
  f0:	73626f00 	cmnvc	r2, #0, 30
  f4:	5f315f74 	svcpl	0x00315f74
  f8:	72670074 	rsbvc	r0, r7, #116	; 0x74
  fc:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 100:	6c635f63 	stclvs	15, cr5, [r3], #-396	; 0xfffffe74
 104:	5f726165 	svcpl	0x00726165
 108:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 10c:	73006e65 	movwvc	r6, #3685	; 0xe65
 110:	6f5f7465 	svcvs	0x005f7465
 114:	61747362 	cmnvs	r4, r2, ror #6
 118:	5f656c63 	svcpl	0x00656c63
 11c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 120:	73610064 	cmnvc	r1, #100	; 0x64
 124:	5f696963 	svcpl	0x00696963
 128:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 12c:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 130:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
 134:	5f647269 	svcpl	0x00647269
 138:	72616f73 	rsbvc	r6, r1, #460	; 0x1cc
 13c:	6a626f5f 	bvs	189bec0 <startup-0x1e764140>
 140:	73626f00 	cmnvc	r2, #0, 30
 144:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
 148:	6f745f65 	svcvs	0x00745f65
 14c:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
 150:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 154:	67007972 	smlsdxvs	r0, r2, r9, r7
 158:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 15c:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 160:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 164:	7a696c61 	bvc	1a5b2f0 <startup-0x1e5a4d10>
 168:	4f500065 	svcmi	0x00500065
 16c:	00544e49 	subseq	r4, r4, r9, asr #28
 170:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 174:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 178:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 17c:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 180:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 184:	006a624f 	rsbeq	r6, sl, pc, asr #4
 188:	735f7374 	cmpvc	pc, #116, 6	; 0xd0000001
 18c:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 190:	72696400 	rsbvc	r6, r9, #0, 8
 194:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 198:	6f007972 	svcvs	0x00007972
 19c:	61747362 	cmnvs	r4, r2, ror #6
 1a0:	5f656c63 	svcpl	0x00656c63
 1a4:	74746f62 	ldrbtvc	r6, [r4], #-3938	; 0xfffff09e
 1a8:	6f5f6d6f 	svcvs	0x005f6d6f
 1ac:	325f6a62 	subscc	r6, pc, #401408	; 0x62000
 1b0:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
 1b4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1b8:	6f725c73 	svcvs	0x00725c73
 1bc:	5c686b7a 			; <UNDEFINED> instruction: 0x5c686b7a
 1c0:	6b736544 	blvs	1cd96d8 <startup-0x1e326928>
 1c4:	5c706f74 	ldclpl	15, cr6, [r0], #-464	; 0xfffffe30
 1c8:	5c504f4d 	mrrcpl	15, 4, r4, r0, cr13
 1cc:	6262616c 	rsbvs	r6, r2, #108, 2
 1d0:	6f002d35 	svcvs	0x00002d35
 1d4:	61747362 	cmnvs	r4, r2, ror #6
 1d8:	5f656c63 	svcpl	0x00656c63
 1dc:	5f706f74 	svcpl	0x00706f74
 1e0:	5f6a626f 	svcpl	0x006a626f
 1e4:	626f0031 	rsbvs	r0, pc, #49	; 0x31
 1e8:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
 1ec:	745f656c 	ldrbvc	r6, [pc], #-1388	; 1f4 <startup-0x1ffffe0c>
 1f0:	6f5f706f 	svcvs	0x005f706f
 1f4:	325f6a62 	subscc	r6, pc, #401408	; 0x62000
 1f8:	73626f00 	cmnvc	r2, #0, 30
 1fc:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
 200:	6f625f65 	svcvs	0x00625f65
 204:	6d6f7474 	cfstrdvs	mvd7, [pc, #-464]!	; 3c <startup-0x1fffffc4>
 208:	6a626f5f 	bvs	189bf8c <startup-0x1e764074>
 20c:	7300315f 	movwvc	r3, #351	; 0x15f
 210:	78657a69 	stmdavc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 214:	7a697300 	bvc	1a5ce1c <startup-0x1e5a31e4>
 218:	67007965 	strvs	r7, [r0, -r5, ror #18]
 21c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 220:	705f6369 	subsvc	r6, pc, r9, ror #6
 224:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
 228:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 22c:	63736100 	cmnvs	r3, #0, 2
 230:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 234:	616d6d6f 	cmnvs	sp, pc, ror #26
 238:	6400646e 	strvs	r6, [r0], #-1134	; 0xfffffb92
 23c:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 240:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 244:	6100696c 	tstvs	r0, ip, ror #18
 248:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 24c:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 250:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 254:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 258:	00726165 	rsbseq	r6, r2, r5, ror #2
 25c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff821 <ts_state+0xdfffda31>
 260:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 264:	7a6f722f 	bvc	1bdcb28 <startup-0x1e4234d8>
 268:	442f686b 	strtmi	r6, [pc], #-2155	; 270 <startup-0x1ffffd90>
 26c:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 270:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; bc <startup-0x1fffff44>
 274:	6c2f504f 	stcvs	0, cr5, [pc], #-316	; 140 <startup-0x1ffffec0>
 278:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 27c:	74732f2d 	ldrbtvc	r2, [r3], #-3885	; 0xfffff0d3
 280:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 284:	00632e70 	rsbeq	r2, r3, r0, ror lr
 288:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 28c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 290:	61686320 	cmnvs	r8, r0, lsr #6
 294:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
 298:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 29c:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 2a0:	20312e32 	eorscs	r2, r1, r2, lsr lr
 2a4:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 2a8:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 2ac:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 2b0:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 2b4:	5b202965 	blpl	80a850 <startup-0x1f7f57b0>
 2b8:	2f4d5241 	svccs	0x004d5241
 2bc:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2c0:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 2c4:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 2c8:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 2cc:	6f697369 	svcvs	0x00697369
 2d0:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 2d4:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 2d8:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 2dc:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 2e0:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 2e4:	616f6c66 	cmnvs	pc, r6, ror #24
 2e8:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 2ec:	6f733d69 	svcvs	0x00733d69
 2f0:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 2f4:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 2f8:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 2fc:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 300:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 304:	304f2d20 	subcc	r2, pc, r0, lsr #26
 308:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 30c:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 310:	6f630039 	svcvs	0x00630039
 314:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
 318:	656b0072 	strbvs	r0, [fp, #-114]!	; 0xffffff8e
 31c:	61006279 	tstvs	r0, r9, ror r2
 320:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 324:	73007373 	movwvc	r7, #883	; 0x373
 328:	6f5f7465 	svcvs	0x005f7465
 32c:	63656a62 	cmnvs	r5, #401408	; 0x62000
 330:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 334:	00646565 	rsbeq	r6, r4, r5, ror #10
 338:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 33c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 340:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 344:	65687400 	strbvs	r7, [r8, #-1024]!	; 0xfffffc00
 348:	705f795f 	subsvc	r7, pc, pc, asr r9	; <UNPREDICTABLE>
 34c:	625f736f 	subsvs	r7, pc, #-1140850687	; 0xbc000001
 350:	00647269 	rsbeq	r7, r4, r9, ror #4
 354:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 358:	5f737463 	svcpl	0x00737463
 35c:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 360:	0070616c 	rsbseq	r6, r0, ip, ror #2
 364:	4164626b 	cmnmi	r4, fp, ror #4
 368:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 36c:	00657461 	rsbeq	r7, r5, r1, ror #8
 370:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 374:	61726700 	cmnvs	r2, r0, lsl #14
 378:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 37c:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 380:	635f6c65 	cmpvs	pc, #25856	; 0x6500
 384:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 388:	65687400 	strbvs	r7, [r8, #-1024]!	; 0xfffffc00
 38c:	735f795f 	cmpvc	pc, #1556480	; 0x17c000
 390:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 394:	7269625f 	rsbvc	r6, r9, #-268435451	; 0xf0000005
 398:	6f6d0064 	svcvs	0x006d0064
 39c:	6f5f6576 	svcvs	0x005f6576
 3a0:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3a4:	73610074 	cmnvc	r1, #116	; 0x74
 3a8:	5f696963 	svcpl	0x00696963
 3ac:	6f746f67 	svcvs	0x00746f67
 3b0:	6d007978 	vstrvs.16	s14, [r0, #-240]	; 0xffffff10	; <UNPREDICTABLE>
 3b4:	5f65766f 	svcpl	0x0065766f
 3b8:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 3bc:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 3c0:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 3c4:	615f7469 	cmpvs	pc, r9, ror #8
 3c8:	73007070 	movwvc	r7, #112	; 0x70
 3cc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 3d0:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 3d4:	006e6565 	rsbeq	r6, lr, r5, ror #10
 3d8:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 3dc:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 3e0:	746f625f 	strbtvc	r6, [pc], #-607	; 3e8 <startup-0x1ffffc18>
 3e4:	5f6d6f74 	svcpl	0x006d6f74
 3e8:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 254 <startup-0x1ffffdac>
 3ec:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 3f0:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 3f4:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 3f8:	73007374 	movwvc	r7, #884	; 0x374
 3fc:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 400:	5f676e69 	svcpl	0x00676e69
 404:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 408:	6f5f6e65 	svcvs	0x005f6e65
 40c:	62006a62 	andvs	r6, r0, #401408	; 0x62000
 410:	5f647269 	svcpl	0x00647269
 414:	70616c66 	rsbvc	r6, r1, r6, ror #24
 418:	6f65675f 	svcvs	0x0065675f
 41c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 420:	626f0079 	rsbvs	r0, pc, #121	; 0x79
 424:	325f7473 	subscc	r7, pc, #1929379840	; 0x73000000
 428:	6100745f 	tstvs	r0, pc, asr r4
 42c:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 430:	6165725f 	cmnvs	r5, pc, asr r2
 434:	6f635f64 	svcvs	0x00635f64
 438:	6f72746e 	svcvs	0x0072746e
 43c:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 440:	63736100 	cmnvs	r3, #0, 2
 444:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 448:	5f646165 	svcpl	0x00646165
 44c:	74617473 	strbtvc	r7, [r1], #-1139	; 0xfffffb8d
 450:	64007375 	strvs	r7, [r0], #-885	; 0xfffffc8b
 454:	00776172 	rsbseq	r6, r7, r2, ror r1
 458:	5f746573 	svcpl	0x00746573
 45c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 460:	6c630064 	stclvs	0, cr0, [r3], #-400	; 0xfffffe70
 464:	5f726165 	svcpl	0x00726165
 468:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 46c:	64007463 	strvs	r7, [r0], #-1123	; 0xfffffb9d
 470:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 474:	3035325f 	eorscc	r3, r5, pc, asr r2
 478:	6200736e 	andvs	r7, r0, #-1207959551	; 0xb8000001
 47c:	00657479 	rsbeq	r7, r5, r9, ror r4
 480:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 484:	686e655f 	stmdavs	lr!, {r0, r1, r2, r3, r4, r6, r8, sl, sp, lr}^
 488:	65636e61 	strbvs	r6, [r3, #-3681]!	; 0xfffff19f
 48c:	73610064 	cmnvc	r1, #100	; 0x64
 490:	5f696963 	svcpl	0x00696963
 494:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 498:	6f635f65 	svcvs	0x00635f65
 49c:	6f72746e 	svcvs	0x0072746e
 4a0:	72656c6c 	rsbvc	r6, r5, #108, 24	; 0x6c00
 4a4:	6d697400 	cfstrdvs	mvd7, [r9, #-0]
 4a8:	5f367265 	svcpl	0x00367265
 4ac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 4b0:	63736100 	cmnvs	r3, #0, 2
 4b4:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 4b8:	5f646165 	svcpl	0x00646165
 4bc:	61746164 	cmnvs	r4, r4, ror #2
 4c0:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
 4c4:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 4c8:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
 4cc:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 4d0:	4f500070 	svcmi	0x00500070
 4d4:	43454a42 	movtmi	r4, #23106	; 0x5a42
 4d8:	756f0054 	strbvc	r0, [pc, #-84]!	; 48c <startup-0x1ffffb74>
 4dc:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 4e0:	656b0067 	strbvs	r0, [fp, #-103]!	; 0xffffff99
 4e4:	735f6279 	cmpvc	pc, #-1879048185	; 0x90000007
 4e8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 4ec:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 4f0:	72640065 	rsbvc	r0, r4, #101	; 0x65
 4f4:	6f5f7761 	svcvs	0x005f7761
 4f8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4fc:	626f0074 	rsbvs	r0, pc, #116	; 0x74
 500:	325f7473 	subscc	r7, pc, #1929379840	; 0x73000000
 504:	6100625f 	tstvs	r0, pc, asr r2
 508:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 50c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 510:	73610074 	cmnvc	r1, #116	; 0x74
 514:	5f696963 	svcpl	0x00696963
 518:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 51c:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 520:	Address 0x00000520 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000006 	andeq	r0, r0, r6
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	20000016 	andcs	r0, r0, r6, lsl r0
  3c:	00000006 	andeq	r0, r0, r6
  40:	0000000c 	andeq	r0, r0, ip
  44:	00000000 	andeq	r0, r0, r0
  48:	2000001c 	andcs	r0, r0, ip, lsl r0
  4c:	00000006 	andeq	r0, r0, r6
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	20000022 	andcs	r0, r0, r2, lsr #32
  5c:	00000006 	andeq	r0, r0, r6
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000028 	andcs	r0, r0, r8, lsr #32
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0000070d 	andeq	r0, r0, sp, lsl #14
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	20000040 	andcs	r0, r0, r0, asr #32
  88:	00000038 	andeq	r0, r0, r8, lsr r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  98:	00000007 	andeq	r0, r0, r7
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	20000078 	andcs	r0, r0, r8, ror r0
  a8:	00000048 	andeq	r0, r0, r8, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200000c0 	andcs	r0, r0, r0, asr #1
  c8:	00000030 	andeq	r0, r0, r0, lsr r0
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	200000f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
  e8:	00000034 	andeq	r0, r0, r4, lsr r0
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f8:	00000007 	andeq	r0, r0, r7
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	20000124 	andcs	r0, r0, r4, lsr #2
 108:	0000002a 	andeq	r0, r0, sl, lsr #32
 10c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 110:	41018e02 	tstmi	r1, r2, lsl #28
 114:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 118:	00000007 	andeq	r0, r0, r7
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	2000014e 	andcs	r0, r0, lr, asr #2
 128:	0000002a 	andeq	r0, r0, sl, lsr #32
 12c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 130:	41018e02 	tstmi	r1, r2, lsl #28
 134:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 138:	00000007 	andeq	r0, r0, r7
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	20000178 	andcs	r0, r0, r8, ror r1
 148:	00000040 	andeq	r0, r0, r0, asr #32
 14c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 150:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 154:	180e4101 	stmdane	lr, {r0, r8, lr}
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	200001b8 			; <UNDEFINED> instruction: 0x200001b8
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 170:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 174:	180e4101 	stmdane	lr, {r0, r8, lr}
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	200001f8 	strdcs	r0, [r0], -r8
 188:	00000042 	andeq	r0, r0, r2, asr #32
 18c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 190:	41018e02 	tstmi	r1, r2, lsl #28
 194:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 198:	00000007 	andeq	r0, r0, r7
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	2000023a 	andcs	r0, r0, sl, lsr r2
 1a8:	00000028 	andeq	r0, r0, r8, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	20000262 	andcs	r0, r0, r2, ror #4
 1c4:	00000032 	andeq	r0, r0, r2, lsr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	20000294 	mulcs	r0, r4, r2
 1e4:	00000038 	andeq	r0, r0, r8, lsr r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000000 	andeq	r0, r0, r0
 200:	200002cc 	andcs	r0, r0, ip, asr #5
 204:	00000054 	andeq	r0, r0, r4, asr r0
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000320 	andcs	r0, r0, r0, lsr #6
 224:	0000005c 	andeq	r0, r0, ip, asr r0
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	2000037c 	andcs	r0, r0, ip, ror r3
 244:	00000068 	andeq	r0, r0, r8, rrx
 248:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 24c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 250:	280e4101 	stmdacs	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	00000020 	andeq	r0, r0, r0, lsr #32
 25c:	00000000 	andeq	r0, r0, r0
 260:	200003e4 	andcs	r0, r0, r4, ror #7
 264:	00000044 	andeq	r0, r0, r4, asr #32
 268:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 26c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 270:	41018e02 	tstmi	r1, r2, lsl #28
 274:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 278:	00000007 	andeq	r0, r0, r7
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000000 	andeq	r0, r0, r0
 284:	20000428 	andcs	r0, r0, r8, lsr #8
 288:	00000068 	andeq	r0, r0, r8, rrx
 28c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 290:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 294:	180e4101 	stmdane	lr, {r0, r8, lr}
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	20000490 	mulcs	r0, r0, r4
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	200004d4 	ldrdcs	r0, [r0], -r4
 2c4:	00000046 	andeq	r0, r0, r6, asr #32
 2c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2cc:	41018e02 	tstmi	r1, r2, lsl #28
 2d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d4:	00000007 	andeq	r0, r0, r7
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	2000051a 	andcs	r0, r0, sl, lsl r5
 2e4:	00000040 	andeq	r0, r0, r0, asr #32
 2e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ec:	41018e02 	tstmi	r1, r2, lsl #28
 2f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2f4:	00000007 	andeq	r0, r0, r7
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000000 	andeq	r0, r0, r0
 300:	2000055a 	andcs	r0, r0, sl, asr r5
 304:	000000d4 	ldrdeq	r0, [r0], -r4
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000000 	andeq	r0, r0, r0
 320:	2000062e 	andcs	r0, r0, lr, lsr #12
 324:	00000060 	andeq	r0, r0, r0, rrx
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000000 	andeq	r0, r0, r0
 340:	2000068e 	andcs	r0, r0, lr, lsl #13
 344:	00000060 	andeq	r0, r0, r0, rrx
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 354:	00000007 	andeq	r0, r0, r7
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	00000000 	andeq	r0, r0, r0
 360:	200006ee 	andcs	r0, r0, lr, ror #13
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 36c:	41018e02 	tstmi	r1, r2, lsl #28
 370:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 374:	00000007 	andeq	r0, r0, r7
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000000 	andeq	r0, r0, r0
 380:	2000072a 	andcs	r0, r0, sl, lsr #14
 384:	00000020 	andeq	r0, r0, r0, lsr #32
 388:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 38c:	41018e02 	tstmi	r1, r2, lsl #28
 390:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 394:	00000007 	andeq	r0, r0, r7
 398:	00000018 	andeq	r0, r0, r8, lsl r0
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	2000074a 	andcs	r0, r0, sl, asr #14
 3a4:	0000003a 	andeq	r0, r0, sl, lsr r0
 3a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ac:	41018e02 	tstmi	r1, r2, lsl #28
 3b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	20000784 	andcs	r0, r0, r4, lsl #15
 3c0:	0000003e 	andeq	r0, r0, lr, lsr r0
 3c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c8:	41018e02 	tstmi	r1, r2, lsl #28
 3cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d0:	00000007 	andeq	r0, r0, r7
 3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	200007c2 	andcs	r0, r0, r2, asr #15
 3e0:	00000046 	andeq	r0, r0, r6, asr #32
 3e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3e8:	41018e02 	tstmi	r1, r2, lsl #28
 3ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f0:	00000007 	andeq	r0, r0, r7
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	20000808 	andcs	r0, r0, r8, lsl #16
 400:	00000056 	andeq	r0, r0, r6, asr r0
 404:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 408:	41018e02 	tstmi	r1, r2, lsl #28
 40c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 410:	00000007 	andeq	r0, r0, r7
 414:	00000020 	andeq	r0, r0, r0, lsr #32
 418:	00000000 	andeq	r0, r0, r0
 41c:	2000085e 	andcs	r0, r0, lr, asr r8
 420:	00000362 	andeq	r0, r0, r2, ror #6
 424:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 428:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 42c:	41018e02 	tstmi	r1, r2, lsl #28
 430:	0c41300e 	mcrreq	0, 0, r3, r1, cr14
 434:	00002807 	andeq	r2, r0, r7, lsl #16
 438:	0000000c 	andeq	r0, r0, ip
 43c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 440:	7c010001 	stcvc	0, cr0, [r1], {1}
 444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 448:	0000000c 	andeq	r0, r0, ip
 44c:	00000438 	andeq	r0, r0, r8, lsr r4
 450:	20000bc1 	andcs	r0, r0, r1, asr #23
 454:	0000010a 	andeq	r0, r0, sl, lsl #2
 458:	0000000c 	andeq	r0, r0, ip
 45c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 460:	7c010001 	stcvc	0, cr0, [r1], {1}
 464:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 468:	0000000c 	andeq	r0, r0, ip
 46c:	00000458 	andeq	r0, r0, r8, asr r4
 470:	20000cd5 	ldrdcs	r0, [r0], -r5
 474:	000001cc 	andeq	r0, r0, ip, asr #3
