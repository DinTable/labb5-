
Debug/Labb5:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
#include "objects.h"

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");        /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");                    /* call main */
20000004:	f000 fd4a 	bl	20000a9c <main>
__asm__ volatile(".L1: B .L1\n");                /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <kbdGetCol>:
#include "defines.h"

int ts_state = 0; 
static char keyb_state = 0xFF;

int kbdGetCol(void) { /* Om någon tangent (i aktiverad rad)
20000010:	b580      	push	{r7, lr}
20000012:	b082      	sub	sp, #8
20000014:	af00      	add	r7, sp, #0
* är nedtryckt, returnera dess kolumnnummer,
* annars, returnera 0 */
    unsigned char c;
    c = *GPIO_D_IDR_HIGH;
20000016:	4a12      	ldr	r2, [pc, #72]	; (20000060 <kbdGetCol+0x50>)
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	7812      	ldrb	r2, [r2, #0]
2000001c:	701a      	strb	r2, [r3, #0]
    if (c & 0x8) return 4;
2000001e:	1dfb      	adds	r3, r7, #7
20000020:	781b      	ldrb	r3, [r3, #0]
20000022:	2208      	movs	r2, #8
20000024:	4013      	ands	r3, r2
20000026:	d001      	beq.n	2000002c <kbdGetCol+0x1c>
20000028:	2304      	movs	r3, #4
2000002a:	e015      	b.n	20000058 <kbdGetCol+0x48>
    if (c & 0x4) return 3;
2000002c:	1dfb      	adds	r3, r7, #7
2000002e:	781b      	ldrb	r3, [r3, #0]
20000030:	2204      	movs	r2, #4
20000032:	4013      	ands	r3, r2
20000034:	d001      	beq.n	2000003a <kbdGetCol+0x2a>
20000036:	2303      	movs	r3, #3
20000038:	e00e      	b.n	20000058 <kbdGetCol+0x48>
    if (c & 0x2) return 2;
2000003a:	1dfb      	adds	r3, r7, #7
2000003c:	781b      	ldrb	r3, [r3, #0]
2000003e:	2202      	movs	r2, #2
20000040:	4013      	ands	r3, r2
20000042:	d001      	beq.n	20000048 <kbdGetCol+0x38>
20000044:	2302      	movs	r3, #2
20000046:	e007      	b.n	20000058 <kbdGetCol+0x48>
    if (c & 0x1) return 1;
20000048:	1dfb      	adds	r3, r7, #7
2000004a:	781b      	ldrb	r3, [r3, #0]
2000004c:	2201      	movs	r2, #1
2000004e:	4013      	ands	r3, r2
20000050:	d001      	beq.n	20000056 <kbdGetCol+0x46>
20000052:	2301      	movs	r3, #1
20000054:	e000      	b.n	20000058 <kbdGetCol+0x48>
    return 0;
20000056:	2300      	movs	r3, #0
}
20000058:	0018      	movs	r0, r3
2000005a:	46bd      	mov	sp, r7
2000005c:	b002      	add	sp, #8
2000005e:	bd80      	pop	{r7, pc}
20000060:	40020c11 	andmi	r0, r2, r1, lsl ip

20000064 <kbdActivate>:

void kbdActivate(unsigned int row) { /* Aktivera angiven rad hos tangentbordet, eller
20000064:	b580      	push	{r7, lr}
20000066:	b082      	sub	sp, #8
20000068:	af00      	add	r7, sp, #0
2000006a:	6078      	str	r0, [r7, #4]
2000006c:	687b      	ldr	r3, [r7, #4]
2000006e:	2b05      	cmp	r3, #5
20000070:	d81d      	bhi.n	200000ae <kbdActivate+0x4a>
20000072:	687b      	ldr	r3, [r7, #4]
20000074:	009a      	lsls	r2, r3, #2
20000076:	4b10      	ldr	r3, [pc, #64]	; (200000b8 <kbdActivate+0x54>)
20000078:	18d3      	adds	r3, r2, r3
2000007a:	681b      	ldr	r3, [r3, #0]
2000007c:	469f      	mov	pc, r3
* deaktivera samtliga */
    switch (row) {
        case 1:
            *GPIO_D_ODR_HIGH = 0x10;
2000007e:	4b0f      	ldr	r3, [pc, #60]	; (200000bc <kbdActivate+0x58>)
20000080:	2210      	movs	r2, #16
20000082:	701a      	strb	r2, [r3, #0]
            break;
20000084:	e013      	b.n	200000ae <kbdActivate+0x4a>
        case 2:
            *GPIO_D_ODR_HIGH = 0x20;
20000086:	4b0d      	ldr	r3, [pc, #52]	; (200000bc <kbdActivate+0x58>)
20000088:	2220      	movs	r2, #32
2000008a:	701a      	strb	r2, [r3, #0]
            break;
2000008c:	e00f      	b.n	200000ae <kbdActivate+0x4a>
        case 3:
            *GPIO_D_ODR_HIGH = 0x40;
2000008e:	4b0b      	ldr	r3, [pc, #44]	; (200000bc <kbdActivate+0x58>)
20000090:	2240      	movs	r2, #64	; 0x40
20000092:	701a      	strb	r2, [r3, #0]
            break;
20000094:	e00b      	b.n	200000ae <kbdActivate+0x4a>
        case 4:
            *GPIO_D_ODR_HIGH = 0x80;
20000096:	4b09      	ldr	r3, [pc, #36]	; (200000bc <kbdActivate+0x58>)
20000098:	2280      	movs	r2, #128	; 0x80
2000009a:	701a      	strb	r2, [r3, #0]
            break;
2000009c:	e007      	b.n	200000ae <kbdActivate+0x4a>
        case 5:
            *GPIO_D_ODR_HIGH = 0xF0;
2000009e:	4b07      	ldr	r3, [pc, #28]	; (200000bc <kbdActivate+0x58>)
200000a0:	22f0      	movs	r2, #240	; 0xf0
200000a2:	701a      	strb	r2, [r3, #0]
            break;
200000a4:	e003      	b.n	200000ae <kbdActivate+0x4a>
        case 0:
            *GPIO_D_ODR_HIGH = 0x00;
200000a6:	4b05      	ldr	r3, [pc, #20]	; (200000bc <kbdActivate+0x58>)
200000a8:	2200      	movs	r2, #0
200000aa:	701a      	strb	r2, [r3, #0]
            break;
200000ac:	46c0      	nop			; (mov r8, r8)
    }
}
200000ae:	46c0      	nop			; (mov r8, r8)
200000b0:	46bd      	mov	sp, r7
200000b2:	b002      	add	sp, #8
200000b4:	bd80      	pop	{r7, pc}
200000b6:	46c0      	nop			; (mov r8, r8)
200000b8:	20001f7c 	andcs	r1, r0, ip, ror pc
200000bc:	40020c15 	andmi	r0, r2, r5, lsl ip

200000c0 <keyb>:

unsigned char keyb(void) {
200000c0:	b590      	push	{r4, r7, lr}
200000c2:	b087      	sub	sp, #28
200000c4:	af00      	add	r7, sp, #0
    unsigned char key[] = {1, 2, 3, 0xA, 4, 5, 6, 0xB, 7, 8, 9, 0xC, 0xE, 0, 0xF, 0xD};
200000c6:	003b      	movs	r3, r7
200000c8:	4a16      	ldr	r2, [pc, #88]	; (20000124 <keyb+0x64>)
200000ca:	ca13      	ldmia	r2!, {r0, r1, r4}
200000cc:	c313      	stmia	r3!, {r0, r1, r4}
200000ce:	6812      	ldr	r2, [r2, #0]
200000d0:	601a      	str	r2, [r3, #0]
    int row, col;
    for (row = 1; row <= 4; row++) {
200000d2:	2301      	movs	r3, #1
200000d4:	617b      	str	r3, [r7, #20]
200000d6:	e019      	b.n	2000010c <keyb+0x4c>
        kbdActivate(row);
200000d8:	697b      	ldr	r3, [r7, #20]
200000da:	0018      	movs	r0, r3
200000dc:	f7ff ffc2 	bl	20000064 <kbdActivate>
        if ((col = kbdGetCol())) {
200000e0:	f7ff ff96 	bl	20000010 <kbdGetCol>
200000e4:	0003      	movs	r3, r0
200000e6:	613b      	str	r3, [r7, #16]
200000e8:	693b      	ldr	r3, [r7, #16]
200000ea:	2b00      	cmp	r3, #0
200000ec:	d00b      	beq.n	20000106 <keyb+0x46>
            kbdActivate(0);
200000ee:	2000      	movs	r0, #0
200000f0:	f7ff ffb8 	bl	20000064 <kbdActivate>
            return key[4 * (row - 1) + (col - 1)];
200000f4:	697b      	ldr	r3, [r7, #20]
200000f6:	3b01      	subs	r3, #1
200000f8:	009a      	lsls	r2, r3, #2
200000fa:	693b      	ldr	r3, [r7, #16]
200000fc:	3b01      	subs	r3, #1
200000fe:	18d3      	adds	r3, r2, r3
20000100:	003a      	movs	r2, r7
20000102:	5cd3      	ldrb	r3, [r2, r3]
20000104:	e009      	b.n	2000011a <keyb+0x5a>
    for (row = 1; row <= 4; row++) {
20000106:	697b      	ldr	r3, [r7, #20]
20000108:	3301      	adds	r3, #1
2000010a:	617b      	str	r3, [r7, #20]
2000010c:	697b      	ldr	r3, [r7, #20]
2000010e:	2b04      	cmp	r3, #4
20000110:	dde2      	ble.n	200000d8 <keyb+0x18>
        }
    }
    kbdActivate(0);
20000112:	2000      	movs	r0, #0
20000114:	f7ff ffa6 	bl	20000064 <kbdActivate>
    return 0xFF;
20000118:	23ff      	movs	r3, #255	; 0xff
}
2000011a:	0018      	movs	r0, r3
2000011c:	46bd      	mov	sp, r7
2000011e:	b007      	add	sp, #28
20000120:	bd90      	pop	{r4, r7, pc}
20000122:	46c0      	nop			; (mov r8, r8)
20000124:	20001f94 	mulcs	r0, r4, pc	; <UNPREDICTABLE>

20000128 <out7seg>:

void out7seg(unsigned char c) {
20000128:	b5b0      	push	{r4, r5, r7, lr}
2000012a:	b086      	sub	sp, #24
2000012c:	af00      	add	r7, sp, #0
2000012e:	0002      	movs	r2, r0
20000130:	1dfb      	adds	r3, r7, #7
20000132:	701a      	strb	r2, [r3, #0]
    if (c > 16) kbdActivate(0);
20000134:	1dfb      	adds	r3, r7, #7
20000136:	781b      	ldrb	r3, [r3, #0]
20000138:	2b10      	cmp	r3, #16
2000013a:	d902      	bls.n	20000142 <out7seg+0x1a>
2000013c:	2000      	movs	r0, #0
2000013e:	f7ff ff91 	bl	20000064 <kbdActivate>
    unsigned char segCodes[] = {0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x7, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79,
20000142:	2008      	movs	r0, #8
20000144:	183b      	adds	r3, r7, r0
20000146:	4a07      	ldr	r2, [pc, #28]	; (20000164 <out7seg+0x3c>)
20000148:	ca32      	ldmia	r2!, {r1, r4, r5}
2000014a:	c332      	stmia	r3!, {r1, r4, r5}
2000014c:	6812      	ldr	r2, [r2, #0]
2000014e:	601a      	str	r2, [r3, #0]
                                0x71};
    *GPIO_D_ODR_LOW = segCodes[c];
20000150:	1dfb      	adds	r3, r7, #7
20000152:	781b      	ldrb	r3, [r3, #0]
20000154:	4904      	ldr	r1, [pc, #16]	; (20000168 <out7seg+0x40>)
20000156:	183a      	adds	r2, r7, r0
20000158:	5cd3      	ldrb	r3, [r2, r3]
2000015a:	700b      	strb	r3, [r1, #0]

}
2000015c:	46c0      	nop			; (mov r8, r8)
2000015e:	46bd      	mov	sp, r7
20000160:	b006      	add	sp, #24
20000162:	bdb0      	pop	{r4, r5, r7, pc}
20000164:	20001fa4 	andcs	r1, r0, r4, lsr #31
20000168:	40020c14 	andmi	r0, r2, r4, lsl ip

2000016c <keyb_enhanced>:

unsigned char keyb_enhanced(void){
2000016c:	b590      	push	{r4, r7, lr}
2000016e:	b083      	sub	sp, #12
20000170:	af00      	add	r7, sp, #0

	if ( ts_state ){
20000172:	4b16      	ldr	r3, [pc, #88]	; (200001cc <keyb_enhanced+0x60>)
20000174:	681b      	ldr	r3, [r3, #0]
20000176:	2b00      	cmp	r3, #0
20000178:	d00f      	beq.n	2000019a <keyb_enhanced+0x2e>
		kbdActivate(5);
2000017a:	2005      	movs	r0, #5
2000017c:	f7ff ff72 	bl	20000064 <kbdActivate>
		if( kbdGetCol() ) ts_state = 1;
20000180:	f7ff ff46 	bl	20000010 <kbdGetCol>
20000184:	1e03      	subs	r3, r0, #0
20000186:	d003      	beq.n	20000190 <keyb_enhanced+0x24>
20000188:	4b10      	ldr	r3, [pc, #64]	; (200001cc <keyb_enhanced+0x60>)
2000018a:	2201      	movs	r2, #1
2000018c:	601a      	str	r2, [r3, #0]
2000018e:	e002      	b.n	20000196 <keyb_enhanced+0x2a>
		else ts_state = 0;
20000190:	4b0e      	ldr	r3, [pc, #56]	; (200001cc <keyb_enhanced+0x60>)
20000192:	2200      	movs	r2, #0
20000194:	601a      	str	r2, [r3, #0]
		return 0xFF;
20000196:	23ff      	movs	r3, #255	; 0xff
20000198:	e014      	b.n	200001c4 <keyb_enhanced+0x58>
	}
	
	
	if( !ts_state ){
2000019a:	4b0c      	ldr	r3, [pc, #48]	; (200001cc <keyb_enhanced+0x60>)
2000019c:	681b      	ldr	r3, [r3, #0]
2000019e:	2b00      	cmp	r3, #0
200001a0:	d110      	bne.n	200001c4 <keyb_enhanced+0x58>
		char c = keyb();
200001a2:	1dfc      	adds	r4, r7, #7
200001a4:	f7ff ff8c 	bl	200000c0 <keyb>
200001a8:	0003      	movs	r3, r0
200001aa:	7023      	strb	r3, [r4, #0]
		if(c != keyb_state){
200001ac:	4b08      	ldr	r3, [pc, #32]	; (200001d0 <keyb_enhanced+0x64>)
200001ae:	781b      	ldrb	r3, [r3, #0]
200001b0:	1dfa      	adds	r2, r7, #7
200001b2:	7812      	ldrb	r2, [r2, #0]
200001b4:	429a      	cmp	r2, r3
200001b6:	d005      	beq.n	200001c4 <keyb_enhanced+0x58>
			ts_state = 1;
200001b8:	4b04      	ldr	r3, [pc, #16]	; (200001cc <keyb_enhanced+0x60>)
200001ba:	2201      	movs	r2, #1
200001bc:	601a      	str	r2, [r3, #0]
			return c; 
200001be:	1dfb      	adds	r3, r7, #7
200001c0:	781b      	ldrb	r3, [r3, #0]
200001c2:	e7ff      	b.n	200001c4 <keyb_enhanced+0x58>
		}
	}
} 
200001c4:	0018      	movs	r0, r3
200001c6:	46bd      	mov	sp, r7
200001c8:	b003      	add	sp, #12
200001ca:	bd90      	pop	{r4, r7, pc}
200001cc:	20001fc4 	andcs	r1, r0, r4, asr #31
200001d0:	2000107c 	andcs	r1, r0, ip, ror r0

200001d4 <ascii_ctrl_bit_set>:
#include "defines.h"

void ascii_ctrl_bit_set(unsigned char x, unsigned char select){
200001d4:	b580      	push	{r7, lr}
200001d6:	b084      	sub	sp, #16
200001d8:	af00      	add	r7, sp, #0
200001da:	0002      	movs	r2, r0
200001dc:	1dfb      	adds	r3, r7, #7
200001de:	701a      	strb	r2, [r3, #0]
200001e0:	1dbb      	adds	r3, r7, #6
200001e2:	1c0a      	adds	r2, r1, #0
200001e4:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
200001e6:	4a11      	ldr	r2, [pc, #68]	; (2000022c <ascii_ctrl_bit_set+0x58>)
200001e8:	210f      	movs	r1, #15
200001ea:	187b      	adds	r3, r7, r1
200001ec:	7812      	ldrb	r2, [r2, #0]
200001ee:	701a      	strb	r2, [r3, #0]
	if(select){
200001f0:	1dbb      	adds	r3, r7, #6
200001f2:	781b      	ldrb	r3, [r3, #0]
200001f4:	2b00      	cmp	r3, #0
200001f6:	d00b      	beq.n	20000210 <ascii_ctrl_bit_set+0x3c>
		*GPIO_E_ODR_LOW = B_SELECT | x | c; // Select alltid 1 i vårt fall och sätt x biten till 1.
200001f8:	1dfa      	adds	r2, r7, #7
200001fa:	187b      	adds	r3, r7, r1
200001fc:	7812      	ldrb	r2, [r2, #0]
200001fe:	781b      	ldrb	r3, [r3, #0]
20000200:	4313      	orrs	r3, r2
20000202:	b2db      	uxtb	r3, r3
20000204:	4a09      	ldr	r2, [pc, #36]	; (2000022c <ascii_ctrl_bit_set+0x58>)
20000206:	2104      	movs	r1, #4
20000208:	430b      	orrs	r3, r1
2000020a:	b2db      	uxtb	r3, r3
2000020c:	7013      	strb	r3, [r2, #0]
	}
	else{
		*GPIO_E_ODR_LOW = x | c;
	}
}
2000020e:	e008      	b.n	20000222 <ascii_ctrl_bit_set+0x4e>
		*GPIO_E_ODR_LOW = x | c;
20000210:	4906      	ldr	r1, [pc, #24]	; (2000022c <ascii_ctrl_bit_set+0x58>)
20000212:	1dfa      	adds	r2, r7, #7
20000214:	230f      	movs	r3, #15
20000216:	18fb      	adds	r3, r7, r3
20000218:	7812      	ldrb	r2, [r2, #0]
2000021a:	781b      	ldrb	r3, [r3, #0]
2000021c:	4313      	orrs	r3, r2
2000021e:	b2db      	uxtb	r3, r3
20000220:	700b      	strb	r3, [r1, #0]
}
20000222:	46c0      	nop			; (mov r8, r8)
20000224:	46bd      	mov	sp, r7
20000226:	b004      	add	sp, #16
20000228:	bd80      	pop	{r7, pc}
2000022a:	46c0      	nop			; (mov r8, r8)
2000022c:	40021014 	andmi	r1, r2, r4, lsl r0

20000230 <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x, unsigned char select){
20000230:	b580      	push	{r7, lr}
20000232:	b084      	sub	sp, #16
20000234:	af00      	add	r7, sp, #0
20000236:	0002      	movs	r2, r0
20000238:	1dfb      	adds	r3, r7, #7
2000023a:	701a      	strb	r2, [r3, #0]
2000023c:	1dbb      	adds	r3, r7, #6
2000023e:	1c0a      	adds	r2, r1, #0
20000240:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
20000242:	4a13      	ldr	r2, [pc, #76]	; (20000290 <ascii_ctrl_bit_clear+0x60>)
20000244:	210f      	movs	r1, #15
20000246:	187b      	adds	r3, r7, r1
20000248:	7812      	ldrb	r2, [r2, #0]
2000024a:	701a      	strb	r2, [r3, #0]
	c = c & ~x; // detta gör att x biten nollställs medan alla andra bitar behåller sina värden.
2000024c:	1dfb      	adds	r3, r7, #7
2000024e:	781b      	ldrb	r3, [r3, #0]
20000250:	b25b      	sxtb	r3, r3
20000252:	43db      	mvns	r3, r3
20000254:	b25b      	sxtb	r3, r3
20000256:	187a      	adds	r2, r7, r1
20000258:	7812      	ldrb	r2, [r2, #0]
2000025a:	b252      	sxtb	r2, r2
2000025c:	4013      	ands	r3, r2
2000025e:	b25a      	sxtb	r2, r3
20000260:	187b      	adds	r3, r7, r1
20000262:	701a      	strb	r2, [r3, #0]
	if(select){
20000264:	1dbb      	adds	r3, r7, #6
20000266:	781b      	ldrb	r3, [r3, #0]
20000268:	2b00      	cmp	r3, #0
2000026a:	d007      	beq.n	2000027c <ascii_ctrl_bit_clear+0x4c>
		*GPIO_E_ODR_LOW = B_SELECT | c; // Select alltid 1
2000026c:	4a08      	ldr	r2, [pc, #32]	; (20000290 <ascii_ctrl_bit_clear+0x60>)
2000026e:	187b      	adds	r3, r7, r1
20000270:	781b      	ldrb	r3, [r3, #0]
20000272:	2104      	movs	r1, #4
20000274:	430b      	orrs	r3, r1
20000276:	b2db      	uxtb	r3, r3
20000278:	7013      	strb	r3, [r2, #0]
	}
	else{
		*GPIO_E_ODR_LOW = c;
	}
	
}
2000027a:	e004      	b.n	20000286 <ascii_ctrl_bit_clear+0x56>
		*GPIO_E_ODR_LOW = c;
2000027c:	4a04      	ldr	r2, [pc, #16]	; (20000290 <ascii_ctrl_bit_clear+0x60>)
2000027e:	230f      	movs	r3, #15
20000280:	18fb      	adds	r3, r7, r3
20000282:	781b      	ldrb	r3, [r3, #0]
20000284:	7013      	strb	r3, [r2, #0]
}
20000286:	46c0      	nop			; (mov r8, r8)
20000288:	46bd      	mov	sp, r7
2000028a:	b004      	add	sp, #16
2000028c:	bd80      	pop	{r7, pc}
2000028e:	46c0      	nop			; (mov r8, r8)
20000290:	40021014 	andmi	r1, r2, r4, lsl r0

20000294 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){	
20000294:	b580      	push	{r7, lr}
20000296:	b082      	sub	sp, #8
20000298:	af00      	add	r7, sp, #0
2000029a:	0002      	movs	r2, r0
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E, B_SELECT); // E = 1 betyder att arbetscyklen startas
200002a0:	2104      	movs	r1, #4
200002a2:	2040      	movs	r0, #64	; 0x40
200002a4:	f7ff ff96 	bl	200001d4 <ascii_ctrl_bit_set>
	*GPIO_E_ODR_HIGH = byte;
200002a8:	4a06      	ldr	r2, [pc, #24]	; (200002c4 <ascii_write_controller+0x30>)
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	7013      	strb	r3, [r2, #0]
	ascii_ctrl_bit_clear(B_E, B_SELECT); // Efter att uppgiften utförts så avslutar vi arbetscykeln.
200002b0:	2104      	movs	r1, #4
200002b2:	2040      	movs	r0, #64	; 0x40
200002b4:	f7ff ffbc 	bl	20000230 <ascii_ctrl_bit_clear>
	delay_250ns();
200002b8:	f000 f900 	bl	200004bc <delay_250ns>
}
200002bc:	46c0      	nop			; (mov r8, r8)
200002be:	46bd      	mov	sp, r7
200002c0:	b002      	add	sp, #8
200002c2:	bd80      	pop	{r7, pc}
200002c4:	40021015 	andmi	r1, r2, r5, lsl r0

200002c8 <ascii_read_controller>:
	

unsigned char ascii_read_controller(void){
200002c8:	b580      	push	{r7, lr}
200002ca:	b082      	sub	sp, #8
200002cc:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E, B_SELECT); // Starta arbetscyklen
200002ce:	2104      	movs	r1, #4
200002d0:	2040      	movs	r0, #64	; 0x40
200002d2:	f7ff ff7f 	bl	200001d4 <ascii_ctrl_bit_set>
	
	delay_250ns(); // Vänta minst 360 ns innan datan är förberedd av ascii displayen för att läsas
200002d6:	f000 f8f1 	bl	200004bc <delay_250ns>
	delay_250ns();
200002da:	f000 f8ef 	bl	200004bc <delay_250ns>
	
	c = *GPIO_E_IDR_HIGH;
200002de:	4a07      	ldr	r2, [pc, #28]	; (200002fc <ascii_read_controller+0x34>)
200002e0:	1dfb      	adds	r3, r7, #7
200002e2:	7812      	ldrb	r2, [r2, #0]
200002e4:	701a      	strb	r2, [r3, #0]
	
	ascii_ctrl_bit_clear(B_E, B_SELECT);
200002e6:	2104      	movs	r1, #4
200002e8:	2040      	movs	r0, #64	; 0x40
200002ea:	f7ff ffa1 	bl	20000230 <ascii_ctrl_bit_clear>
	
	return c;
200002ee:	1dfb      	adds	r3, r7, #7
200002f0:	781b      	ldrb	r3, [r3, #0]
}
200002f2:	0018      	movs	r0, r3
200002f4:	46bd      	mov	sp, r7
200002f6:	b002      	add	sp, #8
200002f8:	bd80      	pop	{r7, pc}
200002fa:	46c0      	nop			; (mov r8, r8)
200002fc:	40021011 	andmi	r1, r2, r1, lsl r0

20000300 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000300:	b580      	push	{r7, lr}
20000302:	b082      	sub	sp, #8
20000304:	af00      	add	r7, sp, #0
20000306:	0002      	movs	r2, r0
20000308:	1dfb      	adds	r3, r7, #7
2000030a:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS, B_SELECT);
2000030c:	2104      	movs	r1, #4
2000030e:	2001      	movs	r0, #1
20000310:	f7ff ff8e 	bl	20000230 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW, B_SELECT);
20000314:	2104      	movs	r1, #4
20000316:	2002      	movs	r0, #2
20000318:	f7ff ff8a 	bl	20000230 <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
2000031c:	1dfb      	adds	r3, r7, #7
2000031e:	781b      	ldrb	r3, [r3, #0]
20000320:	0018      	movs	r0, r3
20000322:	f7ff ffb7 	bl	20000294 <ascii_write_controller>
}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	46bd      	mov	sp, r7
2000032a:	b002      	add	sp, #8
2000032c:	bd80      	pop	{r7, pc}

2000032e <ascii_write_data>:

void ascii_write_data(unsigned char data){
2000032e:	b580      	push	{r7, lr}
20000330:	b082      	sub	sp, #8
20000332:	af00      	add	r7, sp, #0
20000334:	0002      	movs	r2, r0
20000336:	1dfb      	adds	r3, r7, #7
20000338:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS, B_SELECT);
2000033a:	2104      	movs	r1, #4
2000033c:	2001      	movs	r0, #1
2000033e:	f7ff ff49 	bl	200001d4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW, B_SELECT);
20000342:	2104      	movs	r1, #4
20000344:	2002      	movs	r0, #2
20000346:	f7ff ff73 	bl	20000230 <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000034a:	1dfb      	adds	r3, r7, #7
2000034c:	781b      	ldrb	r3, [r3, #0]
2000034e:	0018      	movs	r0, r3
20000350:	f7ff ffa0 	bl	20000294 <ascii_write_controller>
}
20000354:	46c0      	nop			; (mov r8, r8)
20000356:	46bd      	mov	sp, r7
20000358:	b002      	add	sp, #8
2000035a:	bd80      	pop	{r7, pc}

2000035c <ascii_read_status>:

unsigned char ascii_read_status(void){
2000035c:	b590      	push	{r4, r7, lr}
2000035e:	b083      	sub	sp, #12
20000360:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555; //sätter bit 8-15 i porten (dataregistret för ascii displayen) till ingångar som förberedelse för att ascii_read_controller ska läsa från dem senare.
20000362:	4b0c      	ldr	r3, [pc, #48]	; (20000394 <ascii_read_status+0x38>)
20000364:	4a0c      	ldr	r2, [pc, #48]	; (20000398 <ascii_read_status+0x3c>)
20000366:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW, B_SELECT);
20000368:	2104      	movs	r1, #4
2000036a:	2002      	movs	r0, #2
2000036c:	f7ff ff32 	bl	200001d4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS, B_SELECT);
20000370:	2104      	movs	r1, #4
20000372:	2001      	movs	r0, #1
20000374:	f7ff ff5c 	bl	20000230 <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
20000378:	1dfc      	adds	r4, r7, #7
2000037a:	f7ff ffa5 	bl	200002c8 <ascii_read_controller>
2000037e:	0003      	movs	r3, r0
20000380:	7023      	strb	r3, [r4, #0]
	
	*GPIO_E_MODER = 0x55555555; //återställer dataregistret till utgång
20000382:	4b04      	ldr	r3, [pc, #16]	; (20000394 <ascii_read_status+0x38>)
20000384:	4a05      	ldr	r2, [pc, #20]	; (2000039c <ascii_read_status+0x40>)
20000386:	601a      	str	r2, [r3, #0]
	
	return c;
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
}
2000038c:	0018      	movs	r0, r3
2000038e:	46bd      	mov	sp, r7
20000390:	b003      	add	sp, #12
20000392:	bd90      	pop	{r4, r7, pc}
20000394:	40021000 	andmi	r1, r2, r0
20000398:	00005555 	andeq	r5, r0, r5, asr r5
2000039c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003a0 <ascii_read_data>:

unsigned char ascii_read_data(void){
200003a0:	b590      	push	{r4, r7, lr}
200003a2:	b083      	sub	sp, #12
200003a4:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555;  
200003a6:	4b0c      	ldr	r3, [pc, #48]	; (200003d8 <ascii_read_data+0x38>)
200003a8:	4a0c      	ldr	r2, [pc, #48]	; (200003dc <ascii_read_data+0x3c>)
200003aa:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW, B_SELECT);
200003ac:	2104      	movs	r1, #4
200003ae:	2002      	movs	r0, #2
200003b0:	f7ff ff10 	bl	200001d4 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RS, B_SELECT); // som ovan men nu är RS = 1 för att vi läser data istället för status
200003b4:	2104      	movs	r1, #4
200003b6:	2001      	movs	r0, #1
200003b8:	f7ff ff0c 	bl	200001d4 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
200003bc:	1dfc      	adds	r4, r7, #7
200003be:	f7ff ff83 	bl	200002c8 <ascii_read_controller>
200003c2:	0003      	movs	r3, r0
200003c4:	7023      	strb	r3, [r4, #0]
	
	*GPIO_E_MODER = 0x55555555;
200003c6:	4b04      	ldr	r3, [pc, #16]	; (200003d8 <ascii_read_data+0x38>)
200003c8:	4a05      	ldr	r2, [pc, #20]	; (200003e0 <ascii_read_data+0x40>)
200003ca:	601a      	str	r2, [r3, #0]
	
	return c;
200003cc:	1dfb      	adds	r3, r7, #7
200003ce:	781b      	ldrb	r3, [r3, #0]
}
200003d0:	0018      	movs	r0, r3
200003d2:	46bd      	mov	sp, r7
200003d4:	b003      	add	sp, #12
200003d6:	bd90      	pop	{r4, r7, pc}
200003d8:	40021000 	andmi	r1, r2, r0
200003dc:	00005555 	andeq	r5, r0, r5, asr r5
200003e0:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003e4 <ascii_command>:

void ascii_command(command){
200003e4:	b580      	push	{r7, lr}
200003e6:	b082      	sub	sp, #8
200003e8:	af00      	add	r7, sp, #0
200003ea:	6078      	str	r0, [r7, #4]
	while( ascii_read_status() & 0x80 ); // Vänta så länge ascii displayen är upptagen
200003ec:	46c0      	nop			; (mov r8, r8)
200003ee:	f7ff ffb5 	bl	2000035c <ascii_read_status>
200003f2:	0003      	movs	r3, r0
200003f4:	b25b      	sxtb	r3, r3
200003f6:	2b00      	cmp	r3, #0
200003f8:	dbf9      	blt.n	200003ee <ascii_command+0xa>
	delay_micro(8);
200003fa:	2008      	movs	r0, #8
200003fc:	f000 f880 	bl	20000500 <delay_micro>
	
	ascii_write_cmd(command);
20000400:	687b      	ldr	r3, [r7, #4]
20000402:	b2db      	uxtb	r3, r3
20000404:	0018      	movs	r0, r3
20000406:	f7ff ff7b 	bl	20000300 <ascii_write_cmd>
	
	if(command == CLEAR_DISPLAY){
2000040a:	687b      	ldr	r3, [r7, #4]
2000040c:	2b01      	cmp	r3, #1
2000040e:	d103      	bne.n	20000418 <ascii_command+0x34>
		delay_milli(2);
20000410:	2002      	movs	r0, #2
20000412:	f000 f898 	bl	20000546 <delay_milli>
	}
	else if(command == FUNCTION_SET || command == DISPLAY_CONTROL || ENTRY_MODE_SET){
		delay_micro(39);
	}
}
20000416:	e002      	b.n	2000041e <ascii_command+0x3a>
		delay_micro(39);
20000418:	2027      	movs	r0, #39	; 0x27
2000041a:	f000 f871 	bl	20000500 <delay_micro>
}
2000041e:	46c0      	nop			; (mov r8, r8)
20000420:	46bd      	mov	sp, r7
20000422:	b002      	add	sp, #8
20000424:	bd80      	pop	{r7, pc}

20000426 <ascii_init>:

void ascii_init(void){
20000426:	b580      	push	{r7, lr}
20000428:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS, B_SELECT); // För dessa kommandon skall RS och RW = 0
2000042a:	2104      	movs	r1, #4
2000042c:	2001      	movs	r0, #1
2000042e:	f7ff feff 	bl	20000230 <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW, B_SELECT);
20000432:	2104      	movs	r1, #4
20000434:	2002      	movs	r0, #2
20000436:	f7ff fefb 	bl	20000230 <ascii_ctrl_bit_clear>
	
	ascii_command(FUNCTION_SET);
2000043a:	2030      	movs	r0, #48	; 0x30
2000043c:	f7ff ffd2 	bl	200003e4 <ascii_command>
	ascii_command(DISPLAY_CONTROL);
20000440:	200f      	movs	r0, #15
20000442:	f7ff ffcf 	bl	200003e4 <ascii_command>
	ascii_command(CLEAR_DISPLAY);
20000446:	2001      	movs	r0, #1
20000448:	f7ff ffcc 	bl	200003e4 <ascii_command>
}
2000044c:	46c0      	nop			; (mov r8, r8)
2000044e:	46bd      	mov	sp, r7
20000450:	bd80      	pop	{r7, pc}

20000452 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000452:	b580      	push	{r7, lr}
20000454:	b082      	sub	sp, #8
20000456:	af00      	add	r7, sp, #0
20000458:	0002      	movs	r2, r0
2000045a:	1dfb      	adds	r3, r7, #7
2000045c:	701a      	strb	r2, [r3, #0]
	while( ascii_read_status() & 0x80 ); // Vänta så länge ascii displayen är upptagen
2000045e:	46c0      	nop			; (mov r8, r8)
20000460:	f7ff ff7c 	bl	2000035c <ascii_read_status>
20000464:	0003      	movs	r3, r0
20000466:	b25b      	sxtb	r3, r3
20000468:	2b00      	cmp	r3, #0
2000046a:	dbf9      	blt.n	20000460 <ascii_write_char+0xe>
	delay_micro(8);
2000046c:	2008      	movs	r0, #8
2000046e:	f000 f847 	bl	20000500 <delay_micro>
	
	ascii_write_data(c);
20000472:	1dfb      	adds	r3, r7, #7
20000474:	781b      	ldrb	r3, [r3, #0]
20000476:	0018      	movs	r0, r3
20000478:	f7ff ff59 	bl	2000032e <ascii_write_data>
}
2000047c:	46c0      	nop			; (mov r8, r8)
2000047e:	46bd      	mov	sp, r7
20000480:	b002      	add	sp, #8
20000482:	bd80      	pop	{r7, pc}

20000484 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){	
20000484:	b580      	push	{r7, lr}
20000486:	b084      	sub	sp, #16
20000488:	af00      	add	r7, sp, #0
2000048a:	6078      	str	r0, [r7, #4]
2000048c:	6039      	str	r1, [r7, #0]
	int address = x-1;
2000048e:	687b      	ldr	r3, [r7, #4]
20000490:	3b01      	subs	r3, #1
20000492:	60fb      	str	r3, [r7, #12]
	if (y == 2){
20000494:	683b      	ldr	r3, [r7, #0]
20000496:	2b02      	cmp	r3, #2
20000498:	d102      	bne.n	200004a0 <ascii_gotoxy+0x1c>
		address = address + 0x40; // Teckenminnet har plats för 64 tecken per rad (20 visas), därför blir addressen för rad 2 lika med 0x40 (64 i decimal)
2000049a:	68fb      	ldr	r3, [r7, #12]
2000049c:	3340      	adds	r3, #64	; 0x40
2000049e:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80 | address);
200004a0:	68fb      	ldr	r3, [r7, #12]
200004a2:	b25b      	sxtb	r3, r3
200004a4:	2280      	movs	r2, #128	; 0x80
200004a6:	4252      	negs	r2, r2
200004a8:	4313      	orrs	r3, r2
200004aa:	b25b      	sxtb	r3, r3
200004ac:	b2db      	uxtb	r3, r3
200004ae:	0018      	movs	r0, r3
200004b0:	f7ff ff26 	bl	20000300 <ascii_write_cmd>
200004b4:	46c0      	nop			; (mov r8, r8)
200004b6:	46bd      	mov	sp, r7
200004b8:	b004      	add	sp, #16
200004ba:	bd80      	pop	{r7, pc}

200004bc <delay_250ns>:
#include "defines.h"

void delay_250ns(void){
200004bc:	b580      	push	{r7, lr}
200004be:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
200004c0:	4b0c      	ldr	r3, [pc, #48]	; (200004f4 <delay_250ns+0x38>)
200004c2:	2200      	movs	r2, #0
200004c4:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4) - 1);
200004c6:	4b0c      	ldr	r3, [pc, #48]	; (200004f8 <delay_250ns+0x3c>)
200004c8:	2229      	movs	r2, #41	; 0x29
200004ca:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
200004cc:	4b0b      	ldr	r3, [pc, #44]	; (200004fc <delay_250ns+0x40>)
200004ce:	2200      	movs	r2, #0
200004d0:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
200004d2:	4b08      	ldr	r3, [pc, #32]	; (200004f4 <delay_250ns+0x38>)
200004d4:	2205      	movs	r2, #5
200004d6:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000) == 0); // Väntar tills statusbiten är lika med 0 innan den fortsätter då det innebär att nedräkningen är färdig.
200004d8:	46c0      	nop			; (mov r8, r8)
200004da:	4b06      	ldr	r3, [pc, #24]	; (200004f4 <delay_250ns+0x38>)
200004dc:	681a      	ldr	r2, [r3, #0]
200004de:	2380      	movs	r3, #128	; 0x80
200004e0:	025b      	lsls	r3, r3, #9
200004e2:	4013      	ands	r3, r2
200004e4:	d0f9      	beq.n	200004da <delay_250ns+0x1e>
    *STK_CTRL = 0;
200004e6:	4b03      	ldr	r3, [pc, #12]	; (200004f4 <delay_250ns+0x38>)
200004e8:	2200      	movs	r2, #0
200004ea:	601a      	str	r2, [r3, #0]
}
200004ec:	46c0      	nop			; (mov r8, r8)
200004ee:	46bd      	mov	sp, r7
200004f0:	bd80      	pop	{r7, pc}
200004f2:	46c0      	nop			; (mov r8, r8)
200004f4:	e000e010 	and	lr, r0, r0, lsl r0
200004f8:	e000e014 	and	lr, r0, r4, lsl r0
200004fc:	e000e018 	and	lr, r0, r8, lsl r0

20000500 <delay_micro>:

void delay_micro(unsigned int us){
20000500:	b580      	push	{r7, lr}
20000502:	b082      	sub	sp, #8
20000504:	af00      	add	r7, sp, #0
20000506:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 1000;
20000508:	687b      	ldr	r3, [r7, #4]
2000050a:	22fa      	movs	r2, #250	; 0xfa
2000050c:	0091      	lsls	r1, r2, #2
2000050e:	0018      	movs	r0, r3
20000510:	f000 fc3e 	bl	20000d90 <__udivsi3>
20000514:	0003      	movs	r3, r0
20000516:	607b      	str	r3, [r7, #4]
    us++;
20000518:	687b      	ldr	r3, [r7, #4]
2000051a:	3301      	adds	r3, #1
2000051c:	607b      	str	r3, [r7, #4]
#endif 
    while( us > 0 ){
2000051e:	e00a      	b.n	20000536 <delay_micro+0x36>
        delay_250ns();
20000520:	f7ff ffcc 	bl	200004bc <delay_250ns>
        delay_250ns();
20000524:	f7ff ffca 	bl	200004bc <delay_250ns>
        delay_250ns();
20000528:	f7ff ffc8 	bl	200004bc <delay_250ns>
        delay_250ns();
2000052c:	f7ff ffc6 	bl	200004bc <delay_250ns>
        us--;
20000530:	687b      	ldr	r3, [r7, #4]
20000532:	3b01      	subs	r3, #1
20000534:	607b      	str	r3, [r7, #4]
    while( us > 0 ){
20000536:	687b      	ldr	r3, [r7, #4]
20000538:	2b00      	cmp	r3, #0
2000053a:	d1f1      	bne.n	20000520 <delay_micro+0x20>
    }
}
2000053c:	46c0      	nop			; (mov r8, r8)
2000053e:	46c0      	nop			; (mov r8, r8)
20000540:	46bd      	mov	sp, r7
20000542:	b002      	add	sp, #8
20000544:	bd80      	pop	{r7, pc}

20000546 <delay_milli>:

void delay_milli(unsigned int ms){
20000546:	b580      	push	{r7, lr}
20000548:	b082      	sub	sp, #8
2000054a:	af00      	add	r7, sp, #0
2000054c:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    ms /= 1000;
2000054e:	687b      	ldr	r3, [r7, #4]
20000550:	22fa      	movs	r2, #250	; 0xfa
20000552:	0091      	lsls	r1, r2, #2
20000554:	0018      	movs	r0, r3
20000556:	f000 fc1b 	bl	20000d90 <__udivsi3>
2000055a:	0003      	movs	r3, r0
2000055c:	607b      	str	r3, [r7, #4]
    ms++;
2000055e:	687b      	ldr	r3, [r7, #4]
20000560:	3301      	adds	r3, #1
20000562:	607b      	str	r3, [r7, #4]
#endif
    while(ms > 0){
20000564:	e007      	b.n	20000576 <delay_milli+0x30>
        delay_micro(1000);
20000566:	23fa      	movs	r3, #250	; 0xfa
20000568:	009b      	lsls	r3, r3, #2
2000056a:	0018      	movs	r0, r3
2000056c:	f7ff ffc8 	bl	20000500 <delay_micro>
        ms--;
20000570:	687b      	ldr	r3, [r7, #4]
20000572:	3b01      	subs	r3, #1
20000574:	607b      	str	r3, [r7, #4]
    while(ms > 0){
20000576:	687b      	ldr	r3, [r7, #4]
20000578:	2b00      	cmp	r3, #0
2000057a:	d1f4      	bne.n	20000566 <delay_milli+0x20>
    }
2000057c:	46c0      	nop			; (mov r8, r8)
2000057e:	46c0      	nop			; (mov r8, r8)
20000580:	46bd      	mov	sp, r7
20000582:	b002      	add	sp, #8
20000584:	bd80      	pop	{r7, pc}

20000586 <draw_object>:
	void (*clear) (struct tObj *);
	int (* move) (struct tObj *);
	void (* set_speed) (struct tObj *, int, int);
} OBJECT, *POBJECT;

void draw_object(POBJECT obj){
20000586:	b580      	push	{r7, lr}
20000588:	b084      	sub	sp, #16
2000058a:	af00      	add	r7, sp, #0
2000058c:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < obj->geo->numpoints; i++){
2000058e:	2300      	movs	r3, #0
20000590:	60fb      	str	r3, [r7, #12]
20000592:	e01d      	b.n	200005d0 <draw_object+0x4a>
		graphic_pixel_set(obj->geo->px[i].x + obj->posx, obj->geo->px[i].y + obj->posy);
20000594:	687b      	ldr	r3, [r7, #4]
20000596:	681a      	ldr	r2, [r3, #0]
20000598:	68fb      	ldr	r3, [r7, #12]
2000059a:	3304      	adds	r3, #4
2000059c:	005b      	lsls	r3, r3, #1
2000059e:	18d3      	adds	r3, r2, r3
200005a0:	3304      	adds	r3, #4
200005a2:	781b      	ldrb	r3, [r3, #0]
200005a4:	001a      	movs	r2, r3
200005a6:	687b      	ldr	r3, [r7, #4]
200005a8:	68db      	ldr	r3, [r3, #12]
200005aa:	18d0      	adds	r0, r2, r3
200005ac:	687b      	ldr	r3, [r7, #4]
200005ae:	681a      	ldr	r2, [r3, #0]
200005b0:	68fb      	ldr	r3, [r7, #12]
200005b2:	3304      	adds	r3, #4
200005b4:	005b      	lsls	r3, r3, #1
200005b6:	18d3      	adds	r3, r2, r3
200005b8:	3305      	adds	r3, #5
200005ba:	781b      	ldrb	r3, [r3, #0]
200005bc:	001a      	movs	r2, r3
200005be:	687b      	ldr	r3, [r7, #4]
200005c0:	691b      	ldr	r3, [r3, #16]
200005c2:	18d3      	adds	r3, r2, r3
200005c4:	0019      	movs	r1, r3
200005c6:	f000 f872 	bl	200006ae <graphic_pixel_set>
	for(int i = 0; i < obj->geo->numpoints; i++){
200005ca:	68fb      	ldr	r3, [r7, #12]
200005cc:	3301      	adds	r3, #1
200005ce:	60fb      	str	r3, [r7, #12]
200005d0:	687b      	ldr	r3, [r7, #4]
200005d2:	681b      	ldr	r3, [r3, #0]
200005d4:	681b      	ldr	r3, [r3, #0]
200005d6:	68fa      	ldr	r2, [r7, #12]
200005d8:	429a      	cmp	r2, r3
200005da:	dbdb      	blt.n	20000594 <draw_object+0xe>
	}
}
200005dc:	46c0      	nop			; (mov r8, r8)
200005de:	46c0      	nop			; (mov r8, r8)
200005e0:	46bd      	mov	sp, r7
200005e2:	b004      	add	sp, #16
200005e4:	bd80      	pop	{r7, pc}

200005e6 <clear_object>:

void clear_object(POBJECT obj){
200005e6:	b580      	push	{r7, lr}
200005e8:	b084      	sub	sp, #16
200005ea:	af00      	add	r7, sp, #0
200005ec:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < obj->geo->numpoints; i++){
200005ee:	2300      	movs	r3, #0
200005f0:	60fb      	str	r3, [r7, #12]
200005f2:	e01d      	b.n	20000630 <clear_object+0x4a>
		graphic_pixel_clear(obj->geo->px[i].x + obj->posx, obj->geo->px[i].y + obj->posy);
200005f4:	687b      	ldr	r3, [r7, #4]
200005f6:	681a      	ldr	r2, [r3, #0]
200005f8:	68fb      	ldr	r3, [r7, #12]
200005fa:	3304      	adds	r3, #4
200005fc:	005b      	lsls	r3, r3, #1
200005fe:	18d3      	adds	r3, r2, r3
20000600:	3304      	adds	r3, #4
20000602:	781b      	ldrb	r3, [r3, #0]
20000604:	001a      	movs	r2, r3
20000606:	687b      	ldr	r3, [r7, #4]
20000608:	68db      	ldr	r3, [r3, #12]
2000060a:	18d0      	adds	r0, r2, r3
2000060c:	687b      	ldr	r3, [r7, #4]
2000060e:	681a      	ldr	r2, [r3, #0]
20000610:	68fb      	ldr	r3, [r7, #12]
20000612:	3304      	adds	r3, #4
20000614:	005b      	lsls	r3, r3, #1
20000616:	18d3      	adds	r3, r2, r3
20000618:	3305      	adds	r3, #5
2000061a:	781b      	ldrb	r3, [r3, #0]
2000061c:	001a      	movs	r2, r3
2000061e:	687b      	ldr	r3, [r7, #4]
20000620:	691b      	ldr	r3, [r3, #16]
20000622:	18d3      	adds	r3, r2, r3
20000624:	0019      	movs	r1, r3
20000626:	f000 f845 	bl	200006b4 <graphic_pixel_clear>
	for(int i = 0; i < obj->geo->numpoints; i++){
2000062a:	68fb      	ldr	r3, [r7, #12]
2000062c:	3301      	adds	r3, #1
2000062e:	60fb      	str	r3, [r7, #12]
20000630:	687b      	ldr	r3, [r7, #4]
20000632:	681b      	ldr	r3, [r3, #0]
20000634:	681b      	ldr	r3, [r3, #0]
20000636:	68fa      	ldr	r2, [r7, #12]
20000638:	429a      	cmp	r2, r3
2000063a:	dbdb      	blt.n	200005f4 <clear_object+0xe>
	}
}
2000063c:	46c0      	nop			; (mov r8, r8)
2000063e:	46c0      	nop			; (mov r8, r8)
20000640:	46bd      	mov	sp, r7
20000642:	b004      	add	sp, #16
20000644:	bd80      	pop	{r7, pc}

20000646 <move_object>:

void move_object(POBJECT obj){
20000646:	b580      	push	{r7, lr}
20000648:	b082      	sub	sp, #8
2000064a:	af00      	add	r7, sp, #0
2000064c:	6078      	str	r0, [r7, #4]
	clear_object(obj);
2000064e:	687b      	ldr	r3, [r7, #4]
20000650:	0018      	movs	r0, r3
20000652:	f7ff ffc8 	bl	200005e6 <clear_object>
	obj->posx += obj->dirx;
20000656:	687b      	ldr	r3, [r7, #4]
20000658:	68da      	ldr	r2, [r3, #12]
2000065a:	687b      	ldr	r3, [r7, #4]
2000065c:	685b      	ldr	r3, [r3, #4]
2000065e:	18d2      	adds	r2, r2, r3
20000660:	687b      	ldr	r3, [r7, #4]
20000662:	60da      	str	r2, [r3, #12]
	obj->posy += obj->diry;
20000664:	687b      	ldr	r3, [r7, #4]
20000666:	691a      	ldr	r2, [r3, #16]
20000668:	687b      	ldr	r3, [r7, #4]
2000066a:	689b      	ldr	r3, [r3, #8]
2000066c:	18d2      	adds	r2, r2, r3
2000066e:	687b      	ldr	r3, [r7, #4]
20000670:	611a      	str	r2, [r3, #16]
	draw_object(obj);
20000672:	687b      	ldr	r3, [r7, #4]
20000674:	0018      	movs	r0, r3
20000676:	f7ff ff86 	bl	20000586 <draw_object>
}
2000067a:	46c0      	nop			; (mov r8, r8)
2000067c:	46bd      	mov	sp, r7
2000067e:	b002      	add	sp, #8
20000680:	bd80      	pop	{r7, pc}

20000682 <set_object_speed>:

void set_object_speed(POBJECT obj, int x, int y){
20000682:	b580      	push	{r7, lr}
20000684:	b084      	sub	sp, #16
20000686:	af00      	add	r7, sp, #0
20000688:	60f8      	str	r0, [r7, #12]
2000068a:	60b9      	str	r1, [r7, #8]
2000068c:	607a      	str	r2, [r7, #4]
	obj->dirx = x;
2000068e:	68fb      	ldr	r3, [r7, #12]
20000690:	68ba      	ldr	r2, [r7, #8]
20000692:	605a      	str	r2, [r3, #4]
	obj->diry = y;
20000694:	68fb      	ldr	r3, [r7, #12]
20000696:	687a      	ldr	r2, [r7, #4]
20000698:	609a      	str	r2, [r3, #8]
}
2000069a:	46c0      	nop			; (mov r8, r8)
2000069c:	46bd      	mov	sp, r7
2000069e:	b004      	add	sp, #16
200006a0:	bd80      	pop	{r7, pc}

200006a2 <graphic_initialize>:

__attribute__((naked))
void graphic_initialize(void){
200006a2:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
    __asm volatile (" .HWORD 0xDFF0\n");
    __asm volatile (" BX LR\n");
}
200006a6:	46c0      	nop			; (mov r8, r8)

200006a8 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void){
200006a8:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
    __asm volatile (" .HWORD 0xDFF1\n");
    __asm volatile (" BX LR\n");
}
200006ac:	46c0      	nop			; (mov r8, r8)

200006ae <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(int x, int y){
200006ae:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
    __asm volatile (" .HWORD 0xDFF2\n");
    __asm volatile (" BX LR\n");
}
200006b2:	46c0      	nop			; (mov r8, r8)

200006b4 <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(int x, int y){
200006b4:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
    __asm volatile (" .HWORD 0xDFF3\n");
    __asm volatile (" BX LR\n");
}
200006b8:	46c0      	nop			; (mov r8, r8)

200006ba <init_app>:

void init_app(void) {
200006ba:	b580      	push	{r7, lr}
200006bc:	af00      	add	r7, sp, #0
    *GPIO_D_MODER = 0x55005555;
200006be:	4b04      	ldr	r3, [pc, #16]	; (200006d0 <init_app+0x16>)
200006c0:	4a04      	ldr	r2, [pc, #16]	; (200006d4 <init_app+0x1a>)
200006c2:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER = 0x55555555;
200006c4:	4b04      	ldr	r3, [pc, #16]	; (200006d8 <init_app+0x1e>)
200006c6:	4a05      	ldr	r2, [pc, #20]	; (200006dc <init_app+0x22>)
200006c8:	601a      	str	r2, [r3, #0]
}
200006ca:	46c0      	nop			; (mov r8, r8)
200006cc:	46bd      	mov	sp, r7
200006ce:	bd80      	pop	{r7, pc}
200006d0:	40020c00 	andmi	r0, r2, r0, lsl #24
200006d4:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
200006d8:	40021000 	andmi	r1, r2, r0
200006dc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200006e0 <timer6_init>:

void timer6_init(){
200006e0:	b580      	push	{r7, lr}
200006e2:	af00      	add	r7, sp, #0
	*TIM6_CR1 &= ~CEN;
200006e4:	4b0b      	ldr	r3, [pc, #44]	; (20000714 <timer6_init+0x34>)
200006e6:	881b      	ldrh	r3, [r3, #0]
200006e8:	b29b      	uxth	r3, r3
200006ea:	4a0a      	ldr	r2, [pc, #40]	; (20000714 <timer6_init+0x34>)
200006ec:	2101      	movs	r1, #1
200006ee:	438b      	bics	r3, r1
200006f0:	b29b      	uxth	r3, r3
200006f2:	8013      	strh	r3, [r2, #0]
	*TIM6_ARR = 0xFFFF;
200006f4:	4b08      	ldr	r3, [pc, #32]	; (20000718 <timer6_init+0x38>)
200006f6:	2201      	movs	r2, #1
200006f8:	4252      	negs	r2, r2
200006fa:	801a      	strh	r2, [r3, #0]
	*TIM6_CR1 |= (CEN | UDIS);
200006fc:	4b05      	ldr	r3, [pc, #20]	; (20000714 <timer6_init+0x34>)
200006fe:	881b      	ldrh	r3, [r3, #0]
20000700:	b29b      	uxth	r3, r3
20000702:	4a04      	ldr	r2, [pc, #16]	; (20000714 <timer6_init+0x34>)
20000704:	2103      	movs	r1, #3
20000706:	430b      	orrs	r3, r1
20000708:	b29b      	uxth	r3, r3
2000070a:	8013      	strh	r3, [r2, #0]
	
}
2000070c:	46c0      	nop			; (mov r8, r8)
2000070e:	46bd      	mov	sp, r7
20000710:	bd80      	pop	{r7, pc}
20000712:	46c0      	nop			; (mov r8, r8)
20000714:	40001000 	andmi	r1, r0, r0
20000718:	4000102c 	andmi	r1, r0, ip, lsr #32

2000071c <objects_overlap>:

int objects_overlap( POBJECT birb, POBJECT obst_1_t, POBJECT obst_1_b, POBJECT obst_2_t, POBJECT obst_2_b){
2000071c:	b580      	push	{r7, lr}
2000071e:	b084      	sub	sp, #16
20000720:	af00      	add	r7, sp, #0
20000722:	60f8      	str	r0, [r7, #12]
20000724:	60b9      	str	r1, [r7, #8]
20000726:	607a      	str	r2, [r7, #4]
20000728:	603b      	str	r3, [r7, #0]

	if(obst_1_t->posx <= birb->posx + birb->geo->sizex - 1 && !(obst_1_t->posx + obst_1_t->geo->sizex < birb->posx)){
2000072a:	68fb      	ldr	r3, [r7, #12]
2000072c:	68da      	ldr	r2, [r3, #12]
2000072e:	68fb      	ldr	r3, [r7, #12]
20000730:	681b      	ldr	r3, [r3, #0]
20000732:	685b      	ldr	r3, [r3, #4]
20000734:	18d2      	adds	r2, r2, r3
20000736:	68bb      	ldr	r3, [r7, #8]
20000738:	68db      	ldr	r3, [r3, #12]
2000073a:	429a      	cmp	r2, r3
2000073c:	dd24      	ble.n	20000788 <objects_overlap+0x6c>
2000073e:	68bb      	ldr	r3, [r7, #8]
20000740:	68da      	ldr	r2, [r3, #12]
20000742:	68bb      	ldr	r3, [r7, #8]
20000744:	681b      	ldr	r3, [r3, #0]
20000746:	685b      	ldr	r3, [r3, #4]
20000748:	18d2      	adds	r2, r2, r3
2000074a:	68fb      	ldr	r3, [r7, #12]
2000074c:	68db      	ldr	r3, [r3, #12]
2000074e:	429a      	cmp	r2, r3
20000750:	db1a      	blt.n	20000788 <objects_overlap+0x6c>
		if(birb->posy <= obst_1_t->posy + obst_1_t->geo->sizey) return 1;
20000752:	68fb      	ldr	r3, [r7, #12]
20000754:	691a      	ldr	r2, [r3, #16]
20000756:	68bb      	ldr	r3, [r7, #8]
20000758:	6919      	ldr	r1, [r3, #16]
2000075a:	68bb      	ldr	r3, [r7, #8]
2000075c:	681b      	ldr	r3, [r3, #0]
2000075e:	689b      	ldr	r3, [r3, #8]
20000760:	18cb      	adds	r3, r1, r3
20000762:	429a      	cmp	r2, r3
20000764:	dc01      	bgt.n	2000076a <objects_overlap+0x4e>
20000766:	2301      	movs	r3, #1
20000768:	e03e      	b.n	200007e8 <objects_overlap+0xcc>
		else if(birb->posy + birb->geo->sizey - 3 >= obst_1_b->posy) return 1;
2000076a:	68fb      	ldr	r3, [r7, #12]
2000076c:	691a      	ldr	r2, [r3, #16]
2000076e:	68fb      	ldr	r3, [r7, #12]
20000770:	681b      	ldr	r3, [r3, #0]
20000772:	689b      	ldr	r3, [r3, #8]
20000774:	18d3      	adds	r3, r2, r3
20000776:	1e9a      	subs	r2, r3, #2
20000778:	687b      	ldr	r3, [r7, #4]
2000077a:	691b      	ldr	r3, [r3, #16]
2000077c:	429a      	cmp	r2, r3
2000077e:	dd01      	ble.n	20000784 <objects_overlap+0x68>
20000780:	2301      	movs	r3, #1
20000782:	e031      	b.n	200007e8 <objects_overlap+0xcc>
		else return 0;
20000784:	2300      	movs	r3, #0
20000786:	e02f      	b.n	200007e8 <objects_overlap+0xcc>
	}
	
	else if(obst_2_t->posx <= birb->posx + birb->geo->sizex - 1 && !(obst_2_t->posx + obst_2_t->geo->sizex < birb->posx)){
20000788:	68fb      	ldr	r3, [r7, #12]
2000078a:	68da      	ldr	r2, [r3, #12]
2000078c:	68fb      	ldr	r3, [r7, #12]
2000078e:	681b      	ldr	r3, [r3, #0]
20000790:	685b      	ldr	r3, [r3, #4]
20000792:	18d2      	adds	r2, r2, r3
20000794:	683b      	ldr	r3, [r7, #0]
20000796:	68db      	ldr	r3, [r3, #12]
20000798:	429a      	cmp	r2, r3
2000079a:	dd24      	ble.n	200007e6 <objects_overlap+0xca>
2000079c:	683b      	ldr	r3, [r7, #0]
2000079e:	68da      	ldr	r2, [r3, #12]
200007a0:	683b      	ldr	r3, [r7, #0]
200007a2:	681b      	ldr	r3, [r3, #0]
200007a4:	685b      	ldr	r3, [r3, #4]
200007a6:	18d2      	adds	r2, r2, r3
200007a8:	68fb      	ldr	r3, [r7, #12]
200007aa:	68db      	ldr	r3, [r3, #12]
200007ac:	429a      	cmp	r2, r3
200007ae:	db1a      	blt.n	200007e6 <objects_overlap+0xca>
		if(birb->posy <= obst_2_t->posy + obst_2_t->geo->sizey) return 1;
200007b0:	68fb      	ldr	r3, [r7, #12]
200007b2:	691a      	ldr	r2, [r3, #16]
200007b4:	683b      	ldr	r3, [r7, #0]
200007b6:	6919      	ldr	r1, [r3, #16]
200007b8:	683b      	ldr	r3, [r7, #0]
200007ba:	681b      	ldr	r3, [r3, #0]
200007bc:	689b      	ldr	r3, [r3, #8]
200007be:	18cb      	adds	r3, r1, r3
200007c0:	429a      	cmp	r2, r3
200007c2:	dc01      	bgt.n	200007c8 <objects_overlap+0xac>
200007c4:	2301      	movs	r3, #1
200007c6:	e00f      	b.n	200007e8 <objects_overlap+0xcc>
		else if(birb->posy + birb->geo->sizey - 3 >= obst_2_b->posy) return 1;  
200007c8:	68fb      	ldr	r3, [r7, #12]
200007ca:	691a      	ldr	r2, [r3, #16]
200007cc:	68fb      	ldr	r3, [r7, #12]
200007ce:	681b      	ldr	r3, [r3, #0]
200007d0:	689b      	ldr	r3, [r3, #8]
200007d2:	18d3      	adds	r3, r2, r3
200007d4:	1e9a      	subs	r2, r3, #2
200007d6:	69bb      	ldr	r3, [r7, #24]
200007d8:	691b      	ldr	r3, [r3, #16]
200007da:	429a      	cmp	r2, r3
200007dc:	dd01      	ble.n	200007e2 <objects_overlap+0xc6>
200007de:	2301      	movs	r3, #1
200007e0:	e002      	b.n	200007e8 <objects_overlap+0xcc>
		else return 0;
200007e2:	2300      	movs	r3, #0
200007e4:	e000      	b.n	200007e8 <objects_overlap+0xcc>
	} else return 0; 
200007e6:	2300      	movs	r3, #0
}
200007e8:	0018      	movs	r0, r3
200007ea:	46bd      	mov	sp, r7
200007ec:	b004      	add	sp, #16
200007ee:	bd80      	pop	{r7, pc}

200007f0 <move_obstacles>:

void move_obstacles(POBJECT o1t, POBJECT o1b, POBJECT o2t, POBJECT o2b){
200007f0:	b580      	push	{r7, lr}
200007f2:	b084      	sub	sp, #16
200007f4:	af00      	add	r7, sp, #0
200007f6:	60f8      	str	r0, [r7, #12]
200007f8:	60b9      	str	r1, [r7, #8]
200007fa:	607a      	str	r2, [r7, #4]
200007fc:	603b      	str	r3, [r7, #0]
	o1t->move(o1t);
200007fe:	68fb      	ldr	r3, [r7, #12]
20000800:	69db      	ldr	r3, [r3, #28]
20000802:	68fa      	ldr	r2, [r7, #12]
20000804:	0010      	movs	r0, r2
20000806:	4798      	blx	r3
	o1b->move(o1b);
20000808:	68bb      	ldr	r3, [r7, #8]
2000080a:	69db      	ldr	r3, [r3, #28]
2000080c:	68ba      	ldr	r2, [r7, #8]
2000080e:	0010      	movs	r0, r2
20000810:	4798      	blx	r3
	o2t->move(o2t);
20000812:	687b      	ldr	r3, [r7, #4]
20000814:	69db      	ldr	r3, [r3, #28]
20000816:	687a      	ldr	r2, [r7, #4]
20000818:	0010      	movs	r0, r2
2000081a:	4798      	blx	r3
	o1b->move(o2b);
2000081c:	68bb      	ldr	r3, [r7, #8]
2000081e:	69db      	ldr	r3, [r3, #28]
20000820:	683a      	ldr	r2, [r7, #0]
20000822:	0010      	movs	r0, r2
20000824:	4798      	blx	r3
}
20000826:	46c0      	nop			; (mov r8, r8)
20000828:	46bd      	mov	sp, r7
2000082a:	b004      	add	sp, #16
2000082c:	bd80      	pop	{r7, pc}

2000082e <set_obstacle_speed>:

void set_obstacle_speed(int x, int y, POBJECT o1t, POBJECT o1b, POBJECT o2t, POBJECT o2b){
2000082e:	b580      	push	{r7, lr}
20000830:	b084      	sub	sp, #16
20000832:	af00      	add	r7, sp, #0
20000834:	60f8      	str	r0, [r7, #12]
20000836:	60b9      	str	r1, [r7, #8]
20000838:	607a      	str	r2, [r7, #4]
2000083a:	603b      	str	r3, [r7, #0]
	o1t->set_speed(o1t, x,y);
2000083c:	687b      	ldr	r3, [r7, #4]
2000083e:	6a1b      	ldr	r3, [r3, #32]
20000840:	68ba      	ldr	r2, [r7, #8]
20000842:	68f9      	ldr	r1, [r7, #12]
20000844:	6878      	ldr	r0, [r7, #4]
20000846:	4798      	blx	r3
	o1b->set_speed(o1b, x,y);
20000848:	683b      	ldr	r3, [r7, #0]
2000084a:	6a1b      	ldr	r3, [r3, #32]
2000084c:	68ba      	ldr	r2, [r7, #8]
2000084e:	68f9      	ldr	r1, [r7, #12]
20000850:	6838      	ldr	r0, [r7, #0]
20000852:	4798      	blx	r3
	o2t->set_speed(o2t, x,y);
20000854:	69bb      	ldr	r3, [r7, #24]
20000856:	6a1b      	ldr	r3, [r3, #32]
20000858:	68ba      	ldr	r2, [r7, #8]
2000085a:	68f9      	ldr	r1, [r7, #12]
2000085c:	69b8      	ldr	r0, [r7, #24]
2000085e:	4798      	blx	r3
	o2b->set_speed(o2b, x,y);
20000860:	69fb      	ldr	r3, [r7, #28]
20000862:	6a1b      	ldr	r3, [r3, #32]
20000864:	68ba      	ldr	r2, [r7, #8]
20000866:	68f9      	ldr	r1, [r7, #12]
20000868:	69f8      	ldr	r0, [r7, #28]
2000086a:	4798      	blx	r3
}
2000086c:	46c0      	nop			; (mov r8, r8)
2000086e:	46bd      	mov	sp, r7
20000870:	b004      	add	sp, #16
20000872:	bd80      	pop	{r7, pc}

20000874 <reset_obj_position>:

void reset_obj_position(POBJECT ot1, POBJECT ob1, POBJECT ot2, POBJECT ob2, POBJECT bs, POBJECT bf){
20000874:	b580      	push	{r7, lr}
20000876:	b084      	sub	sp, #16
20000878:	af00      	add	r7, sp, #0
2000087a:	60f8      	str	r0, [r7, #12]
2000087c:	60b9      	str	r1, [r7, #8]
2000087e:	607a      	str	r2, [r7, #4]
20000880:	603b      	str	r3, [r7, #0]
	ot1->posx = 60;
20000882:	68fb      	ldr	r3, [r7, #12]
20000884:	223c      	movs	r2, #60	; 0x3c
20000886:	60da      	str	r2, [r3, #12]
	ot1->posy = -29;
20000888:	68fb      	ldr	r3, [r7, #12]
2000088a:	221d      	movs	r2, #29
2000088c:	4252      	negs	r2, r2
2000088e:	611a      	str	r2, [r3, #16]
	ob1->posx = 60;
20000890:	68bb      	ldr	r3, [r7, #8]
20000892:	223c      	movs	r2, #60	; 0x3c
20000894:	60da      	str	r2, [r3, #12]
	ob1->posy = 43;
20000896:	68bb      	ldr	r3, [r7, #8]
20000898:	222b      	movs	r2, #43	; 0x2b
2000089a:	611a      	str	r2, [r3, #16]
	
	ot2->posx = 130;
2000089c:	687b      	ldr	r3, [r7, #4]
2000089e:	2282      	movs	r2, #130	; 0x82
200008a0:	60da      	str	r2, [r3, #12]
	ot2->posy = -29;
200008a2:	687b      	ldr	r3, [r7, #4]
200008a4:	221d      	movs	r2, #29
200008a6:	4252      	negs	r2, r2
200008a8:	611a      	str	r2, [r3, #16]
	ob2->posx = 130;
200008aa:	683b      	ldr	r3, [r7, #0]
200008ac:	2282      	movs	r2, #130	; 0x82
200008ae:	60da      	str	r2, [r3, #12]
	ob2->posy = 43;
200008b0:	683b      	ldr	r3, [r7, #0]
200008b2:	222b      	movs	r2, #43	; 0x2b
200008b4:	611a      	str	r2, [r3, #16]
	
	bs->posy = 30;
200008b6:	69bb      	ldr	r3, [r7, #24]
200008b8:	221e      	movs	r2, #30
200008ba:	611a      	str	r2, [r3, #16]
	bf->posy = 30;
200008bc:	69fb      	ldr	r3, [r7, #28]
200008be:	221e      	movs	r2, #30
200008c0:	611a      	str	r2, [r3, #16]
}
200008c2:	46c0      	nop			; (mov r8, r8)
200008c4:	46bd      	mov	sp, r7
200008c6:	b004      	add	sp, #16
200008c8:	bd80      	pop	{r7, pc}

200008ca <display_ctr>:

void display_ctr(char pt_array[]){
200008ca:	b590      	push	{r4, r7, lr}
200008cc:	b087      	sub	sp, #28
200008ce:	af00      	add	r7, sp, #0
200008d0:	6078      	str	r0, [r7, #4]
	char *ptext;
	char text[] = "Points: ";
200008d2:	2108      	movs	r1, #8
200008d4:	187b      	adds	r3, r7, r1
200008d6:	4a16      	ldr	r2, [pc, #88]	; (20000930 <display_ctr+0x66>)
200008d8:	ca11      	ldmia	r2!, {r0, r4}
200008da:	c311      	stmia	r3!, {r0, r4}
200008dc:	7812      	ldrb	r2, [r2, #0]
200008de:	701a      	strb	r2, [r3, #0]
	ptext = text;
200008e0:	187b      	adds	r3, r7, r1
200008e2:	617b      	str	r3, [r7, #20]
	
	ascii_gotoxy(1,1);
200008e4:	2101      	movs	r1, #1
200008e6:	2001      	movs	r0, #1
200008e8:	f7ff fdcc 	bl	20000484 <ascii_gotoxy>
	while(*ptext){
200008ec:	e006      	b.n	200008fc <display_ctr+0x32>
		ascii_write_char(*ptext++);
200008ee:	697b      	ldr	r3, [r7, #20]
200008f0:	1c5a      	adds	r2, r3, #1
200008f2:	617a      	str	r2, [r7, #20]
200008f4:	781b      	ldrb	r3, [r3, #0]
200008f6:	0018      	movs	r0, r3
200008f8:	f7ff fdab 	bl	20000452 <ascii_write_char>
	while(*ptext){
200008fc:	697b      	ldr	r3, [r7, #20]
200008fe:	781b      	ldrb	r3, [r3, #0]
20000900:	2b00      	cmp	r3, #0
20000902:	d1f4      	bne.n	200008ee <display_ctr+0x24>
	}

	ascii_gotoxy(9,1);
20000904:	2101      	movs	r1, #1
20000906:	2009      	movs	r0, #9
20000908:	f7ff fdbc 	bl	20000484 <ascii_gotoxy>
	while(*pt_array){
2000090c:	e006      	b.n	2000091c <display_ctr+0x52>
		ascii_write_char(*pt_array++);
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	1c5a      	adds	r2, r3, #1
20000912:	607a      	str	r2, [r7, #4]
20000914:	781b      	ldrb	r3, [r3, #0]
20000916:	0018      	movs	r0, r3
20000918:	f7ff fd9b 	bl	20000452 <ascii_write_char>
	while(*pt_array){
2000091c:	687b      	ldr	r3, [r7, #4]
2000091e:	781b      	ldrb	r3, [r3, #0]
20000920:	2b00      	cmp	r3, #0
20000922:	d1f4      	bne.n	2000090e <display_ctr+0x44>
	}
}
20000924:	46c0      	nop			; (mov r8, r8)
20000926:	46c0      	nop			; (mov r8, r8)
20000928:	46bd      	mov	sp, r7
2000092a:	b007      	add	sp, #28
2000092c:	bd90      	pop	{r4, r7, pc}
2000092e:	46c0      	nop			; (mov r8, r8)
20000930:	20001fb4 			; <UNDEFINED> instruction: 0x20001fb4

20000934 <point_ctr>:

void point_ctr(POBJECT bird, POBJECT ob1, POBJECT ob2, _Bool *between_obj1, char pt_array[]){
20000934:	b580      	push	{r7, lr}
20000936:	b084      	sub	sp, #16
20000938:	af00      	add	r7, sp, #0
2000093a:	60f8      	str	r0, [r7, #12]
2000093c:	60b9      	str	r1, [r7, #8]
2000093e:	607a      	str	r2, [r7, #4]
20000940:	603b      	str	r3, [r7, #0]
	
	
	if( bird->posx > ob1->posx && bird->posx < ob1->posx+ob1->geo->sizex && *between_obj1 ){
20000942:	68fb      	ldr	r3, [r7, #12]
20000944:	68da      	ldr	r2, [r3, #12]
20000946:	68bb      	ldr	r3, [r7, #8]
20000948:	68db      	ldr	r3, [r3, #12]
2000094a:	429a      	cmp	r2, r3
2000094c:	dd26      	ble.n	2000099c <point_ctr+0x68>
2000094e:	68fb      	ldr	r3, [r7, #12]
20000950:	68da      	ldr	r2, [r3, #12]
20000952:	68bb      	ldr	r3, [r7, #8]
20000954:	68d9      	ldr	r1, [r3, #12]
20000956:	68bb      	ldr	r3, [r7, #8]
20000958:	681b      	ldr	r3, [r3, #0]
2000095a:	685b      	ldr	r3, [r3, #4]
2000095c:	18cb      	adds	r3, r1, r3
2000095e:	429a      	cmp	r2, r3
20000960:	da1c      	bge.n	2000099c <point_ctr+0x68>
20000962:	683b      	ldr	r3, [r7, #0]
20000964:	781b      	ldrb	r3, [r3, #0]
20000966:	2b00      	cmp	r3, #0
20000968:	d018      	beq.n	2000099c <point_ctr+0x68>
		
		if(pt_array[1] == '9'){
2000096a:	69bb      	ldr	r3, [r7, #24]
2000096c:	3301      	adds	r3, #1
2000096e:	781b      	ldrb	r3, [r3, #0]
20000970:	2b39      	cmp	r3, #57	; 0x39
20000972:	d109      	bne.n	20000988 <point_ctr+0x54>
			pt_array[1] = '0'-1;
20000974:	69bb      	ldr	r3, [r7, #24]
20000976:	3301      	adds	r3, #1
20000978:	222f      	movs	r2, #47	; 0x2f
2000097a:	701a      	strb	r2, [r3, #0]
			pt_array[0]++;
2000097c:	69bb      	ldr	r3, [r7, #24]
2000097e:	781b      	ldrb	r3, [r3, #0]
20000980:	3301      	adds	r3, #1
20000982:	b2da      	uxtb	r2, r3
20000984:	69bb      	ldr	r3, [r7, #24]
20000986:	701a      	strb	r2, [r3, #0]
		}
		pt_array[1]++;
20000988:	69bb      	ldr	r3, [r7, #24]
2000098a:	3301      	adds	r3, #1
2000098c:	781a      	ldrb	r2, [r3, #0]
2000098e:	3201      	adds	r2, #1
20000990:	b2d2      	uxtb	r2, r2
20000992:	701a      	strb	r2, [r3, #0]
		*between_obj1 = 0;
20000994:	683b      	ldr	r3, [r7, #0]
20000996:	2200      	movs	r2, #0
20000998:	701a      	strb	r2, [r3, #0]
		}
		pt_array[1]++;
		*between_obj1 = 1;
		
	}
}
2000099a:	e02e      	b.n	200009fa <point_ctr+0xc6>
	else if( bird->posx > ob2->posx && bird->posx < ob2->posx+ob2->geo->sizex && !(*between_obj1) ){
2000099c:	68fb      	ldr	r3, [r7, #12]
2000099e:	68da      	ldr	r2, [r3, #12]
200009a0:	687b      	ldr	r3, [r7, #4]
200009a2:	68db      	ldr	r3, [r3, #12]
200009a4:	429a      	cmp	r2, r3
200009a6:	dd28      	ble.n	200009fa <point_ctr+0xc6>
200009a8:	68fb      	ldr	r3, [r7, #12]
200009aa:	68da      	ldr	r2, [r3, #12]
200009ac:	687b      	ldr	r3, [r7, #4]
200009ae:	68d9      	ldr	r1, [r3, #12]
200009b0:	687b      	ldr	r3, [r7, #4]
200009b2:	681b      	ldr	r3, [r3, #0]
200009b4:	685b      	ldr	r3, [r3, #4]
200009b6:	18cb      	adds	r3, r1, r3
200009b8:	429a      	cmp	r2, r3
200009ba:	da1e      	bge.n	200009fa <point_ctr+0xc6>
200009bc:	683b      	ldr	r3, [r7, #0]
200009be:	781b      	ldrb	r3, [r3, #0]
200009c0:	2201      	movs	r2, #1
200009c2:	4053      	eors	r3, r2
200009c4:	b2db      	uxtb	r3, r3
200009c6:	2b00      	cmp	r3, #0
200009c8:	d017      	beq.n	200009fa <point_ctr+0xc6>
		if(pt_array[1] == '9'){
200009ca:	69bb      	ldr	r3, [r7, #24]
200009cc:	3301      	adds	r3, #1
200009ce:	781b      	ldrb	r3, [r3, #0]
200009d0:	2b39      	cmp	r3, #57	; 0x39
200009d2:	d109      	bne.n	200009e8 <point_ctr+0xb4>
			pt_array[1] = '0'-1;
200009d4:	69bb      	ldr	r3, [r7, #24]
200009d6:	3301      	adds	r3, #1
200009d8:	222f      	movs	r2, #47	; 0x2f
200009da:	701a      	strb	r2, [r3, #0]
			pt_array[0]++;
200009dc:	69bb      	ldr	r3, [r7, #24]
200009de:	781b      	ldrb	r3, [r3, #0]
200009e0:	3301      	adds	r3, #1
200009e2:	b2da      	uxtb	r2, r3
200009e4:	69bb      	ldr	r3, [r7, #24]
200009e6:	701a      	strb	r2, [r3, #0]
		pt_array[1]++;
200009e8:	69bb      	ldr	r3, [r7, #24]
200009ea:	3301      	adds	r3, #1
200009ec:	781a      	ldrb	r2, [r3, #0]
200009ee:	3201      	adds	r2, #1
200009f0:	b2d2      	uxtb	r2, r2
200009f2:	701a      	strb	r2, [r3, #0]
		*between_obj1 = 1;
200009f4:	683b      	ldr	r3, [r7, #0]
200009f6:	2201      	movs	r2, #1
200009f8:	701a      	strb	r2, [r3, #0]
}
200009fa:	46c0      	nop			; (mov r8, r8)
200009fc:	46bd      	mov	sp, r7
200009fe:	b004      	add	sp, #16
20000a00:	bd80      	pop	{r7, pc}

20000a02 <randomize_obstacles>:

void randomize_obstacles(POBJECT obstacle_top_1, POBJECT obstacle_bottom_1, POBJECT obstacle_top_2, POBJECT obstacle_bottom_2, char plus){
20000a02:	b580      	push	{r7, lr}
20000a04:	b086      	sub	sp, #24
20000a06:	af00      	add	r7, sp, #0
20000a08:	60f8      	str	r0, [r7, #12]
20000a0a:	60b9      	str	r1, [r7, #8]
20000a0c:	607a      	str	r2, [r7, #4]
20000a0e:	603b      	str	r3, [r7, #0]
	int random;
	if(plus){
20000a10:	2320      	movs	r3, #32
20000a12:	18fb      	adds	r3, r7, r3
20000a14:	781b      	ldrb	r3, [r3, #0]
20000a16:	2b00      	cmp	r3, #0
20000a18:	d01d      	beq.n	20000a56 <randomize_obstacles+0x54>
		random = (char) *TIM6_CNT;
20000a1a:	4b1f      	ldr	r3, [pc, #124]	; (20000a98 <randomize_obstacles+0x96>)
20000a1c:	881b      	ldrh	r3, [r3, #0]
20000a1e:	b29b      	uxth	r3, r3
20000a20:	b2db      	uxtb	r3, r3
20000a22:	617b      	str	r3, [r7, #20]
		random %= 14;
20000a24:	697b      	ldr	r3, [r7, #20]
20000a26:	210e      	movs	r1, #14
20000a28:	0018      	movs	r0, r3
20000a2a:	f000 fb21 	bl	20001070 <__aeabi_idivmod>
20000a2e:	000b      	movs	r3, r1
20000a30:	617b      	str	r3, [r7, #20]
		obstacle_top_1->posx = 128;
20000a32:	68fb      	ldr	r3, [r7, #12]
20000a34:	2280      	movs	r2, #128	; 0x80
20000a36:	60da      	str	r2, [r3, #12]
		obstacle_bottom_1->posx = 128;
20000a38:	68bb      	ldr	r3, [r7, #8]
20000a3a:	2280      	movs	r2, #128	; 0x80
20000a3c:	60da      	str	r2, [r3, #12]
		obstacle_top_1->posy = -29 - random;
20000a3e:	697b      	ldr	r3, [r7, #20]
20000a40:	221d      	movs	r2, #29
20000a42:	4252      	negs	r2, r2
20000a44:	1ad2      	subs	r2, r2, r3
20000a46:	68fb      	ldr	r3, [r7, #12]
20000a48:	611a      	str	r2, [r3, #16]
		obstacle_bottom_1->posy = 43 - random;
20000a4a:	697b      	ldr	r3, [r7, #20]
20000a4c:	222b      	movs	r2, #43	; 0x2b
20000a4e:	1ad2      	subs	r2, r2, r3
20000a50:	68bb      	ldr	r3, [r7, #8]
20000a52:	611a      	str	r2, [r3, #16]
		obstacle_top_2->posx = 128;
		obstacle_bottom_2->posx = 128;
		obstacle_top_2->posy = -29 + random;
		obstacle_bottom_2->posy = 43 + random;
	}
}
20000a54:	e01b      	b.n	20000a8e <randomize_obstacles+0x8c>
		random = (char) *TIM6_CNT;
20000a56:	4b10      	ldr	r3, [pc, #64]	; (20000a98 <randomize_obstacles+0x96>)
20000a58:	881b      	ldrh	r3, [r3, #0]
20000a5a:	b29b      	uxth	r3, r3
20000a5c:	b2db      	uxtb	r3, r3
20000a5e:	617b      	str	r3, [r7, #20]
		random %= 14;
20000a60:	697b      	ldr	r3, [r7, #20]
20000a62:	210e      	movs	r1, #14
20000a64:	0018      	movs	r0, r3
20000a66:	f000 fb03 	bl	20001070 <__aeabi_idivmod>
20000a6a:	000b      	movs	r3, r1
20000a6c:	617b      	str	r3, [r7, #20]
		obstacle_top_2->posx = 128;
20000a6e:	687b      	ldr	r3, [r7, #4]
20000a70:	2280      	movs	r2, #128	; 0x80
20000a72:	60da      	str	r2, [r3, #12]
		obstacle_bottom_2->posx = 128;
20000a74:	683b      	ldr	r3, [r7, #0]
20000a76:	2280      	movs	r2, #128	; 0x80
20000a78:	60da      	str	r2, [r3, #12]
		obstacle_top_2->posy = -29 + random;
20000a7a:	697b      	ldr	r3, [r7, #20]
20000a7c:	3b1d      	subs	r3, #29
20000a7e:	001a      	movs	r2, r3
20000a80:	687b      	ldr	r3, [r7, #4]
20000a82:	611a      	str	r2, [r3, #16]
		obstacle_bottom_2->posy = 43 + random;
20000a84:	697b      	ldr	r3, [r7, #20]
20000a86:	332b      	adds	r3, #43	; 0x2b
20000a88:	001a      	movs	r2, r3
20000a8a:	683b      	ldr	r3, [r7, #0]
20000a8c:	611a      	str	r2, [r3, #16]
}
20000a8e:	46c0      	nop			; (mov r8, r8)
20000a90:	46bd      	mov	sp, r7
20000a92:	b006      	add	sp, #24
20000a94:	bd80      	pop	{r7, pc}
20000a96:	46c0      	nop			; (mov r8, r8)
20000a98:	40001024 	andmi	r1, r0, r4, lsr #32

20000a9c <main>:

void main(void){
20000a9c:	b5b0      	push	{r4, r5, r7, lr}
20000a9e:	b086      	sub	sp, #24
20000aa0:	af02      	add	r7, sp, #8
	init_app();
20000aa2:	f7ff fe0a 	bl	200006ba <init_app>
	graphic_initialize(); //initierar port E enligt boken
20000aa6:	f7ff fdfc 	bl	200006a2 <graphic_initialize>
	graphic_clear_screen();
20000aaa:	f7ff fdfd 	bl	200006a8 <graphic_clear_screen>
	timer6_init();
20000aae:	f7ff fe17 	bl	200006e0 <timer6_init>
	ascii_init();
20000ab2:	f7ff fcb8 	bl	20000426 <ascii_init>
	
	char pt_array[3] = {'0','0', '\0'};
20000ab6:	1d3b      	adds	r3, r7, #4
20000ab8:	4aab      	ldr	r2, [pc, #684]	; (20000d68 <main+0x2cc>)
20000aba:	8811      	ldrh	r1, [r2, #0]
20000abc:	8019      	strh	r1, [r3, #0]
20000abe:	7892      	ldrb	r2, [r2, #2]
20000ac0:	709a      	strb	r2, [r3, #2]
	short random = 0;
20000ac2:	230e      	movs	r3, #14
20000ac4:	18fb      	adds	r3, r7, r3
20000ac6:	2200      	movs	r2, #0
20000ac8:	801a      	strh	r2, [r3, #0]
	_Bool between_obj1 = 1;
20000aca:	1cfb      	adds	r3, r7, #3
20000acc:	2201      	movs	r2, #1
20000ace:	701a      	strb	r2, [r3, #0]
	static POBJECT obstacle_top_2 = &obstacle_top_obj_2;
	static POBJECT obstacle_bottom_2 = &obstacle_bottom_obj_2;
	static POBJECT bird = &bird_soar_obj;
	static POBJECT start_screen = &starting_screen_obj;
	
	short the_y_pos_bird = bird->posy; 
20000ad0:	4ba6      	ldr	r3, [pc, #664]	; (20000d6c <main+0x2d0>)
20000ad2:	681b      	ldr	r3, [r3, #0]
20000ad4:	691a      	ldr	r2, [r3, #16]
20000ad6:	230c      	movs	r3, #12
20000ad8:	18fb      	adds	r3, r7, r3
20000ada:	801a      	strh	r2, [r3, #0]
	short the_y_speed_bird = bird->diry;
20000adc:	4ba3      	ldr	r3, [pc, #652]	; (20000d6c <main+0x2d0>)
20000ade:	681b      	ldr	r3, [r3, #0]
20000ae0:	689a      	ldr	r2, [r3, #8]
20000ae2:	230a      	movs	r3, #10
20000ae4:	18fb      	adds	r3, r7, r3
20000ae6:	801a      	strh	r2, [r3, #0]
	
	set_obstacle_speed(-12, 0, obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2);
20000ae8:	4ba1      	ldr	r3, [pc, #644]	; (20000d70 <main+0x2d4>)
20000aea:	6819      	ldr	r1, [r3, #0]
20000aec:	4ba1      	ldr	r3, [pc, #644]	; (20000d74 <main+0x2d8>)
20000aee:	681c      	ldr	r4, [r3, #0]
20000af0:	4ba1      	ldr	r3, [pc, #644]	; (20000d78 <main+0x2dc>)
20000af2:	681a      	ldr	r2, [r3, #0]
20000af4:	4ba1      	ldr	r3, [pc, #644]	; (20000d7c <main+0x2e0>)
20000af6:	681b      	ldr	r3, [r3, #0]
20000af8:	200c      	movs	r0, #12
20000afa:	4240      	negs	r0, r0
20000afc:	9301      	str	r3, [sp, #4]
20000afe:	9200      	str	r2, [sp, #0]
20000b00:	0023      	movs	r3, r4
20000b02:	000a      	movs	r2, r1
20000b04:	2100      	movs	r1, #0
20000b06:	f7ff fe92 	bl	2000082e <set_obstacle_speed>

	while(1){
		graphic_clear_screen();
20000b0a:	f7ff fdcd 	bl	200006a8 <graphic_clear_screen>
		reset_obj_position(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2, &bird_soar_obj, &bird_flap_obj);
20000b0e:	4b98      	ldr	r3, [pc, #608]	; (20000d70 <main+0x2d4>)
20000b10:	6818      	ldr	r0, [r3, #0]
20000b12:	4b98      	ldr	r3, [pc, #608]	; (20000d74 <main+0x2d8>)
20000b14:	6819      	ldr	r1, [r3, #0]
20000b16:	4b98      	ldr	r3, [pc, #608]	; (20000d78 <main+0x2dc>)
20000b18:	681a      	ldr	r2, [r3, #0]
20000b1a:	4b98      	ldr	r3, [pc, #608]	; (20000d7c <main+0x2e0>)
20000b1c:	681c      	ldr	r4, [r3, #0]
20000b1e:	4b98      	ldr	r3, [pc, #608]	; (20000d80 <main+0x2e4>)
20000b20:	9301      	str	r3, [sp, #4]
20000b22:	4b98      	ldr	r3, [pc, #608]	; (20000d84 <main+0x2e8>)
20000b24:	9300      	str	r3, [sp, #0]
20000b26:	0023      	movs	r3, r4
20000b28:	f7ff fea4 	bl	20000874 <reset_obj_position>
		start_screen->draw(start_screen);
20000b2c:	4b96      	ldr	r3, [pc, #600]	; (20000d88 <main+0x2ec>)
20000b2e:	681b      	ldr	r3, [r3, #0]
20000b30:	695a      	ldr	r2, [r3, #20]
20000b32:	4b95      	ldr	r3, [pc, #596]	; (20000d88 <main+0x2ec>)
20000b34:	681b      	ldr	r3, [r3, #0]
20000b36:	0018      	movs	r0, r3
20000b38:	4790      	blx	r2
		while(keyb_enhanced() != 5){
20000b3a:	e021      	b.n	20000b80 <main+0xe4>
			bird = &bird_soar_obj;
20000b3c:	4b8b      	ldr	r3, [pc, #556]	; (20000d6c <main+0x2d0>)
20000b3e:	4a91      	ldr	r2, [pc, #580]	; (20000d84 <main+0x2e8>)
20000b40:	601a      	str	r2, [r3, #0]
			draw_object(bird);
20000b42:	4b8a      	ldr	r3, [pc, #552]	; (20000d6c <main+0x2d0>)
20000b44:	681b      	ldr	r3, [r3, #0]
20000b46:	0018      	movs	r0, r3
20000b48:	f7ff fd1d 	bl	20000586 <draw_object>
			delay_milli(50000);
20000b4c:	4b8f      	ldr	r3, [pc, #572]	; (20000d8c <main+0x2f0>)
20000b4e:	0018      	movs	r0, r3
20000b50:	f7ff fcf9 	bl	20000546 <delay_milli>
			clear_object(bird);
20000b54:	4b85      	ldr	r3, [pc, #532]	; (20000d6c <main+0x2d0>)
20000b56:	681b      	ldr	r3, [r3, #0]
20000b58:	0018      	movs	r0, r3
20000b5a:	f7ff fd44 	bl	200005e6 <clear_object>
			bird = &bird_flap_obj;
20000b5e:	4b83      	ldr	r3, [pc, #524]	; (20000d6c <main+0x2d0>)
20000b60:	4a87      	ldr	r2, [pc, #540]	; (20000d80 <main+0x2e4>)
20000b62:	601a      	str	r2, [r3, #0]
			draw_object(bird);
20000b64:	4b81      	ldr	r3, [pc, #516]	; (20000d6c <main+0x2d0>)
20000b66:	681b      	ldr	r3, [r3, #0]
20000b68:	0018      	movs	r0, r3
20000b6a:	f7ff fd0c 	bl	20000586 <draw_object>
			delay_milli(50000);
20000b6e:	4b87      	ldr	r3, [pc, #540]	; (20000d8c <main+0x2f0>)
20000b70:	0018      	movs	r0, r3
20000b72:	f7ff fce8 	bl	20000546 <delay_milli>
			clear_object(bird);
20000b76:	4b7d      	ldr	r3, [pc, #500]	; (20000d6c <main+0x2d0>)
20000b78:	681b      	ldr	r3, [r3, #0]
20000b7a:	0018      	movs	r0, r3
20000b7c:	f7ff fd33 	bl	200005e6 <clear_object>
		while(keyb_enhanced() != 5){
20000b80:	f7ff faf4 	bl	2000016c <keyb_enhanced>
20000b84:	0003      	movs	r3, r0
20000b86:	2b05      	cmp	r3, #5
20000b88:	d1d8      	bne.n	20000b3c <main+0xa0>
		}
		graphic_clear_screen();
20000b8a:	f7ff fd8d 	bl	200006a8 <graphic_clear_screen>
		while(1){
			point_ctr(bird, obstacle_bottom_1, obstacle_bottom_2, &between_obj1, pt_array);
20000b8e:	4b77      	ldr	r3, [pc, #476]	; (20000d6c <main+0x2d0>)
20000b90:	6818      	ldr	r0, [r3, #0]
20000b92:	4b78      	ldr	r3, [pc, #480]	; (20000d74 <main+0x2d8>)
20000b94:	6819      	ldr	r1, [r3, #0]
20000b96:	4b79      	ldr	r3, [pc, #484]	; (20000d7c <main+0x2e0>)
20000b98:	681a      	ldr	r2, [r3, #0]
20000b9a:	1cfc      	adds	r4, r7, #3
20000b9c:	1d3b      	adds	r3, r7, #4
20000b9e:	9300      	str	r3, [sp, #0]
20000ba0:	0023      	movs	r3, r4
20000ba2:	f7ff fec7 	bl	20000934 <point_ctr>
			display_ctr(pt_array);
20000ba6:	1d3b      	adds	r3, r7, #4
20000ba8:	0018      	movs	r0, r3
20000baa:	f7ff fe8e 	bl	200008ca <display_ctr>
			
			bird->move(bird);
20000bae:	4b6f      	ldr	r3, [pc, #444]	; (20000d6c <main+0x2d0>)
20000bb0:	681b      	ldr	r3, [r3, #0]
20000bb2:	69da      	ldr	r2, [r3, #28]
20000bb4:	4b6d      	ldr	r3, [pc, #436]	; (20000d6c <main+0x2d0>)
20000bb6:	681b      	ldr	r3, [r3, #0]
20000bb8:	0018      	movs	r0, r3
20000bba:	4790      	blx	r2
			delay_milli(50000);
20000bbc:	4b73      	ldr	r3, [pc, #460]	; (20000d8c <main+0x2f0>)
20000bbe:	0018      	movs	r0, r3
20000bc0:	f7ff fcc1 	bl	20000546 <delay_milli>
			move_obstacles(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2);
20000bc4:	4b6a      	ldr	r3, [pc, #424]	; (20000d70 <main+0x2d4>)
20000bc6:	6818      	ldr	r0, [r3, #0]
20000bc8:	4b6a      	ldr	r3, [pc, #424]	; (20000d74 <main+0x2d8>)
20000bca:	6819      	ldr	r1, [r3, #0]
20000bcc:	4b6a      	ldr	r3, [pc, #424]	; (20000d78 <main+0x2dc>)
20000bce:	681a      	ldr	r2, [r3, #0]
20000bd0:	4b6a      	ldr	r3, [pc, #424]	; (20000d7c <main+0x2e0>)
20000bd2:	681b      	ldr	r3, [r3, #0]
20000bd4:	f7ff fe0c 	bl	200007f0 <move_obstacles>

		
			if(keyb_enhanced() == 2){
20000bd8:	f7ff fac8 	bl	2000016c <keyb_enhanced>
20000bdc:	0003      	movs	r3, r0
20000bde:	2b02      	cmp	r3, #2
20000be0:	d12f      	bne.n	20000c42 <main+0x1a6>
				the_y_pos_bird = bird->posy;
20000be2:	4b62      	ldr	r3, [pc, #392]	; (20000d6c <main+0x2d0>)
20000be4:	681b      	ldr	r3, [r3, #0]
20000be6:	691a      	ldr	r2, [r3, #16]
20000be8:	240c      	movs	r4, #12
20000bea:	193b      	adds	r3, r7, r4
20000bec:	801a      	strh	r2, [r3, #0]
				the_y_speed_bird = bird->diry;
20000bee:	4b5f      	ldr	r3, [pc, #380]	; (20000d6c <main+0x2d0>)
20000bf0:	681b      	ldr	r3, [r3, #0]
20000bf2:	689a      	ldr	r2, [r3, #8]
20000bf4:	250a      	movs	r5, #10
20000bf6:	197b      	adds	r3, r7, r5
20000bf8:	801a      	strh	r2, [r3, #0]
				clear_object(bird);
20000bfa:	4b5c      	ldr	r3, [pc, #368]	; (20000d6c <main+0x2d0>)
20000bfc:	681b      	ldr	r3, [r3, #0]
20000bfe:	0018      	movs	r0, r3
20000c00:	f7ff fcf1 	bl	200005e6 <clear_object>
				bird = &bird_flap_obj;
20000c04:	4b59      	ldr	r3, [pc, #356]	; (20000d6c <main+0x2d0>)
20000c06:	4a5e      	ldr	r2, [pc, #376]	; (20000d80 <main+0x2e4>)
20000c08:	601a      	str	r2, [r3, #0]
				bird->posy = the_y_pos_bird; 
20000c0a:	4b58      	ldr	r3, [pc, #352]	; (20000d6c <main+0x2d0>)
20000c0c:	681b      	ldr	r3, [r3, #0]
20000c0e:	193a      	adds	r2, r7, r4
20000c10:	2100      	movs	r1, #0
20000c12:	5e52      	ldrsh	r2, [r2, r1]
20000c14:	611a      	str	r2, [r3, #16]
				bird->diry = the_y_speed_bird; 
20000c16:	4b55      	ldr	r3, [pc, #340]	; (20000d6c <main+0x2d0>)
20000c18:	681b      	ldr	r3, [r3, #0]
20000c1a:	197a      	adds	r2, r7, r5
20000c1c:	2100      	movs	r1, #0
20000c1e:	5e52      	ldrsh	r2, [r2, r1]
20000c20:	609a      	str	r2, [r3, #8]
				bird->diry = -4; 
20000c22:	4b52      	ldr	r3, [pc, #328]	; (20000d6c <main+0x2d0>)
20000c24:	681b      	ldr	r3, [r3, #0]
20000c26:	2204      	movs	r2, #4
20000c28:	4252      	negs	r2, r2
20000c2a:	609a      	str	r2, [r3, #8]
				bird->move(bird);
20000c2c:	4b4f      	ldr	r3, [pc, #316]	; (20000d6c <main+0x2d0>)
20000c2e:	681b      	ldr	r3, [r3, #0]
20000c30:	69da      	ldr	r2, [r3, #28]
20000c32:	4b4e      	ldr	r3, [pc, #312]	; (20000d6c <main+0x2d0>)
20000c34:	681b      	ldr	r3, [r3, #0]
20000c36:	0018      	movs	r0, r3
20000c38:	4790      	blx	r2
				delay_milli(50000);
20000c3a:	4b54      	ldr	r3, [pc, #336]	; (20000d8c <main+0x2f0>)
20000c3c:	0018      	movs	r0, r3
20000c3e:	f7ff fc82 	bl	20000546 <delay_milli>
			} 
			if(bird->diry < 0){
20000c42:	4b4a      	ldr	r3, [pc, #296]	; (20000d6c <main+0x2d0>)
20000c44:	681b      	ldr	r3, [r3, #0]
20000c46:	689b      	ldr	r3, [r3, #8]
20000c48:	2b00      	cmp	r3, #0
20000c4a:	da07      	bge.n	20000c5c <main+0x1c0>
				bird->diry += 2;
20000c4c:	4b47      	ldr	r3, [pc, #284]	; (20000d6c <main+0x2d0>)
20000c4e:	681b      	ldr	r3, [r3, #0]
20000c50:	689a      	ldr	r2, [r3, #8]
20000c52:	4b46      	ldr	r3, [pc, #280]	; (20000d6c <main+0x2d0>)
20000c54:	681b      	ldr	r3, [r3, #0]
20000c56:	3202      	adds	r2, #2
20000c58:	609a      	str	r2, [r3, #8]
20000c5a:	e00b      	b.n	20000c74 <main+0x1d8>
			}
			else if (bird->diry < 5){
20000c5c:	4b43      	ldr	r3, [pc, #268]	; (20000d6c <main+0x2d0>)
20000c5e:	681b      	ldr	r3, [r3, #0]
20000c60:	689b      	ldr	r3, [r3, #8]
20000c62:	2b04      	cmp	r3, #4
20000c64:	dc06      	bgt.n	20000c74 <main+0x1d8>
				bird->diry += 3;
20000c66:	4b41      	ldr	r3, [pc, #260]	; (20000d6c <main+0x2d0>)
20000c68:	681b      	ldr	r3, [r3, #0]
20000c6a:	689a      	ldr	r2, [r3, #8]
20000c6c:	4b3f      	ldr	r3, [pc, #252]	; (20000d6c <main+0x2d0>)
20000c6e:	681b      	ldr	r3, [r3, #0]
20000c70:	3203      	adds	r2, #3
20000c72:	609a      	str	r2, [r3, #8]
			}
		
			if(bird->diry >= 0){
20000c74:	4b3d      	ldr	r3, [pc, #244]	; (20000d6c <main+0x2d0>)
20000c76:	681b      	ldr	r3, [r3, #0]
20000c78:	689b      	ldr	r3, [r3, #8]
20000c7a:	2b00      	cmp	r3, #0
20000c7c:	db1f      	blt.n	20000cbe <main+0x222>
				the_y_pos_bird = bird->posy;
20000c7e:	4b3b      	ldr	r3, [pc, #236]	; (20000d6c <main+0x2d0>)
20000c80:	681b      	ldr	r3, [r3, #0]
20000c82:	691a      	ldr	r2, [r3, #16]
20000c84:	240c      	movs	r4, #12
20000c86:	193b      	adds	r3, r7, r4
20000c88:	801a      	strh	r2, [r3, #0]
				the_y_speed_bird = bird->diry;
20000c8a:	4b38      	ldr	r3, [pc, #224]	; (20000d6c <main+0x2d0>)
20000c8c:	681b      	ldr	r3, [r3, #0]
20000c8e:	689a      	ldr	r2, [r3, #8]
20000c90:	250a      	movs	r5, #10
20000c92:	197b      	adds	r3, r7, r5
20000c94:	801a      	strh	r2, [r3, #0]
				clear_object(bird);
20000c96:	4b35      	ldr	r3, [pc, #212]	; (20000d6c <main+0x2d0>)
20000c98:	681b      	ldr	r3, [r3, #0]
20000c9a:	0018      	movs	r0, r3
20000c9c:	f7ff fca3 	bl	200005e6 <clear_object>
				bird = &bird_soar_obj;
20000ca0:	4b32      	ldr	r3, [pc, #200]	; (20000d6c <main+0x2d0>)
20000ca2:	4a38      	ldr	r2, [pc, #224]	; (20000d84 <main+0x2e8>)
20000ca4:	601a      	str	r2, [r3, #0]
				bird->posy = the_y_pos_bird;
20000ca6:	4b31      	ldr	r3, [pc, #196]	; (20000d6c <main+0x2d0>)
20000ca8:	681b      	ldr	r3, [r3, #0]
20000caa:	193a      	adds	r2, r7, r4
20000cac:	2100      	movs	r1, #0
20000cae:	5e52      	ldrsh	r2, [r2, r1]
20000cb0:	611a      	str	r2, [r3, #16]
				bird->diry = the_y_speed_bird;
20000cb2:	4b2e      	ldr	r3, [pc, #184]	; (20000d6c <main+0x2d0>)
20000cb4:	681b      	ldr	r3, [r3, #0]
20000cb6:	197a      	adds	r2, r7, r5
20000cb8:	2100      	movs	r1, #0
20000cba:	5e52      	ldrsh	r2, [r2, r1]
20000cbc:	609a      	str	r2, [r3, #8]
			}
			
			bird->move(bird);
20000cbe:	4b2b      	ldr	r3, [pc, #172]	; (20000d6c <main+0x2d0>)
20000cc0:	681b      	ldr	r3, [r3, #0]
20000cc2:	69da      	ldr	r2, [r3, #28]
20000cc4:	4b29      	ldr	r3, [pc, #164]	; (20000d6c <main+0x2d0>)
20000cc6:	681b      	ldr	r3, [r3, #0]
20000cc8:	0018      	movs	r0, r3
20000cca:	4790      	blx	r2
			delay_milli(50000);
20000ccc:	4b2f      	ldr	r3, [pc, #188]	; (20000d8c <main+0x2f0>)
20000cce:	0018      	movs	r0, r3
20000cd0:	f7ff fc39 	bl	20000546 <delay_milli>
		
			if (objects_overlap(bird, obstacle_top_1, obstacle_bottom_1,obstacle_top_2, obstacle_bottom_2)){
20000cd4:	4b25      	ldr	r3, [pc, #148]	; (20000d6c <main+0x2d0>)
20000cd6:	6818      	ldr	r0, [r3, #0]
20000cd8:	4b25      	ldr	r3, [pc, #148]	; (20000d70 <main+0x2d4>)
20000cda:	6819      	ldr	r1, [r3, #0]
20000cdc:	4b25      	ldr	r3, [pc, #148]	; (20000d74 <main+0x2d8>)
20000cde:	681a      	ldr	r2, [r3, #0]
20000ce0:	4b25      	ldr	r3, [pc, #148]	; (20000d78 <main+0x2dc>)
20000ce2:	681c      	ldr	r4, [r3, #0]
20000ce4:	4b25      	ldr	r3, [pc, #148]	; (20000d7c <main+0x2e0>)
20000ce6:	681b      	ldr	r3, [r3, #0]
20000ce8:	9300      	str	r3, [sp, #0]
20000cea:	0023      	movs	r3, r4
20000cec:	f7ff fd16 	bl	2000071c <objects_overlap>
20000cf0:	1e03      	subs	r3, r0, #0
20000cf2:	d009      	beq.n	20000d08 <main+0x26c>
				pt_array[0] = '0'; 
20000cf4:	1d3b      	adds	r3, r7, #4
20000cf6:	2230      	movs	r2, #48	; 0x30
20000cf8:	701a      	strb	r2, [r3, #0]
				pt_array[1] = '0';
20000cfa:	1d3b      	adds	r3, r7, #4
20000cfc:	2230      	movs	r2, #48	; 0x30
20000cfe:	705a      	strb	r2, [r3, #1]
				between_obj1 = 1;
20000d00:	1cfb      	adds	r3, r7, #3
20000d02:	2201      	movs	r2, #1
20000d04:	701a      	strb	r2, [r3, #0]
				break;
20000d06:	e02d      	b.n	20000d64 <main+0x2c8>
			}
			
			if(obstacle_top_1->posx + obstacle_top_1->geo->sizex <= 0){
20000d08:	4b19      	ldr	r3, [pc, #100]	; (20000d70 <main+0x2d4>)
20000d0a:	681b      	ldr	r3, [r3, #0]
20000d0c:	68da      	ldr	r2, [r3, #12]
20000d0e:	4b18      	ldr	r3, [pc, #96]	; (20000d70 <main+0x2d4>)
20000d10:	681b      	ldr	r3, [r3, #0]
20000d12:	681b      	ldr	r3, [r3, #0]
20000d14:	685b      	ldr	r3, [r3, #4]
20000d16:	18d3      	adds	r3, r2, r3
20000d18:	2b00      	cmp	r3, #0
20000d1a:	dc0b      	bgt.n	20000d34 <main+0x298>
				randomize_obstacles(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2, 1);
20000d1c:	4b14      	ldr	r3, [pc, #80]	; (20000d70 <main+0x2d4>)
20000d1e:	6818      	ldr	r0, [r3, #0]
20000d20:	4b14      	ldr	r3, [pc, #80]	; (20000d74 <main+0x2d8>)
20000d22:	6819      	ldr	r1, [r3, #0]
20000d24:	4b14      	ldr	r3, [pc, #80]	; (20000d78 <main+0x2dc>)
20000d26:	681a      	ldr	r2, [r3, #0]
20000d28:	4b14      	ldr	r3, [pc, #80]	; (20000d7c <main+0x2e0>)
20000d2a:	681b      	ldr	r3, [r3, #0]
20000d2c:	2401      	movs	r4, #1
20000d2e:	9400      	str	r4, [sp, #0]
20000d30:	f7ff fe67 	bl	20000a02 <randomize_obstacles>
				
			}
		
			if(obstacle_top_2->posx + obstacle_top_2->geo->sizex <= 0){
20000d34:	4b10      	ldr	r3, [pc, #64]	; (20000d78 <main+0x2dc>)
20000d36:	681b      	ldr	r3, [r3, #0]
20000d38:	68da      	ldr	r2, [r3, #12]
20000d3a:	4b0f      	ldr	r3, [pc, #60]	; (20000d78 <main+0x2dc>)
20000d3c:	681b      	ldr	r3, [r3, #0]
20000d3e:	681b      	ldr	r3, [r3, #0]
20000d40:	685b      	ldr	r3, [r3, #4]
20000d42:	18d3      	adds	r3, r2, r3
20000d44:	2b00      	cmp	r3, #0
20000d46:	dd00      	ble.n	20000d4a <main+0x2ae>
20000d48:	e721      	b.n	20000b8e <main+0xf2>
				randomize_obstacles(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2, 0);
20000d4a:	4b09      	ldr	r3, [pc, #36]	; (20000d70 <main+0x2d4>)
20000d4c:	6818      	ldr	r0, [r3, #0]
20000d4e:	4b09      	ldr	r3, [pc, #36]	; (20000d74 <main+0x2d8>)
20000d50:	6819      	ldr	r1, [r3, #0]
20000d52:	4b09      	ldr	r3, [pc, #36]	; (20000d78 <main+0x2dc>)
20000d54:	681a      	ldr	r2, [r3, #0]
20000d56:	4b09      	ldr	r3, [pc, #36]	; (20000d7c <main+0x2e0>)
20000d58:	681b      	ldr	r3, [r3, #0]
20000d5a:	2400      	movs	r4, #0
20000d5c:	9400      	str	r4, [sp, #0]
20000d5e:	f7ff fe50 	bl	20000a02 <randomize_obstacles>
			point_ctr(bird, obstacle_bottom_1, obstacle_bottom_2, &between_obj1, pt_array);
20000d62:	e714      	b.n	20000b8e <main+0xf2>
		graphic_clear_screen();
20000d64:	e6d1      	b.n	20000b0a <main+0x6e>
20000d66:	46c0      	nop			; (mov r8, r8)
20000d68:	20001fc0 	andcs	r1, r0, r0, asr #31
20000d6c:	20001f64 	andcs	r1, r0, r4, ror #30
20000d70:	20001f68 	andcs	r1, r0, r8, ror #30
20000d74:	20001f6c 	andcs	r1, r0, ip, ror #30
20000d78:	20001f70 	andcs	r1, r0, r0, ror pc
20000d7c:	20001f74 	andcs	r1, r0, r4, ror pc
20000d80:	20001f40 	andcs	r1, r0, r0, asr #30
20000d84:	20001f1c 	andcs	r1, r0, ip, lsl pc
20000d88:	20001f78 	andcs	r1, r0, r8, ror pc
20000d8c:	0000c350 	andeq	ip, r0, r0, asr r3

20000d90 <__udivsi3>:
20000d90:	2200      	movs	r2, #0
20000d92:	0843      	lsrs	r3, r0, #1
20000d94:	428b      	cmp	r3, r1
20000d96:	d374      	bcc.n	20000e82 <__udivsi3+0xf2>
20000d98:	0903      	lsrs	r3, r0, #4
20000d9a:	428b      	cmp	r3, r1
20000d9c:	d35f      	bcc.n	20000e5e <__udivsi3+0xce>
20000d9e:	0a03      	lsrs	r3, r0, #8
20000da0:	428b      	cmp	r3, r1
20000da2:	d344      	bcc.n	20000e2e <__udivsi3+0x9e>
20000da4:	0b03      	lsrs	r3, r0, #12
20000da6:	428b      	cmp	r3, r1
20000da8:	d328      	bcc.n	20000dfc <__udivsi3+0x6c>
20000daa:	0c03      	lsrs	r3, r0, #16
20000dac:	428b      	cmp	r3, r1
20000dae:	d30d      	bcc.n	20000dcc <__udivsi3+0x3c>
20000db0:	22ff      	movs	r2, #255	; 0xff
20000db2:	0209      	lsls	r1, r1, #8
20000db4:	ba12      	rev	r2, r2
20000db6:	0c03      	lsrs	r3, r0, #16
20000db8:	428b      	cmp	r3, r1
20000dba:	d302      	bcc.n	20000dc2 <__udivsi3+0x32>
20000dbc:	1212      	asrs	r2, r2, #8
20000dbe:	0209      	lsls	r1, r1, #8
20000dc0:	d065      	beq.n	20000e8e <__udivsi3+0xfe>
20000dc2:	0b03      	lsrs	r3, r0, #12
20000dc4:	428b      	cmp	r3, r1
20000dc6:	d319      	bcc.n	20000dfc <__udivsi3+0x6c>
20000dc8:	e000      	b.n	20000dcc <__udivsi3+0x3c>
20000dca:	0a09      	lsrs	r1, r1, #8
20000dcc:	0bc3      	lsrs	r3, r0, #15
20000dce:	428b      	cmp	r3, r1
20000dd0:	d301      	bcc.n	20000dd6 <__udivsi3+0x46>
20000dd2:	03cb      	lsls	r3, r1, #15
20000dd4:	1ac0      	subs	r0, r0, r3
20000dd6:	4152      	adcs	r2, r2
20000dd8:	0b83      	lsrs	r3, r0, #14
20000dda:	428b      	cmp	r3, r1
20000ddc:	d301      	bcc.n	20000de2 <__udivsi3+0x52>
20000dde:	038b      	lsls	r3, r1, #14
20000de0:	1ac0      	subs	r0, r0, r3
20000de2:	4152      	adcs	r2, r2
20000de4:	0b43      	lsrs	r3, r0, #13
20000de6:	428b      	cmp	r3, r1
20000de8:	d301      	bcc.n	20000dee <__udivsi3+0x5e>
20000dea:	034b      	lsls	r3, r1, #13
20000dec:	1ac0      	subs	r0, r0, r3
20000dee:	4152      	adcs	r2, r2
20000df0:	0b03      	lsrs	r3, r0, #12
20000df2:	428b      	cmp	r3, r1
20000df4:	d301      	bcc.n	20000dfa <__udivsi3+0x6a>
20000df6:	030b      	lsls	r3, r1, #12
20000df8:	1ac0      	subs	r0, r0, r3
20000dfa:	4152      	adcs	r2, r2
20000dfc:	0ac3      	lsrs	r3, r0, #11
20000dfe:	428b      	cmp	r3, r1
20000e00:	d301      	bcc.n	20000e06 <__udivsi3+0x76>
20000e02:	02cb      	lsls	r3, r1, #11
20000e04:	1ac0      	subs	r0, r0, r3
20000e06:	4152      	adcs	r2, r2
20000e08:	0a83      	lsrs	r3, r0, #10
20000e0a:	428b      	cmp	r3, r1
20000e0c:	d301      	bcc.n	20000e12 <__udivsi3+0x82>
20000e0e:	028b      	lsls	r3, r1, #10
20000e10:	1ac0      	subs	r0, r0, r3
20000e12:	4152      	adcs	r2, r2
20000e14:	0a43      	lsrs	r3, r0, #9
20000e16:	428b      	cmp	r3, r1
20000e18:	d301      	bcc.n	20000e1e <__udivsi3+0x8e>
20000e1a:	024b      	lsls	r3, r1, #9
20000e1c:	1ac0      	subs	r0, r0, r3
20000e1e:	4152      	adcs	r2, r2
20000e20:	0a03      	lsrs	r3, r0, #8
20000e22:	428b      	cmp	r3, r1
20000e24:	d301      	bcc.n	20000e2a <__udivsi3+0x9a>
20000e26:	020b      	lsls	r3, r1, #8
20000e28:	1ac0      	subs	r0, r0, r3
20000e2a:	4152      	adcs	r2, r2
20000e2c:	d2cd      	bcs.n	20000dca <__udivsi3+0x3a>
20000e2e:	09c3      	lsrs	r3, r0, #7
20000e30:	428b      	cmp	r3, r1
20000e32:	d301      	bcc.n	20000e38 <__udivsi3+0xa8>
20000e34:	01cb      	lsls	r3, r1, #7
20000e36:	1ac0      	subs	r0, r0, r3
20000e38:	4152      	adcs	r2, r2
20000e3a:	0983      	lsrs	r3, r0, #6
20000e3c:	428b      	cmp	r3, r1
20000e3e:	d301      	bcc.n	20000e44 <__udivsi3+0xb4>
20000e40:	018b      	lsls	r3, r1, #6
20000e42:	1ac0      	subs	r0, r0, r3
20000e44:	4152      	adcs	r2, r2
20000e46:	0943      	lsrs	r3, r0, #5
20000e48:	428b      	cmp	r3, r1
20000e4a:	d301      	bcc.n	20000e50 <__udivsi3+0xc0>
20000e4c:	014b      	lsls	r3, r1, #5
20000e4e:	1ac0      	subs	r0, r0, r3
20000e50:	4152      	adcs	r2, r2
20000e52:	0903      	lsrs	r3, r0, #4
20000e54:	428b      	cmp	r3, r1
20000e56:	d301      	bcc.n	20000e5c <__udivsi3+0xcc>
20000e58:	010b      	lsls	r3, r1, #4
20000e5a:	1ac0      	subs	r0, r0, r3
20000e5c:	4152      	adcs	r2, r2
20000e5e:	08c3      	lsrs	r3, r0, #3
20000e60:	428b      	cmp	r3, r1
20000e62:	d301      	bcc.n	20000e68 <__udivsi3+0xd8>
20000e64:	00cb      	lsls	r3, r1, #3
20000e66:	1ac0      	subs	r0, r0, r3
20000e68:	4152      	adcs	r2, r2
20000e6a:	0883      	lsrs	r3, r0, #2
20000e6c:	428b      	cmp	r3, r1
20000e6e:	d301      	bcc.n	20000e74 <__udivsi3+0xe4>
20000e70:	008b      	lsls	r3, r1, #2
20000e72:	1ac0      	subs	r0, r0, r3
20000e74:	4152      	adcs	r2, r2
20000e76:	0843      	lsrs	r3, r0, #1
20000e78:	428b      	cmp	r3, r1
20000e7a:	d301      	bcc.n	20000e80 <__udivsi3+0xf0>
20000e7c:	004b      	lsls	r3, r1, #1
20000e7e:	1ac0      	subs	r0, r0, r3
20000e80:	4152      	adcs	r2, r2
20000e82:	1a41      	subs	r1, r0, r1
20000e84:	d200      	bcs.n	20000e88 <__udivsi3+0xf8>
20000e86:	4601      	mov	r1, r0
20000e88:	4152      	adcs	r2, r2
20000e8a:	4610      	mov	r0, r2
20000e8c:	4770      	bx	lr
20000e8e:	e7ff      	b.n	20000e90 <__udivsi3+0x100>
20000e90:	b501      	push	{r0, lr}
20000e92:	2000      	movs	r0, #0
20000e94:	f000 f8f0 	bl	20001078 <__aeabi_idiv0>
20000e98:	bd02      	pop	{r1, pc}
20000e9a:	46c0      	nop			; (mov r8, r8)

20000e9c <__aeabi_uidivmod>:
20000e9c:	2900      	cmp	r1, #0
20000e9e:	d0f7      	beq.n	20000e90 <__udivsi3+0x100>
20000ea0:	e776      	b.n	20000d90 <__udivsi3>
20000ea2:	4770      	bx	lr

20000ea4 <__divsi3>:
20000ea4:	4603      	mov	r3, r0
20000ea6:	430b      	orrs	r3, r1
20000ea8:	d47f      	bmi.n	20000faa <__divsi3+0x106>
20000eaa:	2200      	movs	r2, #0
20000eac:	0843      	lsrs	r3, r0, #1
20000eae:	428b      	cmp	r3, r1
20000eb0:	d374      	bcc.n	20000f9c <__divsi3+0xf8>
20000eb2:	0903      	lsrs	r3, r0, #4
20000eb4:	428b      	cmp	r3, r1
20000eb6:	d35f      	bcc.n	20000f78 <__divsi3+0xd4>
20000eb8:	0a03      	lsrs	r3, r0, #8
20000eba:	428b      	cmp	r3, r1
20000ebc:	d344      	bcc.n	20000f48 <__divsi3+0xa4>
20000ebe:	0b03      	lsrs	r3, r0, #12
20000ec0:	428b      	cmp	r3, r1
20000ec2:	d328      	bcc.n	20000f16 <__divsi3+0x72>
20000ec4:	0c03      	lsrs	r3, r0, #16
20000ec6:	428b      	cmp	r3, r1
20000ec8:	d30d      	bcc.n	20000ee6 <__divsi3+0x42>
20000eca:	22ff      	movs	r2, #255	; 0xff
20000ecc:	0209      	lsls	r1, r1, #8
20000ece:	ba12      	rev	r2, r2
20000ed0:	0c03      	lsrs	r3, r0, #16
20000ed2:	428b      	cmp	r3, r1
20000ed4:	d302      	bcc.n	20000edc <__divsi3+0x38>
20000ed6:	1212      	asrs	r2, r2, #8
20000ed8:	0209      	lsls	r1, r1, #8
20000eda:	d065      	beq.n	20000fa8 <__divsi3+0x104>
20000edc:	0b03      	lsrs	r3, r0, #12
20000ede:	428b      	cmp	r3, r1
20000ee0:	d319      	bcc.n	20000f16 <__divsi3+0x72>
20000ee2:	e000      	b.n	20000ee6 <__divsi3+0x42>
20000ee4:	0a09      	lsrs	r1, r1, #8
20000ee6:	0bc3      	lsrs	r3, r0, #15
20000ee8:	428b      	cmp	r3, r1
20000eea:	d301      	bcc.n	20000ef0 <__divsi3+0x4c>
20000eec:	03cb      	lsls	r3, r1, #15
20000eee:	1ac0      	subs	r0, r0, r3
20000ef0:	4152      	adcs	r2, r2
20000ef2:	0b83      	lsrs	r3, r0, #14
20000ef4:	428b      	cmp	r3, r1
20000ef6:	d301      	bcc.n	20000efc <__divsi3+0x58>
20000ef8:	038b      	lsls	r3, r1, #14
20000efa:	1ac0      	subs	r0, r0, r3
20000efc:	4152      	adcs	r2, r2
20000efe:	0b43      	lsrs	r3, r0, #13
20000f00:	428b      	cmp	r3, r1
20000f02:	d301      	bcc.n	20000f08 <__divsi3+0x64>
20000f04:	034b      	lsls	r3, r1, #13
20000f06:	1ac0      	subs	r0, r0, r3
20000f08:	4152      	adcs	r2, r2
20000f0a:	0b03      	lsrs	r3, r0, #12
20000f0c:	428b      	cmp	r3, r1
20000f0e:	d301      	bcc.n	20000f14 <__divsi3+0x70>
20000f10:	030b      	lsls	r3, r1, #12
20000f12:	1ac0      	subs	r0, r0, r3
20000f14:	4152      	adcs	r2, r2
20000f16:	0ac3      	lsrs	r3, r0, #11
20000f18:	428b      	cmp	r3, r1
20000f1a:	d301      	bcc.n	20000f20 <__divsi3+0x7c>
20000f1c:	02cb      	lsls	r3, r1, #11
20000f1e:	1ac0      	subs	r0, r0, r3
20000f20:	4152      	adcs	r2, r2
20000f22:	0a83      	lsrs	r3, r0, #10
20000f24:	428b      	cmp	r3, r1
20000f26:	d301      	bcc.n	20000f2c <__divsi3+0x88>
20000f28:	028b      	lsls	r3, r1, #10
20000f2a:	1ac0      	subs	r0, r0, r3
20000f2c:	4152      	adcs	r2, r2
20000f2e:	0a43      	lsrs	r3, r0, #9
20000f30:	428b      	cmp	r3, r1
20000f32:	d301      	bcc.n	20000f38 <__divsi3+0x94>
20000f34:	024b      	lsls	r3, r1, #9
20000f36:	1ac0      	subs	r0, r0, r3
20000f38:	4152      	adcs	r2, r2
20000f3a:	0a03      	lsrs	r3, r0, #8
20000f3c:	428b      	cmp	r3, r1
20000f3e:	d301      	bcc.n	20000f44 <__divsi3+0xa0>
20000f40:	020b      	lsls	r3, r1, #8
20000f42:	1ac0      	subs	r0, r0, r3
20000f44:	4152      	adcs	r2, r2
20000f46:	d2cd      	bcs.n	20000ee4 <__divsi3+0x40>
20000f48:	09c3      	lsrs	r3, r0, #7
20000f4a:	428b      	cmp	r3, r1
20000f4c:	d301      	bcc.n	20000f52 <__divsi3+0xae>
20000f4e:	01cb      	lsls	r3, r1, #7
20000f50:	1ac0      	subs	r0, r0, r3
20000f52:	4152      	adcs	r2, r2
20000f54:	0983      	lsrs	r3, r0, #6
20000f56:	428b      	cmp	r3, r1
20000f58:	d301      	bcc.n	20000f5e <__divsi3+0xba>
20000f5a:	018b      	lsls	r3, r1, #6
20000f5c:	1ac0      	subs	r0, r0, r3
20000f5e:	4152      	adcs	r2, r2
20000f60:	0943      	lsrs	r3, r0, #5
20000f62:	428b      	cmp	r3, r1
20000f64:	d301      	bcc.n	20000f6a <__divsi3+0xc6>
20000f66:	014b      	lsls	r3, r1, #5
20000f68:	1ac0      	subs	r0, r0, r3
20000f6a:	4152      	adcs	r2, r2
20000f6c:	0903      	lsrs	r3, r0, #4
20000f6e:	428b      	cmp	r3, r1
20000f70:	d301      	bcc.n	20000f76 <__divsi3+0xd2>
20000f72:	010b      	lsls	r3, r1, #4
20000f74:	1ac0      	subs	r0, r0, r3
20000f76:	4152      	adcs	r2, r2
20000f78:	08c3      	lsrs	r3, r0, #3
20000f7a:	428b      	cmp	r3, r1
20000f7c:	d301      	bcc.n	20000f82 <__divsi3+0xde>
20000f7e:	00cb      	lsls	r3, r1, #3
20000f80:	1ac0      	subs	r0, r0, r3
20000f82:	4152      	adcs	r2, r2
20000f84:	0883      	lsrs	r3, r0, #2
20000f86:	428b      	cmp	r3, r1
20000f88:	d301      	bcc.n	20000f8e <__divsi3+0xea>
20000f8a:	008b      	lsls	r3, r1, #2
20000f8c:	1ac0      	subs	r0, r0, r3
20000f8e:	4152      	adcs	r2, r2
20000f90:	0843      	lsrs	r3, r0, #1
20000f92:	428b      	cmp	r3, r1
20000f94:	d301      	bcc.n	20000f9a <__divsi3+0xf6>
20000f96:	004b      	lsls	r3, r1, #1
20000f98:	1ac0      	subs	r0, r0, r3
20000f9a:	4152      	adcs	r2, r2
20000f9c:	1a41      	subs	r1, r0, r1
20000f9e:	d200      	bcs.n	20000fa2 <__divsi3+0xfe>
20000fa0:	4601      	mov	r1, r0
20000fa2:	4152      	adcs	r2, r2
20000fa4:	4610      	mov	r0, r2
20000fa6:	4770      	bx	lr
20000fa8:	e05d      	b.n	20001066 <__divsi3+0x1c2>
20000faa:	0fca      	lsrs	r2, r1, #31
20000fac:	d000      	beq.n	20000fb0 <__divsi3+0x10c>
20000fae:	4249      	negs	r1, r1
20000fb0:	1003      	asrs	r3, r0, #32
20000fb2:	d300      	bcc.n	20000fb6 <__divsi3+0x112>
20000fb4:	4240      	negs	r0, r0
20000fb6:	4053      	eors	r3, r2
20000fb8:	2200      	movs	r2, #0
20000fba:	469c      	mov	ip, r3
20000fbc:	0903      	lsrs	r3, r0, #4
20000fbe:	428b      	cmp	r3, r1
20000fc0:	d32d      	bcc.n	2000101e <__divsi3+0x17a>
20000fc2:	0a03      	lsrs	r3, r0, #8
20000fc4:	428b      	cmp	r3, r1
20000fc6:	d312      	bcc.n	20000fee <__divsi3+0x14a>
20000fc8:	22fc      	movs	r2, #252	; 0xfc
20000fca:	0189      	lsls	r1, r1, #6
20000fcc:	ba12      	rev	r2, r2
20000fce:	0a03      	lsrs	r3, r0, #8
20000fd0:	428b      	cmp	r3, r1
20000fd2:	d30c      	bcc.n	20000fee <__divsi3+0x14a>
20000fd4:	0189      	lsls	r1, r1, #6
20000fd6:	1192      	asrs	r2, r2, #6
20000fd8:	428b      	cmp	r3, r1
20000fda:	d308      	bcc.n	20000fee <__divsi3+0x14a>
20000fdc:	0189      	lsls	r1, r1, #6
20000fde:	1192      	asrs	r2, r2, #6
20000fe0:	428b      	cmp	r3, r1
20000fe2:	d304      	bcc.n	20000fee <__divsi3+0x14a>
20000fe4:	0189      	lsls	r1, r1, #6
20000fe6:	d03a      	beq.n	2000105e <__divsi3+0x1ba>
20000fe8:	1192      	asrs	r2, r2, #6
20000fea:	e000      	b.n	20000fee <__divsi3+0x14a>
20000fec:	0989      	lsrs	r1, r1, #6
20000fee:	09c3      	lsrs	r3, r0, #7
20000ff0:	428b      	cmp	r3, r1
20000ff2:	d301      	bcc.n	20000ff8 <__divsi3+0x154>
20000ff4:	01cb      	lsls	r3, r1, #7
20000ff6:	1ac0      	subs	r0, r0, r3
20000ff8:	4152      	adcs	r2, r2
20000ffa:	0983      	lsrs	r3, r0, #6
20000ffc:	428b      	cmp	r3, r1
20000ffe:	d301      	bcc.n	20001004 <__divsi3+0x160>
20001000:	018b      	lsls	r3, r1, #6
20001002:	1ac0      	subs	r0, r0, r3
20001004:	4152      	adcs	r2, r2
20001006:	0943      	lsrs	r3, r0, #5
20001008:	428b      	cmp	r3, r1
2000100a:	d301      	bcc.n	20001010 <__divsi3+0x16c>
2000100c:	014b      	lsls	r3, r1, #5
2000100e:	1ac0      	subs	r0, r0, r3
20001010:	4152      	adcs	r2, r2
20001012:	0903      	lsrs	r3, r0, #4
20001014:	428b      	cmp	r3, r1
20001016:	d301      	bcc.n	2000101c <__divsi3+0x178>
20001018:	010b      	lsls	r3, r1, #4
2000101a:	1ac0      	subs	r0, r0, r3
2000101c:	4152      	adcs	r2, r2
2000101e:	08c3      	lsrs	r3, r0, #3
20001020:	428b      	cmp	r3, r1
20001022:	d301      	bcc.n	20001028 <__divsi3+0x184>
20001024:	00cb      	lsls	r3, r1, #3
20001026:	1ac0      	subs	r0, r0, r3
20001028:	4152      	adcs	r2, r2
2000102a:	0883      	lsrs	r3, r0, #2
2000102c:	428b      	cmp	r3, r1
2000102e:	d301      	bcc.n	20001034 <__divsi3+0x190>
20001030:	008b      	lsls	r3, r1, #2
20001032:	1ac0      	subs	r0, r0, r3
20001034:	4152      	adcs	r2, r2
20001036:	d2d9      	bcs.n	20000fec <__divsi3+0x148>
20001038:	0843      	lsrs	r3, r0, #1
2000103a:	428b      	cmp	r3, r1
2000103c:	d301      	bcc.n	20001042 <__divsi3+0x19e>
2000103e:	004b      	lsls	r3, r1, #1
20001040:	1ac0      	subs	r0, r0, r3
20001042:	4152      	adcs	r2, r2
20001044:	1a41      	subs	r1, r0, r1
20001046:	d200      	bcs.n	2000104a <__divsi3+0x1a6>
20001048:	4601      	mov	r1, r0
2000104a:	4663      	mov	r3, ip
2000104c:	4152      	adcs	r2, r2
2000104e:	105b      	asrs	r3, r3, #1
20001050:	4610      	mov	r0, r2
20001052:	d301      	bcc.n	20001058 <__divsi3+0x1b4>
20001054:	4240      	negs	r0, r0
20001056:	2b00      	cmp	r3, #0
20001058:	d500      	bpl.n	2000105c <__divsi3+0x1b8>
2000105a:	4249      	negs	r1, r1
2000105c:	4770      	bx	lr
2000105e:	4663      	mov	r3, ip
20001060:	105b      	asrs	r3, r3, #1
20001062:	d300      	bcc.n	20001066 <__divsi3+0x1c2>
20001064:	4240      	negs	r0, r0
20001066:	b501      	push	{r0, lr}
20001068:	2000      	movs	r0, #0
2000106a:	f000 f805 	bl	20001078 <__aeabi_idiv0>
2000106e:	bd02      	pop	{r1, pc}

20001070 <__aeabi_idivmod>:
20001070:	2900      	cmp	r1, #0
20001072:	d0f8      	beq.n	20001066 <__divsi3+0x1c2>
20001074:	e716      	b.n	20000ea4 <__divsi3>
20001076:	4770      	bx	lr

20001078 <__aeabi_idiv0>:
20001078:	4770      	bx	lr
2000107a:	46c0      	nop			; (mov r8, r8)

2000107c <keyb_state>:
2000107c:	00ff      	lsls	r7, r7, #3
	...

20001080 <obstacle_top_geometry>:
20001080:	0000007e 	andeq	r0, r0, lr, ror r0
20001084:	0000000e 	andeq	r0, r0, lr
20001088:	00000032 	andeq	r0, r0, r2, lsr r0
2000108c:	000c0001 	andeq	r0, ip, r1
20001090:	010c0101 	tsteq	ip, r1, lsl #2
20001094:	020c0201 	andeq	r0, ip, #268435456	; 0x10000000
20001098:	030c0301 	movweq	r0, #49921	; 0xc301
2000109c:	040c0401 	streq	r0, [ip], #-1025	; 0xfffffbff
200010a0:	050c0501 	streq	r0, [ip, #-1281]	; 0xfffffaff
200010a4:	060c0601 	streq	r0, [ip], -r1, lsl #12
200010a8:	070c0701 	streq	r0, [ip, -r1, lsl #14]
200010ac:	080c0801 	stmdaeq	ip, {r0, fp}
200010b0:	090c0901 	stmdbeq	ip, {r0, r8, fp}
200010b4:	0a0c0a01 	beq	203038c0 <ts_state+0x3018fc>
200010b8:	0b0c0b01 	bleq	20303cc4 <ts_state+0x301d00>
200010bc:	0c0c0c01 	stceq	12, cr0, [ip], {1}
200010c0:	0d0c0d01 	stceq	13, cr0, [ip, #-4]
200010c4:	0e0c0e01 	cdpeq	14, 0, cr0, cr12, cr1, {0}
200010c8:	0f0c0f01 	svceq	0x000c0f01
200010cc:	100c1001 	andne	r1, ip, r1
200010d0:	110c1101 	tstne	ip, r1, lsl #2
200010d4:	120c1201 	andne	r1, ip, #268435456	; 0x10000000
200010d8:	130c1301 	movwne	r1, #49921	; 0xc301
200010dc:	140c1401 	strne	r1, [ip], #-1025	; 0xfffffbff
200010e0:	150c1501 	strne	r1, [ip, #-1281]	; 0xfffffaff
200010e4:	160c1601 	strne	r1, [ip], -r1, lsl #12
200010e8:	170c1701 	strne	r1, [ip, -r1, lsl #14]
200010ec:	180c1801 	stmdane	ip, {r0, fp, ip}
200010f0:	190c1901 	stmdbne	ip, {r0, r8, fp, ip}
200010f4:	1a0c1a01 	bne	20307900 <ts_state+0x30593c>
200010f8:	1b0c1b01 	blne	20307d04 <ts_state+0x305d40>
200010fc:	1c0c1c01 	stcne	12, cr1, [ip], {1}
20001100:	1d0c1d01 	stcne	13, cr1, [ip, #-4]
20001104:	1e0c1e01 	cdpne	14, 0, cr1, cr12, cr1, {0}
20001108:	1f0c1f01 	svcne	0x000c1f01
2000110c:	200c2001 	andcs	r2, ip, r1
20001110:	210c2101 	tstcs	ip, r1, lsl #2
20001114:	220c2201 	andcs	r2, ip, #268435456	; 0x10000000
20001118:	230c2301 	movwcs	r2, #49921	; 0xc301
2000111c:	240c2401 	strcs	r2, [ip], #-1025	; 0xfffffbff
20001120:	250c2501 	strcs	r2, [ip, #-1281]	; 0xfffffaff
20001124:	260c2601 	strcs	r2, [ip], -r1, lsl #12
20001128:	270c2701 	strcs	r2, [ip, -r1, lsl #14]
2000112c:	280c2801 	stmdacs	ip, {r0, fp, sp}
20001130:	290c2901 	stmdbcs	ip, {r0, r8, fp, sp}
20001134:	2a0c2a01 	bcs	2030b940 <ts_state+0x30997c>
20001138:	2b0c2b01 	blcs	2030bd44 <ts_state+0x309d80>
2000113c:	2c0c2c01 	stccs	12, cr2, [ip], {1}
20001140:	2d0c2d01 	stccs	13, cr2, [ip, #-4]
20001144:	2e012e00 	cdpcs	14, 0, cr2, cr1, cr0, {0}
20001148:	2e032e02 	cdpcs	14, 0, cr2, cr3, cr2, {0}
2000114c:	2e052e04 	cdpcs	14, 0, cr2, cr5, cr4, {0}
20001150:	2e072e06 	cdpcs	14, 0, cr2, cr7, cr6, {0}
20001154:	2e092e08 	cdpcs	14, 0, cr2, cr9, cr8, {0}
20001158:	2e0b2e0a 	cdpcs	14, 0, cr2, cr11, cr10, {0}
2000115c:	2e0d2e0c 	cdpcs	14, 0, cr2, cr13, cr12, {0}
20001160:	2f0d2f00 	svccs	0x000d2f00
20001164:	300d3000 	andcc	r3, sp, r0
20001168:	310d3100 	mrscc	r3, (UNDEF: 29)
2000116c:	32013200 	andcc	r3, r1, #0, 4
20001170:	32033202 	andcc	r3, r3, #536870912	; 0x20000000
20001174:	32053204 	andcc	r3, r5, #4, 4	; 0x40000000
20001178:	32073206 	andcc	r3, r7, #1610612736	; 0x60000000
2000117c:	32093208 	andcc	r3, r9, #8, 4	; 0x80000000
20001180:	320b320a 	andcc	r3, fp, #-1610612736	; 0xa0000000
20001184:	320d320c 	andcc	r3, sp, #12, 4	; 0xc0000000
	...

20001348 <obstacle_bottom_geometry>:
20001348:	0000007e 	andeq	r0, r0, lr, ror r0
2000134c:	0000000e 	andeq	r0, r0, lr
20001350:	00000032 	andeq	r0, r0, r2, lsr r0
20001354:	00010000 	andeq	r0, r1, r0
20001358:	00030002 	andeq	r0, r3, r2
2000135c:	00050004 	andeq	r0, r5, r4
20001360:	00070006 	andeq	r0, r7, r6
20001364:	00090008 	andeq	r0, r9, r8
20001368:	000b000a 	andeq	r0, fp, sl
2000136c:	000d000c 	andeq	r0, sp, ip
20001370:	010d0100 	mrseq	r0, (UNDEF: 29)
20001374:	020d0200 	andeq	r0, sp, #0, 4
20001378:	030d0300 	movweq	r0, #54016	; 0xd300
2000137c:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
20001380:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
20001384:	04050404 	streq	r0, [r5], #-1028	; 0xfffffbfc
20001388:	04070406 	streq	r0, [r7], #-1030	; 0xfffffbfa
2000138c:	04090408 	streq	r0, [r9], #-1032	; 0xfffffbf8
20001390:	040b040a 	streq	r0, [fp], #-1034	; 0xfffffbf6
20001394:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
20001398:	050c0501 	streq	r0, [ip, #-1281]	; 0xfffffaff
2000139c:	060c0601 	streq	r0, [ip], -r1, lsl #12
200013a0:	070c0701 	streq	r0, [ip, -r1, lsl #14]
200013a4:	080c0801 	stmdaeq	ip, {r0, fp}
200013a8:	090c0901 	stmdbeq	ip, {r0, r8, fp}
200013ac:	0a0c0a01 	beq	20303bb8 <ts_state+0x301bf4>
200013b0:	0b0c0b01 	bleq	20303fbc <ts_state+0x301ff8>
200013b4:	0c0c0c01 	stceq	12, cr0, [ip], {1}
200013b8:	0d0c0d01 	stceq	13, cr0, [ip, #-4]
200013bc:	0e0c0e01 	cdpeq	14, 0, cr0, cr12, cr1, {0}
200013c0:	0f0c0f01 	svceq	0x000c0f01
200013c4:	100c1001 	andne	r1, ip, r1
200013c8:	110c1101 	tstne	ip, r1, lsl #2
200013cc:	120c1201 	andne	r1, ip, #268435456	; 0x10000000
200013d0:	130c1301 	movwne	r1, #49921	; 0xc301
200013d4:	140c1401 	strne	r1, [ip], #-1025	; 0xfffffbff
200013d8:	150c1501 	strne	r1, [ip, #-1281]	; 0xfffffaff
200013dc:	160c1601 	strne	r1, [ip], -r1, lsl #12
200013e0:	170c1701 	strne	r1, [ip, -r1, lsl #14]
200013e4:	180c1801 	stmdane	ip, {r0, fp, ip}
200013e8:	190c1901 	stmdbne	ip, {r0, r8, fp, ip}
200013ec:	1a0c1a01 	bne	20307bf8 <ts_state+0x305c34>
200013f0:	1b0c1b01 	blne	20307ffc <ts_state+0x306038>
200013f4:	1c0c1c01 	stcne	12, cr1, [ip], {1}
200013f8:	1d0c1d01 	stcne	13, cr1, [ip, #-4]
200013fc:	1e0c1e01 	cdpne	14, 0, cr1, cr12, cr1, {0}
20001400:	1f0c1f01 	svcne	0x000c1f01
20001404:	200c2001 	andcs	r2, ip, r1
20001408:	210c2101 	tstcs	ip, r1, lsl #2
2000140c:	220c2201 	andcs	r2, ip, #268435456	; 0x10000000
20001410:	230c2301 	movwcs	r2, #49921	; 0xc301
20001414:	240c2401 	strcs	r2, [ip], #-1025	; 0xfffffbff
20001418:	250c2501 	strcs	r2, [ip, #-1281]	; 0xfffffaff
2000141c:	260c2601 	strcs	r2, [ip], -r1, lsl #12
20001420:	270c2701 	strcs	r2, [ip, -r1, lsl #14]
20001424:	280c2801 	stmdacs	ip, {r0, fp, sp}
20001428:	290c2901 	stmdbcs	ip, {r0, r8, fp, sp}
2000142c:	2a0c2a01 	bcs	2030bc38 <ts_state+0x309c74>
20001430:	2b0c2b01 	blcs	2030c03c <ts_state+0x30a078>
20001434:	2c0c2c01 	stccs	12, cr2, [ip], {1}
20001438:	2d0c2d01 	stccs	13, cr2, [ip, #-4]
2000143c:	2e0c2e01 	cdpcs	14, 0, cr2, cr12, cr1, {0}
20001440:	2f0c2f01 	svccs	0x000c2f01
20001444:	300c3001 	andcc	r3, ip, r1
20001448:	310c3101 	tstcc	ip, r1, lsl #2
2000144c:	320c3201 	andcc	r3, ip, #268435456	; 0x10000000
	...

20001610 <bird_flap_geometry>:
20001610:	0000002c 	andeq	r0, r0, ip, lsr #32
20001614:	0000000d 	andeq	r0, r0, sp
20001618:	0000000c 	andeq	r0, r0, ip
2000161c:	08000700 	stmdaeq	r0, {r8, r9, sl}
20001620:	08010601 	stmdaeq	r1, {r0, r9, sl}
20001624:	05020402 	streq	r0, [r2, #-1026]	; 0xfffffbfe
20001628:	03030802 	movweq	r0, #14338	; 0x3802
2000162c:	08030603 	stmdaeq	r3, {r0, r1, r9, sl}
20001630:	0a030903 	beq	200c3a44 <ts_state+0xc1a80>
20001634:	02040b03 	andeq	r0, r4, #3072	; 0xc00
20001638:	08040604 	stmdaeq	r4, {r2, r9, sl}
2000163c:	03050105 	movweq	r0, #20741	; 0x5105
20001640:	08050605 	stmdaeq	r5, {r0, r2, r9, sl}
20001644:	04060006 	streq	r0, [r6], #-6
20001648:	06060506 	streq	r0, [r6], -r6, lsl #10
2000164c:	09060806 	stmdbeq	r6, {r1, r2, fp}
20001650:	0b060a06 	bleq	20183e70 <ts_state+0x181eac>
20001654:	08070007 	stmdaeq	r7, {r0, r1, r2}
20001658:	02080008 	andeq	r0, r8, #8
2000165c:	00090808 	andeq	r0, r9, r8, lsl #16
20001660:	010a0809 	tsteq	sl, r9, lsl #16
20001664:	040a030a 	streq	r0, [sl], #-778	; 0xfffffcf6
20001668:	060a050a 	streq	r0, [sl], -sl, lsl #10
2000166c:	020b070a 	andeq	r0, fp, #2621440	; 0x280000
20001670:	030c030b 	movweq	r0, #49931	; 0xc30b
	...

200018d8 <bird_soar_geometry>:
200018d8:	0000002f 	andeq	r0, r0, pc, lsr #32
200018dc:	0000000e 	andeq	r0, r0, lr
200018e0:	0000000c 	andeq	r0, r0, ip
200018e4:	00ff00ff 	ldrshteq	r0, [pc], #15
200018e8:	02000000 	andeq	r0, r0, #0
200018ec:	08000700 	stmdaeq	r0, {r8, r9, sl}
200018f0:	03010001 	movweq	r0, #4097	; 0x1001
200018f4:	08010601 	stmdaeq	r1, {r0, r9, sl}
200018f8:	04020002 	streq	r0, [r2], #-2
200018fc:	08020502 	stmdaeq	r2, {r1, r8, sl}
20001900:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
20001904:	08030303 	stmdaeq	r3, {r0, r1, r8, r9}
20001908:	0a030903 	beq	200c3d1c <ts_state+0xc1d58>
2000190c:	02040b03 	andeq	r0, r4, #3072	; 0xc00
20001910:	08040304 	stmdaeq	r4, {r2, r8, r9}
20001914:	08050105 	stmdaeq	r5, {r0, r2, r8}
20001918:	08060006 	stmdaeq	r6, {r1, r2}
2000191c:	0a060906 	beq	20183d3c <ts_state+0x181d78>
20001920:	00070b06 	andeq	r0, r7, r6, lsl #22
20001924:	00080807 	andeq	r0, r8, r7, lsl #16
20001928:	08080208 	stmdaeq	r8, {r3, r9}
2000192c:	08090009 	stmdaeq	r9, {r0, r3}
20001930:	030a010a 	movweq	r0, #41226	; 0xa10a
20001934:	050a040a 	streq	r0, [sl, #-1034]	; 0xfffffbf6
20001938:	070a060a 	streq	r0, [sl, -sl, lsl #12]
2000193c:	030b020b 	movweq	r0, #45579	; 0xb20b
20001940:	0000030c 	andeq	r0, r0, ip, lsl #6
	...

20001ba0 <starting_screen_geometry>:
20001ba0:	0000013d 	andeq	r0, r0, sp, lsr r1
20001ba4:	00000043 	andeq	r0, r0, r3, asr #32
20001ba8:	00000025 	andeq	r0, r0, r5, lsr #32
20001bac:	00030002 	andeq	r0, r3, r2
20001bb0:	01010004 	tsteq	r1, r4
20001bb4:	01040102 	tsteq	r4, r2, lsl #2
20001bb8:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
20001bbc:	02050201 	andeq	r0, r5, #268435456	; 0x10000000
20001bc0:	03000206 	movweq	r0, #518	; 0x206
20001bc4:	04000306 	streq	r0, [r0], #-774	; 0xfffffcfa
20001bc8:	05000406 	streq	r0, [r0, #-1030]	; 0xfffffbfa
20001bcc:	06000506 	streq	r0, [r0], -r6, lsl #10
20001bd0:	07000606 	streq	r0, [r0, -r6, lsl #12]
20001bd4:	08010706 	stmdaeq	r1, {r1, r2, r8, r9, sl}
20001bd8:	09020805 	stmdbeq	r2, {r0, r2, fp}
20001bdc:	09040903 	stmdbeq	r4, {r0, r1, r8, fp}
20001be0:	0a030a02 	beq	200c43f0 <ts_state+0xc242c>
20001be4:	0b010a04 	bleq	200443fc <ts_state+0x42438>
20001be8:	0c000b05 			; <UNDEFINED> instruction: 0x0c000b05
20001bec:	0dff0c06 	ldcleq	12, cr0, [pc, #24]!	; 20001c0c <starting_screen_geometry+0x6c>
20001bf0:	0eff0d07 	cdpeq	13, 15, cr0, cr15, cr7, {0}
20001bf4:	0fff0e07 	svceq	0x00ff0e07
20001bf8:	10ff0f07 	rscsne	r0, pc, r7, lsl #30
20001bfc:	11ff1007 	mvnsne	r1, r7
20001c00:	12001107 	andne	r1, r0, #-1073741823	; 0xc0000001
20001c04:	13011206 	movwne	r1, #4614	; 0x1206
20001c08:	13031302 	movwne	r1, #13058	; 0x3302
20001c0c:	13051304 	movwne	r1, #21252	; 0x5304
20001c10:	0c0b0c0a 	stceq	12, cr0, [fp], {10}
20001c14:	0c0d0c0c 	stceq	12, cr0, [sp], {12}
20001c18:	07100610 			; <UNDEFINED> instruction: 0x07100610
20001c1c:	09100810 	ldmdbeq	r0, {r4, fp}
20001c20:	0b100a10 	bleq	20404468 <ts_state+0x4024a4>
20001c24:	0c110c10 	ldceq	12, cr0, [r1], {16}
20001c28:	0c130c12 	ldceq	12, cr0, [r3], {18}
20001c2c:	0d140d10 	ldceq	13, cr0, [r4, #-64]	; 0xffffffc0
20001c30:	0e150e10 	mrceq	14, 0, r0, cr5, cr0, {0}
20001c34:	0f150f10 	svceq	0x00150f10
20001c38:	10141010 	andsne	r1, r4, r0, lsl r0
20001c3c:	11111110 	tstne	r1, r0, lsl r1
20001c40:	11131112 	tstne	r3, r2, lsl r1
20001c44:	0b170917 	bleq	205c40a8 <ts_state+0x5c20e4>
20001c48:	0d170c17 	ldceq	12, cr0, [r7, #-92]	; 0xffffffa4
20001c4c:	0f170e17 	svceq	0x00170e17
20001c50:	11171017 	tstne	r7, r7, lsl r0
20001c54:	0a1a091a 	beq	206840c4 <ts_state+0x682100>
20001c58:	0c1a0b1a 			; <UNDEFINED> instruction: 0x0c1a0b1a
20001c5c:	0d1a0d19 	ldceq	13, cr0, [sl, #-100]	; 0xffffff9c
20001c60:	0e1a0d1b 	mrceq	13, 0, r0, cr10, cr11, {0}
20001c64:	101a0f1a 	andsne	r0, sl, sl, lsl pc
20001c68:	111b111a 	tstne	fp, sl, lsl r1
20001c6c:	0621111c 			; <UNDEFINED> instruction: 0x0621111c
20001c70:	08210721 	stmdaeq	r1!, {r0, r5, r8, r9, sl}
20001c74:	0a210921 	beq	20844100 <ts_state+0x84213c>
20001c78:	0c210b21 			; <UNDEFINED> instruction: 0x0c210b21
20001c7c:	0c230c22 	stceq	12, cr0, [r3], #-136	; 0xffffff78
20001c80:	0d210c24 	stceq	12, cr0, [r1, #-144]!	; 0xffffff70
20001c84:	0e210d25 	cdpeq	13, 2, cr0, cr1, cr5, {1}
20001c88:	0f210e26 	svceq	0x00210e26
20001c8c:	10210f26 	eorne	r0, r1, r6, lsr #30
20001c90:	11211025 			; <UNDEFINED> instruction: 0x11211025
20001c94:	11231122 			; <UNDEFINED> instruction: 0x11231122
20001c98:	09281124 	stmdbeq	r8!, {r2, r5, r8, ip}
20001c9c:	0c280b28 			; <UNDEFINED> instruction: 0x0c280b28
20001ca0:	0e280d28 	cdpeq	13, 2, cr0, cr8, cr8, {1}
20001ca4:	10280f28 	eorne	r0, r8, r8, lsr #30
20001ca8:	0b2b1128 	bleq	20ac6150 <ts_state+0xac418c>
20001cac:	0b2e0b2d 	bleq	20b84968 <ts_state+0xb829a4>
20001cb0:	0c2c0c2b 	stceq	12, cr0, [ip], #-172	; 0xffffff54
20001cb4:	0e2b0d2b 	cdpeq	13, 2, cr0, cr11, cr11, {1}
20001cb8:	102b0f2b 	eorne	r0, fp, fp, lsr #30
20001cbc:	0633112b 	ldrteq	r1, [r3], -fp, lsr #2
20001cc0:	08330733 	ldmdaeq	r3!, {r0, r1, r4, r5, r8, r9, sl}
20001cc4:	0a330933 	beq	20cc4198 <ts_state+0xcc21d4>
20001cc8:	0c330b33 			; <UNDEFINED> instruction: 0x0c330b33
20001ccc:	0c310c32 	ldceq	12, cr0, [r1], #-200	; 0xffffff38
20001cd0:	0d330c30 	ldceq	12, cr0, [r3, #-192]!	; 0xffffff40
20001cd4:	0e330d2f 	cdpeq	13, 3, cr0, cr3, cr15, {1}
20001cd8:	0f330e2e 	svceq	0x00330e2e
20001cdc:	10330f2e 	eorsne	r0, r3, lr, lsr #30
20001ce0:	1133102f 	teqne	r3, pc, lsr #32
20001ce4:	11311132 	teqne	r1, r2, lsr r1
20001ce8:	00351130 	eorseq	r1, r5, r0, lsr r1
20001cec:	00370036 	eorseq	r0, r7, r6, lsr r0
20001cf0:	00390038 	eorseq	r0, r9, r8, lsr r0
20001cf4:	02370137 	eorseq	r0, r7, #-1073741811	; 0xc000000d
20001cf8:	04370337 	ldrteq	r0, [r7], #-823	; 0xfffffcc9
20001cfc:	003c0537 	eorseq	r0, ip, r7, lsr r5
20001d00:	013b0040 	teqeq	fp, r0, asr #32
20001d04:	013f013d 	teqeq	pc, sp, lsr r1	; <UNPREDICTABLE>
20001d08:	023b0141 	eorseq	r0, fp, #1073741840	; 0x40000010
20001d0c:	0241023e 	subeq	r0, r1, #-536870909	; 0xe0000003
20001d10:	0341033b 	movteq	r0, #4923	; 0x133b
20001d14:	0441043b 	strbeq	r0, [r1], #-1083	; 0xfffffbc5
20001d18:	0541053b 	strbeq	r0, [r1, #-1339]	; 0xfffffac5
20001d1c:	16111610 			; <UNDEFINED> instruction: 0x16111610
20001d20:	16131612 			; <UNDEFINED> instruction: 0x16131612
20001d24:	17141710 			; <UNDEFINED> instruction: 0x17141710
20001d28:	18151810 	ldmdane	r5, {r4, fp, ip}
20001d2c:	19151910 	ldmdbne	r5, {r4, r8, fp, ip}
20001d30:	1a111a10 	bne	20448578 <ts_state+0x4465b4>
20001d34:	1a131a12 	bne	204c8584 <ts_state+0x4c65c0>
20001d38:	1b101a14 	blne	20408590 <ts_state+0x4065cc>
20001d3c:	1d101c10 	ldcne	12, cr1, [r0, #-64]	; 0xffffffc0
20001d40:	19191917 	ldmdbne	r9, {r0, r1, r2, r4, r8, fp, ip}
20001d44:	1a17191a 	bne	205c81b4 <ts_state+0x5c61f0>
20001d48:	1b171a18 	blne	205c85b0 <ts_state+0x5c65ec>
20001d4c:	1d171c17 	ldcne	12, cr1, [r7, #-92]	; 0xffffffa4
20001d50:	191e191d 	ldmdbne	lr, {r0, r2, r3, r4, r8, fp, ip}
20001d54:	1a1f1a1c 	bne	207c85cc <ts_state+0x7c6608>
20001d58:	1b1d1b1c 	blne	207489d0 <ts_state+0x746a0c>
20001d5c:	1b1f1b1e 	blne	207c89dc <ts_state+0x7c6a18>
20001d60:	1d1c1c1c 	ldcne	12, cr1, [ip, #-112]	; 0xffffff90
20001d64:	1d1e1d1d 	ldcne	13, cr1, [lr, #-116]	; 0xffffff8c
20001d68:	19221d1f 	stmdbne	r2!, {r0, r1, r2, r3, r4, r8, sl, fp, ip}
20001d6c:	19241923 	stmdbne	r4!, {r0, r1, r5, r8, fp, ip}
20001d70:	1b231a22 	blne	208c8600 <ts_state+0x8c663c>
20001d74:	1d221c24 	stcne	12, cr1, [r2, #-144]!	; 0xffffff70
20001d78:	1d241d23 	stcne	13, cr1, [r4, #-140]!	; 0xffffff74
20001d7c:	19281927 	stmdbne	r8!, {r0, r1, r2, r5, r8, fp, ip}
20001d80:	1a271929 	bne	209c822c <ts_state+0x9c6268>
20001d84:	1c291b28 			; <UNDEFINED> instruction: 0x1c291b28
20001d88:	1d281d27 	stcne	13, cr1, [r8, #-156]!	; 0xffffff64
20001d8c:	172d1d29 	strne	r1, [sp, -r9, lsr #26]!
20001d90:	192f182d 	stmdbne	pc!, {r0, r2, r3, r5, fp, ip}	; <UNPREDICTABLE>
20001d94:	19311930 	ldmdbne	r1!, {r4, r5, r8, fp, ip}
20001d98:	1a2f1932 	bne	20bc8268 <ts_state+0xbc62a4>
20001d9c:	1b301b2f 	blne	20c08a60 <ts_state+0xc06a9c>
20001da0:	1c321b31 			; <UNDEFINED> instruction: 0x1c321b31
20001da4:	1d301d2f 	ldcne	13, cr1, [r0, #-188]!	; 0xffffff44
20001da8:	17341d31 			; <UNDEFINED> instruction: 0x17341d31
20001dac:	1f101834 	svcne	0x00101834
20001db0:	210f2010 	tstcs	pc, r0, lsl r0	; <UNPREDICTABLE>
20001db4:	21112110 	tstcs	r1, r0, lsl r1
20001db8:	23102210 	tstcs	r0, #16, 4
20001dbc:	24112410 	ldrcs	r2, [r1], #-1040	; 0xfffffbf0
20001dc0:	21142412 	tstcs	r4, r2, lsl r4
20001dc4:	22132115 	andscs	r2, r3, #1073741829	; 0x40000005
20001dc8:	23132216 	tstcs	r3, #1610612737	; 0x60000001
20001dcc:	24142316 	ldrcs	r2, [r4], #-790	; 0xfffffcea
20001dd0:	1f1a2415 	svcne	0x001a2415
20001dd4:	1f1c1f1b 	svcne	0x001c1f1b
20001dd8:	201a1f1d 	andscs	r1, sl, sp, lsl pc
20001ddc:	211a201e 	tstcs	sl, lr, lsl r0
20001de0:	221a211e 	andscs	r2, sl, #-2147483641	; 0x80000007
20001de4:	221c221b 	andscs	r2, ip, #-1342177279	; 0xb0000001
20001de8:	231a221d 	tstcs	sl, #-805306367	; 0xd0000001
20001dec:	1f20241a 	svcne	0x0020241a
20001df0:	21202020 			; <UNDEFINED> instruction: 0x21202020
20001df4:	23202220 			; <UNDEFINED> instruction: 0x23202220
20001df8:	24212420 	strtcs	r2, [r1], #-1056	; 0xfffffbe0
20001dfc:	20252024 	eorcs	r2, r5, r4, lsr #32
20001e00:	21232026 			; <UNDEFINED> instruction: 0x21232026
20001e04:	22232127 	eorcs	r2, r3, #-1073741815	; 0xc0000009
20001e08:	23232227 			; <UNDEFINED> instruction: 0x23232227
20001e0c:	24242327 	strtcs	r2, [r4], #-807	; 0xfffffcd9
20001e10:	24262425 	strtcs	r2, [r6], #-1061	; 0xfffffbdb
20001e14:	24292428 	strtcs	r2, [r9], #-1064	; 0xfffffbd8
20001e18:	202f202b 	eorcs	r2, pc, fp, lsr #32
20001e1c:	212e212c 			; <UNDEFINED> instruction: 0x212e212c
20001e20:	232c222d 			; <UNDEFINED> instruction: 0x232c222d
20001e24:	0000242b 	andeq	r2, r0, fp, lsr #8
	...

20001e68 <starting_screen_obj>:
20001e68:	20001ba0 	andcs	r1, r0, r0, lsr #23
	...
20001e74:	00000020 	andeq	r0, r0, r0, lsr #32
20001e78:	00000010 	andeq	r0, r0, r0, lsl r0
20001e7c:	20000587 	andcs	r0, r0, r7, lsl #11
20001e80:	200005e7 	andcs	r0, r0, r7, ror #11
	...

20001e8c <obstacle_top_obj_1>:
20001e8c:	20001080 	andcs	r1, r0, r0, lsl #1
	...
20001e98:	0000003c 	andeq	r0, r0, ip, lsr r0
20001e9c:	ffffffe3 			; <UNDEFINED> instruction: 0xffffffe3
20001ea0:	20000587 	andcs	r0, r0, r7, lsl #11
20001ea4:	200005e7 	andcs	r0, r0, r7, ror #11
20001ea8:	20000647 	andcs	r0, r0, r7, asr #12
20001eac:	20000683 	andcs	r0, r0, r3, lsl #13

20001eb0 <obstacle_bottom_obj_1>:
20001eb0:	20001348 	andcs	r1, r0, r8, asr #6
	...
20001ebc:	0000003c 	andeq	r0, r0, ip, lsr r0
20001ec0:	0000002b 	andeq	r0, r0, fp, lsr #32
20001ec4:	20000587 	andcs	r0, r0, r7, lsl #11
20001ec8:	200005e7 	andcs	r0, r0, r7, ror #11
20001ecc:	20000647 	andcs	r0, r0, r7, asr #12
20001ed0:	20000683 	andcs	r0, r0, r3, lsl #13

20001ed4 <obstacle_top_obj_2>:
20001ed4:	20001080 	andcs	r1, r0, r0, lsl #1
	...
20001ee0:	00000082 	andeq	r0, r0, r2, lsl #1
20001ee4:	ffffffe3 			; <UNDEFINED> instruction: 0xffffffe3
20001ee8:	20000587 	andcs	r0, r0, r7, lsl #11
20001eec:	200005e7 	andcs	r0, r0, r7, ror #11
20001ef0:	20000647 	andcs	r0, r0, r7, asr #12
20001ef4:	20000683 	andcs	r0, r0, r3, lsl #13

20001ef8 <obstacle_bottom_obj_2>:
20001ef8:	20001348 	andcs	r1, r0, r8, asr #6
	...
20001f04:	00000082 	andeq	r0, r0, r2, lsl #1
20001f08:	0000002b 	andeq	r0, r0, fp, lsr #32
20001f0c:	20000587 	andcs	r0, r0, r7, lsl #11
20001f10:	200005e7 	andcs	r0, r0, r7, ror #11
20001f14:	20000647 	andcs	r0, r0, r7, asr #12
20001f18:	20000683 	andcs	r0, r0, r3, lsl #13

20001f1c <bird_soar_obj>:
20001f1c:	200018d8 	ldrdcs	r1, [r0], -r8
	...
20001f28:	00000005 	andeq	r0, r0, r5
20001f2c:	0000001e 	andeq	r0, r0, lr, lsl r0
20001f30:	20000587 	andcs	r0, r0, r7, lsl #11
20001f34:	200005e7 	andcs	r0, r0, r7, ror #11
20001f38:	20000647 	andcs	r0, r0, r7, asr #12
20001f3c:	20000683 	andcs	r0, r0, r3, lsl #13

20001f40 <bird_flap_obj>:
20001f40:	20001610 	andcs	r1, r0, r0, lsl r6
	...
20001f4c:	00000005 	andeq	r0, r0, r5
20001f50:	0000001e 	andeq	r0, r0, lr, lsl r0
20001f54:	20000587 	andcs	r0, r0, r7, lsl #11
20001f58:	200005e7 	andcs	r0, r0, r7, ror #11
20001f5c:	20000647 	andcs	r0, r0, r7, asr #12
20001f60:	20000683 	andcs	r0, r0, r3, lsl #13

20001f64 <bird.4233>:
20001f64:	20001f1c 	andcs	r1, r0, ip, lsl pc

20001f68 <obstacle_top_1.4229>:
20001f68:	20001e8c 	andcs	r1, r0, ip, lsl #29

20001f6c <obstacle_bottom_1.4230>:
20001f6c:	20001eb0 			; <UNDEFINED> instruction: 0x20001eb0

20001f70 <obstacle_top_2.4231>:
20001f70:	20001ed4 	ldrdcs	r1, [r0], -r4

20001f74 <obstacle_bottom_2.4232>:
20001f74:	20001ef8 	strdcs	r1, [r0], -r8

20001f78 <start_screen.4234>:
20001f78:	20001e68 	andcs	r1, r0, r8, ror #28
20001f7c:	200000a6 	andcs	r0, r0, r6, lsr #1
20001f80:	2000007e 	andcs	r0, r0, lr, ror r0
20001f84:	20000086 	andcs	r0, r0, r6, lsl #1
20001f88:	2000008e 	andcs	r0, r0, lr, lsl #1
20001f8c:	20000096 	mulcs	r0, r6, r0
20001f90:	2000009e 	mulcs	r0, lr, r0
20001f94:	0a030201 	beq	200c27a0 <ts_state+0xc07dc>
20001f98:	0b060504 	bleq	201833b0 <ts_state+0x1813ec>
20001f9c:	0c090807 	stceq	8, cr0, [r9], {7}
20001fa0:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001f70 <obstacle_top_2.4231>
20001fa4:	4f5b063f 	svcmi	0x005b063f
20001fa8:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001fac:	7c77677f 	ldclvc	7, cr6, [r7], #-508	; 0xfffffe04
20001fb0:	71795e39 	cmnvc	r9, r9, lsr lr
20001fb4:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
20001fb8:	203a7374 	eorscs	r7, sl, r4, ror r3
20001fbc:	00000000 	andeq	r0, r0, r0
20001fc0:	00003030 	andeq	r3, r0, r0, lsr r0

20001fc4 <ts_state>:
20001fc4:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000bee 	andeq	r0, r0, lr, ror #23
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000002dd 	ldrdeq	r0, [r0], -sp
  10:	0002a30c 	andeq	sl, r2, ip, lsl #6
  14:	0001f800 	andeq	pc, r1, r0, lsl #16
	...
  24:	01b80200 			; <UNDEFINED> instruction: 0x01b80200
  28:	03010000 	movweq	r0, #4096	; 0x1000
  2c:	00003705 	andeq	r3, r0, r5, lsl #14
  30:	c4030500 	strgt	r0, [r3], #-1280	; 0xfffffb00
  34:	0320001f 			; <UNDEFINED> instruction: 0x0320001f
  38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  3c:	2a040074 	bcs	100214 <startup-0x1feffdec>
  40:	01000005 	tsteq	r0, r5
  44:	00500d04 	subseq	r0, r0, r4, lsl #26
  48:	03050000 	movweq	r0, #20480	; 0x5000
  4c:	2000107c 	andcs	r1, r0, ip, ror r0
  50:	d8080105 	stmdale	r8, {r0, r2, r8}
  54:	06000002 	streq	r0, [r0], -r2
  58:	09030602 	stmdbeq	r3, {r1, r9, sl}
  5c:	00000077 	andeq	r0, r0, r7, ror r0
  60:	06007807 	streq	r7, [r0], -r7, lsl #16
  64:	00500704 	subseq	r0, r0, r4, lsl #14
  68:	07000000 	streq	r0, [r0, -r0]
  6c:	04060079 	streq	r0, [r6], #-121	; 0xffffff87
  70:	00005009 	andeq	r5, r0, r9
  74:	08000100 	stmdaeq	r0, {r8}
  78:	0000019a 	muleq	r0, sl, r1
  7c:	57030506 	strpl	r0, [r3, -r6, lsl #10]
  80:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  84:	070602c8 	streq	r0, [r6, -r8, asr #5]
  88:	0000c109 	andeq	ip, r0, r9, lsl #2
  8c:	04250a00 	strteq	r0, [r5], #-2560	; 0xfffff600
  90:	08060000 	stmdaeq	r6, {}	; <UNPREDICTABLE>
  94:	00003706 	andeq	r3, r0, r6, lsl #14
  98:	560a0000 	strpl	r0, [sl], -r0
  9c:	06000002 	streq	r0, [r0], -r2
  a0:	00370609 	eorseq	r0, r7, r9, lsl #12
  a4:	0a040000 	beq	1000ac <startup-0x1fefff54>
  a8:	0000025c 	andeq	r0, r0, ip, asr r2
  ac:	37060a06 	strcc	r0, [r6, -r6, lsl #20]
  b0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  b4:	00787007 	rsbseq	r7, r8, r7
  b8:	c1080b06 	tstgt	r8, r6, lsl #22
  bc:	0c000000 	stceq	0, cr0, [r0], {-0}
  c0:	00770b00 	rsbseq	r0, r7, r0, lsl #22
  c4:	00d20000 	sbcseq	r0, r2, r0
  c8:	d20c0000 	andle	r0, ip, #0
  cc:	5d000000 	stcpl	0, cr0, [r0, #-0]
  d0:	04050001 	streq	r0, [r5], #-1
  d4:	00038007 	andeq	r8, r3, r7
  d8:	00ea0800 	rsceq	r0, sl, r0, lsl #16
  dc:	0c060000 	stceq	0, cr0, [r6], {-0}
  e0:	00008303 	andeq	r8, r0, r3, lsl #6
  e4:	00e90800 	rsceq	r0, r9, r0, lsl #16
  e8:	0c060000 	stceq	0, cr0, [r6], {-0}
  ec:	0000f10e 	andeq	pc, r0, lr, lsl #2
  f0:	83040d00 	movwhi	r0, #19712	; 0x4d00
  f4:	02000000 	andeq	r0, r0, #0
  f8:	00000149 	andeq	r0, r0, r9, asr #2
  fc:	d90a0e06 	stmdble	sl, {r1, r2, r9, sl, fp}
 100:	05000000 	streq	r0, [r0, #-0]
 104:	00108003 	andseq	r8, r0, r3
 108:	040c0220 	streq	r0, [ip], #-544	; 0xfffffde0
 10c:	49060000 	stmdbmi	r6, {}	; <UNPREDICTABLE>
 110:	0000d90a 	andeq	sp, r0, sl, lsl #18
 114:	48030500 	stmdami	r3, {r8, sl}
 118:	02200013 	eoreq	r0, r0, #19
 11c:	00000449 	andeq	r0, r0, r9, asr #8
 120:	d90a8406 	stmdble	sl, {r1, r2, sl, pc}
 124:	05000000 	streq	r0, [r0, #-0]
 128:	00161003 	andseq	r1, r6, r3
 12c:	00210220 	eoreq	r0, r1, r0, lsr #4
 130:	98060000 	stmdals	r6, {}	; <UNPREDICTABLE>
 134:	0000d90a 	andeq	sp, r0, sl, lsl #18
 138:	d8030500 	stmdale	r3, {r8, sl}
 13c:	02200018 	eoreq	r0, r0, #24
 140:	000000b4 	strheq	r0, [r0], -r4
 144:	d90aad06 	stmdble	sl, {r1, r2, r8, sl, fp, sp, pc}
 148:	05000000 	streq	r0, [r0, #-0]
 14c:	001ba003 	andseq	sl, fp, r3
 150:	01b30e20 			; <UNDEFINED> instruction: 0x01b30e20
 154:	04240000 	strteq	r0, [r4], #-0
 158:	01d41003 	bicseq	r1, r4, r3
 15c:	67070000 	strvs	r0, [r7, -r0]
 160:	04006f65 	streq	r6, [r0], #-3941	; 0xfffff09b
 164:	00e50c04 	rsceq	r0, r5, r4, lsl #24
 168:	0a000000 	beq	170 <startup-0x1ffffe90>
 16c:	000001c1 	andeq	r0, r0, r1, asr #3
 170:	37060504 	strcc	r0, [r6, -r4, lsl #10]
 174:	04000000 	streq	r0, [r0], #-0
 178:	0001c60a 	andeq	ip, r1, sl, lsl #12
 17c:	0c050400 	cfstrseq	mvf0, [r5], {-0}
 180:	00000037 	andeq	r0, r0, r7, lsr r0
 184:	000c0a08 	andeq	r0, ip, r8, lsl #20
 188:	06040000 	streq	r0, [r4], -r0
 18c:	00003706 	andeq	r3, r0, r6, lsl #14
 190:	b80a0c00 	stmdalt	sl, {sl, fp}
 194:	04000003 	streq	r0, [r0], #-3
 198:	00370c06 	eorseq	r0, r7, r6, lsl #24
 19c:	0a100000 	beq	4001a4 <startup-0x1fbffe5c>
 1a0:	00000492 	muleq	r0, r2, r4
 1a4:	e5090704 	str	r0, [r9, #-1796]	; 0xfffff8fc
 1a8:	14000001 	strne	r0, [r0], #-1
 1ac:	0004ee0a 	andeq	lr, r4, sl, lsl #28
 1b0:	09080400 	stmdbeq	r8, {sl}
 1b4:	000001e5 	andeq	r0, r0, r5, ror #3
 1b8:	05350a18 	ldreq	r0, [r5, #-2584]!	; 0xfffff5e8
 1bc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
 1c0:	0001fa09 	andeq	pc, r1, r9, lsl #20
 1c4:	970a1c00 	strls	r1, [sl, -r0, lsl #24]
 1c8:	04000004 	streq	r0, [r0], #-4
 1cc:	02150a0a 	andseq	r0, r5, #40960	; 0xa000
 1d0:	00200000 	eoreq	r0, r0, r0
 1d4:	0001df0f 	andeq	sp, r1, pc, lsl #30
 1d8:	01df1000 	bicseq	r1, pc, r0
 1dc:	0d000000 	stceq	0, cr0, [r0, #-0]
 1e0:	00015104 	andeq	r5, r1, r4, lsl #2
 1e4:	d4040d00 	strle	r0, [r4], #-3328	; 0xfffff300
 1e8:	11000001 	tstne	r0, r1
 1ec:	00000037 	andeq	r0, r0, r7, lsr r0
 1f0:	000001fa 	strdeq	r0, [r0], -sl
 1f4:	0001df10 	andeq	sp, r1, r0, lsl pc
 1f8:	040d0000 	streq	r0, [sp], #-0
 1fc:	000001eb 	andeq	r0, r0, fp, ror #3
 200:	0002150f 	andeq	r1, r2, pc, lsl #10
 204:	01df1000 	bicseq	r1, pc, r0
 208:	37100000 	ldrcc	r0, [r0, -r0]
 20c:	10000000 	andne	r0, r0, r0
 210:	00000037 	andeq	r0, r0, r7, lsr r0
 214:	00040d00 	andeq	r0, r4, r0, lsl #26
 218:	08000002 	stmdaeq	r0, {r1}
 21c:	0000051b 	andeq	r0, r0, fp, lsl r5
 220:	51030b04 	tstpl	r3, r4, lsl #22
 224:	08000001 	stmdaeq	r0, {r0}
 228:	0000051a 	andeq	r0, r0, sl, lsl r5
 22c:	df0c0b04 	svcle	0x000c0b04
 230:	04000001 	streq	r0, [r0], #-1
 234:	0000042f 	andeq	r0, r0, pc, lsr #8
 238:	1b0f2504 	blne	3c9650 <startup-0x1fc369b0>
 23c:	05000002 	streq	r0, [r0, #-2]
 240:	001e6803 	andseq	r6, lr, r3, lsl #16
 244:	021a0420 	andseq	r0, sl, #32, 8	; 0x20000000
 248:	2d040000 	stccs	0, cr0, [r4, #-0]
 24c:	00021b0f 	andeq	r1, r2, pc, lsl #22
 250:	8c030500 	cfstr32hi	mvfx0, [r3], {-0}
 254:	0420001e 	strteq	r0, [r0], #-30	; 0xffffffe2
 258:	00000240 	andeq	r0, r0, r0, asr #4
 25c:	1b0f3704 	blne	3cde74 <startup-0x1fc3218c>
 260:	05000002 	streq	r0, [r0, #-2]
 264:	001eb003 	andseq	fp, lr, r3
 268:	022d0420 	eoreq	r0, sp, #32, 8	; 0x20000000
 26c:	41040000 	mrsmi	r0, (UNDEF: 4)
 270:	00021b0f 	andeq	r1, r2, pc, lsl #22
 274:	d4030500 	strle	r0, [r3], #-1280	; 0xfffffb00
 278:	0420001e 	strteq	r0, [r0], #-30	; 0xffffffe2
 27c:	000001e2 	andeq	r0, r0, r2, ror #3
 280:	1b0f4b04 	blne	3d2e98 <startup-0x1fc2d168>
 284:	05000002 	streq	r0, [r0, #-2]
 288:	001ef803 	andseq	pc, lr, r3, lsl #16
 28c:	013b0420 	teqeq	fp, r0, lsr #8
 290:	55040000 	strpl	r0, [r4, #-0]
 294:	00021b0f 	andeq	r1, r2, pc, lsl #22
 298:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
 29c:	0420001f 	strteq	r0, [r0], #-31	; 0xffffffe1
 2a0:	00000034 	andeq	r0, r0, r4, lsr r0
 2a4:	1b0f5f04 	blne	3d7ebc <startup-0x1fc28144>
 2a8:	05000002 	streq	r0, [r0, #-2]
 2ac:	001f4003 	andseq	r4, pc, r3
 2b0:	00cd1220 	sbceq	r1, sp, r0, lsr #4
 2b4:	a1050000 	mrsge	r0, (UNDEF: 5)
 2b8:	000a9c06 	andeq	r9, sl, r6, lsl #24
 2bc:	0002f420 	andeq	pc, r2, r0, lsr #8
 2c0:	7f9c0100 	svcvc	0x009c0100
 2c4:	04000003 	streq	r0, [r0], #-3
 2c8:	00000489 	andeq	r0, r0, r9, lsl #9
 2cc:	7f07a805 	svcvc	0x0007a805
 2d0:	02000003 	andeq	r0, r0, #3
 2d4:	1a046491 	bne	119520 <startup-0x1fee6ae0>
 2d8:	05000000 	streq	r0, [r0, #-0]
 2dc:	038f08a9 	orreq	r0, pc, #11075584	; 0xa90000
 2e0:	91020000 	mrsls	r0, (UNDEF: 2)
 2e4:	0111046e 	tsteq	r1, lr, ror #8
 2e8:	aa050000 	bge	1402f0 <startup-0x1febfd10>
 2ec:	00039608 	andeq	r9, r3, r8, lsl #12
 2f0:	63910200 	orrsvs	r0, r1, #0, 4
 2f4:	00007c04 	andeq	r7, r0, r4, lsl #24
 2f8:	11ac0500 			; <UNDEFINED> instruction: 0x11ac0500
 2fc:	00000227 	andeq	r0, r0, r7, lsr #4
 300:	1f680305 	svcne	0x00680305
 304:	42042000 	andmi	r2, r4, #0
 308:	05000000 	streq	r0, [r0, #-0]
 30c:	022711ad 	eoreq	r1, r7, #1073741867	; 0x4000002b
 310:	03050000 	movweq	r0, #20480	; 0x5000
 314:	20001f6c 	andcs	r1, r0, ip, ror #30
 318:	00008b04 	andeq	r8, r0, r4, lsl #22
 31c:	11ae0500 			; <UNDEFINED> instruction: 0x11ae0500
 320:	00000227 	andeq	r0, r0, r7, lsr #4
 324:	1f700305 	svcne	0x00700305
 328:	54042000 	strpl	r2, [r4], #-0
 32c:	05000000 	streq	r0, [r0, #-0]
 330:	022711af 	eoreq	r1, r7, #-1073741781	; 0xc000002b
 334:	03050000 	movweq	r0, #20480	; 0x5000
 338:	20001f74 	andcs	r1, r0, r4, ror pc
 33c:	0003c904 	andeq	ip, r3, r4, lsl #18
 340:	11b00500 	lslsne	r0, r0, #10
 344:	00000227 	andeq	r0, r0, r7, lsr #4
 348:	1f640305 	svcne	0x00640305
 34c:	ff042000 			; <UNDEFINED> instruction: 0xff042000
 350:	05000003 	streq	r0, [r0, #-3]
 354:	022711b1 	eoreq	r1, r7, #1073741868	; 0x4000002c
 358:	03050000 	movweq	r0, #20480	; 0x5000
 35c:	20001f78 	andcs	r1, r0, r8, ror pc
 360:	00038d04 	andeq	r8, r3, r4, lsl #26
 364:	08b30500 	ldmeq	r3!, {r8, sl}
 368:	0000038f 	andeq	r0, r0, pc, lsl #7
 36c:	046c9102 	strbteq	r9, [ip], #-258	; 0xfffffefe
 370:	000003bd 			; <UNDEFINED> instruction: 0x000003bd
 374:	8f08b405 	svchi	0x0008b405
 378:	02000003 	andeq	r0, r0, #3
 37c:	0b006a91 	bleq	1adc8 <startup-0x1ffe5238>
 380:	00000050 	andeq	r0, r0, r0, asr r0
 384:	0000038f 	andeq	r0, r0, pc, lsl #7
 388:	0000d213 	andeq	sp, r0, r3, lsl r2
 38c:	05000200 	streq	r0, [r0, #-512]	; 0xfffffe00
 390:	00660502 	rsbeq	r0, r6, r2, lsl #10
 394:	01050000 	mrseq	r0, (UNDEF: 5)
 398:	00044302 	andeq	r4, r4, r2, lsl #6
 39c:	01731200 	cmneq	r3, r0, lsl #4
 3a0:	8d050000 	stchi	0, cr0, [r5, #-0]
 3a4:	000a0206 	andeq	r0, sl, r6, lsl #4
 3a8:	00009a20 	andeq	r9, r0, r0, lsr #20
 3ac:	0e9c0100 	fmleqe	f0, f4, f0
 3b0:	14000004 	strne	r0, [r0], #-4
 3b4:	0000007c 	andeq	r0, r0, ip, ror r0
 3b8:	27228d05 	strcs	r8, [r2, -r5, lsl #26]!
 3bc:	02000002 	andeq	r0, r0, #2
 3c0:	42146c91 	andsmi	r6, r4, #37120	; 0x9100
 3c4:	05000000 	streq	r0, [r0, #-0]
 3c8:	02273a8d 	eoreq	r3, r7, #577536	; 0x8d000
 3cc:	91020000 	mrsls	r0, (UNDEF: 2)
 3d0:	008b1468 	addeq	r1, fp, r8, ror #8
 3d4:	8d050000 	stchi	0, cr0, [r5, #-0]
 3d8:	00022755 	andeq	r2, r2, r5, asr r7
 3dc:	64910200 	ldrvs	r0, [r1], #512	; 0x200
 3e0:	00005414 	andeq	r5, r0, r4, lsl r4
 3e4:	6d8d0500 	cfstr32vs	mvfx0, [sp]
 3e8:	00000227 	andeq	r0, r0, r7, lsr #4
 3ec:	14609102 	strbtne	r9, [r0], #-258	; 0xfffffefe
 3f0:	000004f4 	strdeq	r0, [r0], -r4
 3f4:	50858d05 	addpl	r8, r5, r5, lsl #26
 3f8:	02000000 	andeq	r0, r0, #0
 3fc:	1a040091 	bne	100648 <startup-0x1feff9b8>
 400:	05000000 	streq	r0, [r0, #-0]
 404:	0037068e 	eorseq	r0, r7, lr, lsl #13
 408:	91020000 	mrsls	r0, (UNDEF: 2)
 40c:	69150074 	ldmdbvs	r5, {r2, r4, r5, r6}
 410:	05000001 	streq	r0, [r0, #-1]
 414:	09340674 	ldmdbeq	r4!, {r2, r4, r5, r6, r9, sl}
 418:	00ce2000 	sbceq	r2, lr, r0
 41c:	9c010000 	stcls	0, cr0, [r1], {-0}
 420:	00000470 	andeq	r0, r0, r0, ror r4
 424:	0003c914 	andeq	ip, r3, r4, lsl r9
 428:	18740500 	ldmdane	r4!, {r8, sl}^
 42c:	00000227 	andeq	r0, r0, r7, lsr #4
 430:	16749102 	ldrbtne	r9, [r4], -r2, lsl #2
 434:	0031626f 	eorseq	r6, r1, pc, ror #4
 438:	27267405 	strcs	r7, [r6, -r5, lsl #8]!
 43c:	02000002 	andeq	r0, r0, #2
 440:	6f167091 	svcvs	0x00167091
 444:	05003262 	streq	r3, [r0, #-610]	; 0xfffffd9e
 448:	02273374 	eoreq	r3, r7, #116, 6	; 0xd0000001
 44c:	91020000 	mrsls	r0, (UNDEF: 2)
 450:	0111146c 	tsteq	r1, ip, ror #8
 454:	74050000 	strvc	r0, [r5], #-0
 458:	0004703f 	andeq	r7, r4, pc, lsr r0
 45c:	68910200 	ldmvs	r1, {r9}
 460:	00048914 	andeq	r8, r4, r4, lsl r9
 464:	52740500 	rsbspl	r0, r4, #0, 10
 468:	00000476 	andeq	r0, r0, r6, ror r4
 46c:	00009102 	andeq	r9, r0, r2, lsl #2
 470:	0396040d 	orrseq	r0, r6, #218103808	; 0xd000000
 474:	040d0000 	streq	r0, [sp], #-0
 478:	00000050 	andeq	r0, r0, r0, asr r0
 47c:	00011e12 	andeq	r1, r1, r2, lsl lr
 480:	06640500 	strbteq	r0, [r4], -r0, lsl #10
 484:	200008ca 	andcs	r0, r0, sl, asr #17
 488:	0000006a 	andeq	r0, r0, sl, rrx
 48c:	04c09c01 	strbeq	r9, [r0], #3073	; 0xc01
 490:	89140000 	ldmdbhi	r4, {}	; <UNPREDICTABLE>
 494:	05000004 	streq	r0, [r0, #-4]
 498:	04761764 	ldrbteq	r1, [r6], #-1892	; 0xfffff89c
 49c:	91020000 	mrsls	r0, (UNDEF: 2)
 4a0:	00e3045c 	rsceq	r0, r3, ip, asr r4
 4a4:	65050000 	strvs	r0, [r5, #-0]
 4a8:	00047608 	andeq	r7, r4, r8, lsl #12
 4ac:	6c910200 	lfmvs	f0, 4, [r1], {0}
 4b0:	0000e404 	andeq	lr, r0, r4, lsl #8
 4b4:	07660500 	strbeq	r0, [r6, -r0, lsl #10]!
 4b8:	000004c0 	andeq	r0, r0, r0, asr #9
 4bc:	00609102 	rsbeq	r9, r0, r2, lsl #2
 4c0:	0000500b 	andeq	r5, r0, fp
 4c4:	0004d000 	andeq	sp, r4, r0
 4c8:	00d21300 	sbcseq	r1, r2, r0, lsl #6
 4cc:	00080000 	andeq	r0, r8, r0
 4d0:	00009a15 	andeq	r9, r0, r5, lsl sl
 4d4:	06550500 	ldrbeq	r0, [r5], -r0, lsl #10
 4d8:	20000874 	andcs	r0, r0, r4, ror r8
 4dc:	00000056 	andeq	r0, r0, r6, asr r0
 4e0:	053f9c01 	ldreq	r9, [pc, #-3073]!	; fffff8e7 <ts_state+0xdfffd923>
 4e4:	6f160000 	svcvs	0x00160000
 4e8:	05003174 	streq	r3, [r0, #-372]	; 0xfffffe8c
 4ec:	02272155 	eoreq	r2, r7, #1073741845	; 0x40000015
 4f0:	91020000 	mrsls	r0, (UNDEF: 2)
 4f4:	626f1674 	rsbvs	r1, pc, #116, 12	; 0x7400000
 4f8:	55050031 	strpl	r0, [r5, #-49]	; 0xffffffcf
 4fc:	0002272e 	andeq	r2, r2, lr, lsr #14
 500:	70910200 	addsvc	r0, r1, r0, lsl #4
 504:	32746f16 	rsbscc	r6, r4, #22, 30	; 0x58
 508:	3b550500 	blcc	1541910 <startup-0x1eabe6f0>
 50c:	00000227 	andeq	r0, r0, r7, lsr #4
 510:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 514:	0032626f 	eorseq	r6, r2, pc, ror #4
 518:	27485505 	strbcs	r5, [r8, -r5, lsl #10]
 51c:	02000002 	andeq	r0, r0, #2
 520:	62166891 	andsvs	r6, r6, #9502720	; 0x910000
 524:	55050073 	strpl	r0, [r5, #-115]	; 0xffffff8d
 528:	00022755 	andeq	r2, r2, r5, asr r7
 52c:	00910200 	addseq	r0, r1, r0, lsl #4
 530:	00666216 	rsbeq	r6, r6, r6, lsl r2
 534:	27615505 	strbcs	r5, [r1, -r5, lsl #10]!
 538:	02000002 	andeq	r0, r0, #2
 53c:	12000491 	andne	r0, r0, #-1862270976	; 0x91000000
 540:	000004ae 	andeq	r0, r0, lr, lsr #9
 544:	2e064e05 	cdpcs	14, 0, cr4, cr6, cr5, {0}
 548:	46200008 	strtmi	r0, [r0], -r8
 54c:	01000000 	mrseq	r0, (UNDEF: 0)
 550:	0005ac9c 	muleq	r5, ip, ip
 554:	00781600 	rsbseq	r1, r8, r0, lsl #12
 558:	371d4e05 	ldrcc	r4, [sp, -r5, lsl #28]
 55c:	02000000 	andeq	r0, r0, #0
 560:	79167491 	ldmdbvc	r6, {r0, r4, r7, sl, ip, sp, lr}
 564:	244e0500 	strbcs	r0, [lr], #-1280	; 0xfffffb00
 568:	00000037 	andeq	r0, r0, r7, lsr r0
 56c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
 570:	0074316f 	rsbseq	r3, r4, pc, ror #2
 574:	272f4e05 	strcs	r4, [pc, -r5, lsl #28]!
 578:	02000002 	andeq	r0, r0, #2
 57c:	6f166c91 	svcvs	0x00166c91
 580:	05006231 	streq	r6, [r0, #-561]	; 0xfffffdcf
 584:	02273c4e 	eoreq	r3, r7, #19968	; 0x4e00
 588:	91020000 	mrsls	r0, (UNDEF: 2)
 58c:	326f1668 	rsbcc	r1, pc, #104, 12	; 0x6800000
 590:	4e050074 	mcrmi	0, 0, r0, cr5, cr4, {3}
 594:	00022749 	andeq	r2, r2, r9, asr #14
 598:	00910200 	addseq	r0, r1, r0, lsl #4
 59c:	62326f16 	eorsvs	r6, r2, #22, 30	; 0x58
 5a0:	564e0500 	strbpl	r0, [lr], -r0, lsl #10
 5a4:	00000227 	andeq	r0, r0, r7, lsr #4
 5a8:	00049102 	andeq	r9, r4, r2, lsl #2
 5ac:	0003e712 	andeq	lr, r3, r2, lsl r7
 5b0:	06470500 	strbeq	r0, [r7], -r0, lsl #10
 5b4:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 5b8:	0000003e 	andeq	r0, r0, lr, lsr r0
 5bc:	05ff9c01 	ldrbeq	r9, [pc, #3073]!	; 11c5 <startup-0x1fffee3b>
 5c0:	6f160000 	svcvs	0x00160000
 5c4:	05007431 	streq	r7, [r0, #-1073]	; 0xfffffbcf
 5c8:	02271d47 	eoreq	r1, r7, #4544	; 0x11c0
 5cc:	91020000 	mrsls	r0, (UNDEF: 2)
 5d0:	316f1674 	smccc	61796	; 0xf164
 5d4:	47050062 	strmi	r0, [r5, -r2, rrx]
 5d8:	0002272a 	andeq	r2, r2, sl, lsr #14
 5dc:	70910200 	addsvc	r0, r1, r0, lsl #4
 5e0:	74326f16 	ldrtvc	r6, [r2], #-3862	; 0xfffff0ea
 5e4:	37470500 	strbcc	r0, [r7, -r0, lsl #10]
 5e8:	00000227 	andeq	r0, r0, r7, lsr #4
 5ec:	166c9102 	strbtne	r9, [ip], -r2, lsl #2
 5f0:	0062326f 	rsbeq	r3, r2, pc, ror #4
 5f4:	27444705 	strbcs	r4, [r4, -r5, lsl #14]
 5f8:	02000002 	andeq	r0, r0, #2
 5fc:	17006891 			; <UNDEFINED> instruction: 0x17006891
 600:	0000039c 	muleq	r0, ip, r3
 604:	37053805 	strcc	r3, [r5, -r5, lsl #16]
 608:	1c000000 	stcne	0, cr0, [r0], {-0}
 60c:	d4200007 	strtle	r0, [r0], #-7
 610:	01000000 	mrseq	r0, (UNDEF: 0)
 614:	0006659c 	muleq	r6, ip, r5
 618:	04841400 	streq	r1, [r4], #1024	; 0x400
 61c:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
 620:	0002271e 	andeq	r2, r2, lr, lsl r7
 624:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 628:	0000f314 	andeq	pc, r0, r4, lsl r3	; <UNPREDICTABLE>
 62c:	2c380500 	cfldr32cs	mvfx0, [r8], #-0
 630:	00000227 	andeq	r0, r0, r7, lsr #4
 634:	14709102 	ldrbtne	r9, [r0], #-258	; 0xfffffefe
 638:	00000011 	andeq	r0, r0, r1, lsl r0
 63c:	273e3805 	ldrcs	r3, [lr, -r5, lsl #16]!
 640:	02000002 	andeq	r0, r0, #2
 644:	66146c91 			; <UNDEFINED> instruction: 0x66146c91
 648:	05000003 	streq	r0, [r0, #-3]
 64c:	02275038 	eoreq	r5, r7, #56	; 0x38
 650:	91020000 	mrsls	r0, (UNDEF: 2)
 654:	05461468 	strbeq	r1, [r6, #-1128]	; 0xfffffb98
 658:	38050000 	stmdacc	r5, {}	; <UNPREDICTABLE>
 65c:	00022762 	andeq	r2, r2, r2, ror #14
 660:	00910200 	addseq	r0, r1, r0, lsl #4
 664:	00001800 	andeq	r1, r0, r0, lsl #16
 668:	31050000 	mrscc	r0, (UNDEF: 5)
 66c:	0006e006 	andeq	lr, r6, r6
 670:	00003c20 	andeq	r3, r0, r0, lsr #24
 674:	199c0100 	ldmibne	ip, {r8}
 678:	000003f6 	strdeq	r0, [r0], -r6
 67c:	ba062c05 	blt	18b698 <startup-0x1fe74968>
 680:	26200006 	strtcs	r0, [r0], -r6
 684:	01000000 	mrseq	r0, (UNDEF: 0)
 688:	04e0159c 	strbteq	r1, [r0], #1436	; 0x59c
 68c:	27050000 	strcs	r0, [r5, -r0]
 690:	0006b406 	andeq	fp, r6, r6, lsl #8
 694:	00000620 	andeq	r0, r0, r0, lsr #12
 698:	b89c0100 	ldmlt	ip, {r8}
 69c:	16000006 	strne	r0, [r0], -r6
 6a0:	27050078 	smlsdxcs	r5, r8, r0, r0
 6a4:	0000371e 	andeq	r3, r0, lr, lsl r7
 6a8:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
 6ac:	27050079 	smlsdxcs	r5, r9, r0, r0
 6b0:	00003725 	andeq	r3, r0, r5, lsr #14
 6b4:	00510100 	subseq	r0, r1, r0, lsl #2
 6b8:	00026215 	andeq	r6, r2, r5, lsl r2
 6bc:	06210500 	strteq	r0, [r1], -r0, lsl #10
 6c0:	200006ae 	andcs	r0, r0, lr, lsr #13
 6c4:	00000006 	andeq	r0, r0, r6
 6c8:	06e79c01 	strbteq	r9, [r7], r1, lsl #24
 6cc:	78160000 	ldmdavc	r6, {}	; <UNPREDICTABLE>
 6d0:	1c210500 	cfstr32ne	mvfx0, [r1], #-0
 6d4:	00000037 	andeq	r0, r0, r7, lsr r0
 6d8:	79165001 	ldmdbvc	r6, {r0, ip, lr}
 6dc:	23210500 			; <UNDEFINED> instruction: 0x23210500
 6e0:	00000037 	andeq	r0, r0, r7, lsr r0
 6e4:	19005101 	stmdbne	r0, {r0, r8, ip, lr}
 6e8:	000000fc 	strdeq	r0, [r0], -ip
 6ec:	a8061b05 	stmdage	r6, {r0, r2, r8, r9, fp, ip}
 6f0:	06200006 	strteq	r0, [r0], -r6
 6f4:	01000000 	mrseq	r0, (UNDEF: 0)
 6f8:	0187199c 			; <UNDEFINED> instruction: 0x0187199c
 6fc:	15050000 	strne	r0, [r5, #-0]
 700:	0006a206 	andeq	sl, r6, r6, lsl #4
 704:	00000620 	andeq	r0, r0, r0, lsr #12
 708:	199c0100 	ldmibne	ip, {r8}
 70c:	00000512 	andeq	r0, r0, r2, lsl r5
 710:	00060c05 	andeq	r0, r6, r5, lsl #24
 714:	0c200000 	stceq	0, cr0, [r0], #-0
 718:	01000000 	mrseq	r0, (UNDEF: 0)
 71c:	00d2159c 	smullseq	r1, r2, ip, r5
 720:	20040000 	andcs	r0, r4, r0
 724:	00068206 	andeq	r8, r6, r6, lsl #4
 728:	00002020 	andeq	r2, r0, r0, lsr #32
 72c:	5d9c0100 	ldfpls	f0, [ip]
 730:	16000007 	strne	r0, [r0], -r7
 734:	006a626f 	rsbeq	r6, sl, pc, ror #4
 738:	271f2004 	ldrcs	r2, [pc, -r4]
 73c:	02000002 	andeq	r0, r0, #2
 740:	78167491 	ldmdavc	r6, {r0, r4, r7, sl, ip, sp, lr}
 744:	28200400 	stmdacs	r0!, {sl}
 748:	00000037 	andeq	r0, r0, r7, lsr r0
 74c:	16709102 	ldrbtne	r9, [r0], -r2, lsl #2
 750:	20040079 	andcs	r0, r4, r9, ror r0
 754:	0000372f 	andeq	r3, r0, pc, lsr #14
 758:	6c910200 	lfmvs	f0, 4, [r1], {0}
 75c:	03ce1200 	biceq	r1, lr, #0, 4
 760:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
 764:	00064606 	andeq	r4, r6, r6, lsl #12
 768:	00003c20 	andeq	r3, r0, r0, lsr #24
 76c:	839c0100 	orrshi	r0, ip, #0, 2
 770:	16000007 	strne	r0, [r0], -r7
 774:	006a626f 	rsbeq	r6, sl, pc, ror #4
 778:	271a1904 	ldrcs	r1, [sl, -r4, lsl #18]
 77c:	02000002 	andeq	r0, r0, #2
 780:	12007491 	andne	r7, r0, #-1862270976	; 0x91000000
 784:	000004a1 	andeq	r0, r0, r1, lsr #9
 788:	e6061304 	str	r1, [r6], -r4, lsl #6
 78c:	60200005 	eorvs	r0, r0, r5
 790:	01000000 	mrseq	r0, (UNDEF: 0)
 794:	0007d89c 	muleq	r7, ip, r8
 798:	626f1600 	rsbvs	r1, pc, #0, 12
 79c:	1304006a 	movwne	r0, #16490	; 0x406a
 7a0:	0002271b 	andeq	r2, r2, fp, lsl r7
 7a4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 7a8:	0005ee1a 	andeq	lr, r5, sl, lsl lr
 7ac:	00004e20 	andeq	r4, r0, r0, lsr #28
 7b0:	00691b00 	rsbeq	r1, r9, r0, lsl #22
 7b4:	370a1404 	strcc	r1, [sl, -r4, lsl #8]
 7b8:	02000000 	andeq	r0, r0, #0
 7bc:	f41a7491 			; <UNDEFINED> instruction: 0xf41a7491
 7c0:	36200005 	strtcc	r0, [r0], -r5
 7c4:	1c000000 	stcne	0, cr0, [r0], {-0}
 7c8:	000004e0 	andeq	r0, r0, r0, ror #9
 7cc:	37031504 	strcc	r1, [r3, -r4, lsl #10]
 7d0:	1d000000 	stcne	0, cr0, [r0, #-0]
 7d4:	00000000 	andeq	r0, r0, r0
 7d8:	00053a12 	andeq	r3, r5, r2, lsl sl
 7dc:	060d0400 	streq	r0, [sp], -r0, lsl #8
 7e0:	20000586 	andcs	r0, r0, r6, lsl #11
 7e4:	00000060 	andeq	r0, r0, r0, rrx
 7e8:	082d9c01 	stmdaeq	sp!, {r0, sl, fp, ip, pc}
 7ec:	6f160000 	svcvs	0x00160000
 7f0:	04006a62 	streq	r6, [r0], #-2658	; 0xfffff59e
 7f4:	02271a0d 	eoreq	r1, r7, #53248	; 0xd000
 7f8:	91020000 	mrsls	r0, (UNDEF: 2)
 7fc:	058e1a6c 	streq	r1, [lr, #2668]	; 0xa6c
 800:	004e2000 	subeq	r2, lr, r0
 804:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 808:	0a0e0400 	beq	381810 <startup-0x1fc7e7f0>
 80c:	00000037 	andeq	r0, r0, r7, lsr r0
 810:	1a749102 	bne	1d24c20 <startup-0x1e2db3e0>
 814:	20000594 	mulcs	r0, r4, r5
 818:	00000036 	andeq	r0, r0, r6, lsr r0
 81c:	0002621c 	andeq	r6, r2, ip, lsl r2
 820:	030f0400 	movweq	r0, #62464	; 0xf400
 824:	00000037 	andeq	r0, r0, r7, lsr r0
 828:	0000001d 	andeq	r0, r0, sp, lsl r0
 82c:	02821200 	addeq	r1, r2, #0, 4
 830:	1a030000 	bne	c0838 <startup-0x1ff3f7c8>
 834:	00054606 	andeq	r4, r5, r6, lsl #12
 838:	00004020 	andeq	r4, r0, r0, lsr #32
 83c:	529c0100 	addspl	r0, ip, #0, 2
 840:	16000008 	strne	r0, [r0], -r8
 844:	0300736d 	movweq	r7, #877	; 0x36d
 848:	00d21f1a 	sbcseq	r1, r2, sl, lsl pc
 84c:	91020000 	mrsls	r0, (UNDEF: 2)
 850:	70120074 	andsvc	r0, r2, r4, ror r0
 854:	03000000 	movweq	r0, #0
 858:	0500060c 	streq	r0, [r0, #-1548]	; 0xfffff9f4
 85c:	00462000 	subeq	r2, r6, r0
 860:	9c010000 	stcls	0, cr0, [r1], {-0}
 864:	00000877 	andeq	r0, r0, r7, ror r8
 868:	00737516 	rsbseq	r7, r3, r6, lsl r5
 86c:	d21f0c03 	andsle	r0, pc, #768	; 0x300
 870:	02000000 	andeq	r0, r0, #0
 874:	19007491 	stmdbne	r0, {r0, r4, r7, sl, ip, sp, lr}
 878:	000004c1 	andeq	r0, r0, r1, asr #9
 87c:	bc060303 	stclt	3, cr0, [r6], {3}
 880:	44200004 	strtmi	r0, [r0], #-4
 884:	01000000 	mrseq	r0, (UNDEF: 0)
 888:	03da129c 	bicseq	r1, sl, #156, 4	; 0xc0000009
 88c:	73020000 	movwvc	r0, #8192	; 0x2000
 890:	00048406 	andeq	r8, r4, r6, lsl #8
 894:	00003820 	andeq	r3, r0, r0, lsr #16
 898:	c99c0100 	ldmibgt	ip, {r8}
 89c:	16000008 	strne	r0, [r0], -r8
 8a0:	73020078 	movwvc	r0, #8312	; 0x2078
 8a4:	00003717 	andeq	r3, r0, r7, lsl r7
 8a8:	6c910200 	lfmvs	f0, 4, [r1], {0}
 8ac:	02007916 	andeq	r7, r0, #360448	; 0x58000
 8b0:	00371e73 	eorseq	r1, r7, r3, ror lr
 8b4:	91020000 	mrsls	r0, (UNDEF: 2)
 8b8:	035e0468 	cmpeq	lr, #104, 8	; 0x68000000
 8bc:	74020000 	strvc	r0, [r2], #-0
 8c0:	00003706 	andeq	r3, r0, r6, lsl #14
 8c4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 8c8:	012a1200 			; <UNDEFINED> instruction: 0x012a1200
 8cc:	6c020000 	stcvs	0, cr0, [r2], {-0}
 8d0:	00045206 	andeq	r5, r4, r6, lsl #4
 8d4:	00003220 	andeq	r3, r0, r0, lsr #4
 8d8:	fb9c0100 	blx	fe700ce2 <ts_state+0xde6fed1e>
 8dc:	16000008 	strne	r0, [r0], -r8
 8e0:	6c020063 	stcvs	0, cr0, [r2], {99}	; 0x63
 8e4:	0008fb25 	andeq	pc, r8, r5, lsr #22
 8e8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 8ec:	0000701c 	andeq	r7, r0, ip, lsl r0
 8f0:	02570200 	subseq	r0, r7, #0, 4
 8f4:	00000037 	andeq	r0, r0, r7, lsr r0
 8f8:	0500001d 	streq	r0, [r0, #-29]	; 0xffffffe3
 8fc:	02cf0801 	sbceq	r0, pc, #65536	; 0x10000
 900:	4f1e0000 	svcmi	0x001e0000
 904:	02000005 	andeq	r0, r0, #5
 908:	04260663 	strteq	r0, [r6], #-1635	; 0xfffff99d
 90c:	002c2000 	eoreq	r2, ip, r0
 910:	9c010000 	stcls	0, cr0, [r1], {-0}
 914:	0002741f 	andeq	r7, r2, pc, lsl r4
 918:	06550200 	ldrbeq	r0, [r5], -r0, lsl #4
 91c:	200003e4 	andcs	r0, r0, r4, ror #7
 920:	00000042 	andeq	r0, r0, r2, asr #32
 924:	09649c01 	stmdbeq	r4!, {r0, sl, fp, ip, pc}^
 928:	7a140000 	bvc	500930 <startup-0x1faff6d0>
 92c:	02000002 	andeq	r0, r0, #2
 930:	00370655 	eorseq	r0, r7, r5, asr r6
 934:	91020000 	mrsls	r0, (UNDEF: 2)
 938:	00702074 	rsbseq	r2, r0, r4, ror r0
 93c:	57020000 	strpl	r0, [r2, -r0]
 940:	00003702 	andeq	r3, r0, r2, lsl #14
 944:	00094b00 	andeq	r4, r9, r0, lsl #22
 948:	1a001d00 	bne	7d50 <startup-0x1fff82b0>
 94c:	20000410 	andcs	r0, r0, r0, lsl r4
 950:	00000006 	andeq	r0, r0, r6
 954:	0002821c 	andeq	r8, r2, ip, lsl r2
 958:	035c0200 	cmpeq	ip, #0, 4
 95c:	00000037 	andeq	r0, r0, r7, lsr r0
 960:	0000001d 	andeq	r0, r0, sp, lsl r0
 964:	0004f921 	andeq	pc, r4, r1, lsr #18
 968:	0f490200 	svceq	0x00490200
 96c:	000008fb 	strdeq	r0, [r0], -fp
 970:	200003a0 	andcs	r0, r0, r0, lsr #7
 974:	00000044 	andeq	r0, r0, r4, asr #32
 978:	098c9c01 	stmibeq	ip, {r0, sl, fp, ip, pc}
 97c:	631b0000 	tstvs	fp, #0
 980:	074a0200 	strbeq	r0, [sl, -r0, lsl #4]
 984:	00000050 	andeq	r0, r0, r0, asr r0
 988:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 98c:	00047221 	andeq	r7, r4, r1, lsr #4
 990:	0f3d0200 	svceq	0x003d0200
 994:	000008fb 	strdeq	r0, [r0], -fp
 998:	2000035c 	andcs	r0, r0, ip, asr r3
 99c:	00000044 	andeq	r0, r0, r4, asr #32
 9a0:	09b49c01 	ldmibeq	r4!, {r0, sl, fp, ip, pc}
 9a4:	631b0000 	tstvs	fp, #0
 9a8:	073e0200 	ldreq	r0, [lr, -r0, lsl #4]!
 9ac:	00000050 	andeq	r0, r0, r0, asr r0
 9b0:	006f9102 	rsbeq	r9, pc, r2, lsl #2
 9b4:	00036f12 	andeq	r6, r3, r2, lsl pc
 9b8:	06370200 	ldrteq	r0, [r7], -r0, lsl #4
 9bc:	2000032e 	andcs	r0, r0, lr, lsr #6
 9c0:	0000002e 	andeq	r0, r0, lr, lsr #32
 9c4:	09da9c01 	ldmibeq	sl, {r0, sl, fp, ip, pc}^
 9c8:	04140000 	ldreq	r0, [r4], #-0
 9cc:	02000005 	andeq	r0, r0, #5
 9d0:	08fb2537 	ldmeq	fp!, {r0, r1, r2, r4, r5, r8, sl, sp}^
 9d4:	91020000 	mrsls	r0, (UNDEF: 2)
 9d8:	5a120077 	bpl	480bbc <startup-0x1fb7f444>
 9dc:	02000005 	andeq	r0, r0, #5
 9e0:	03000631 	movweq	r0, #1585	; 0x631
 9e4:	002e2000 	eoreq	r2, lr, r0
 9e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 9ec:	00000a00 	andeq	r0, r0, r0, lsl #20
 9f0:	00027a14 	andeq	r7, r2, r4, lsl sl
 9f4:	24310200 	ldrtcs	r0, [r1], #-512	; 0xfffffe00
 9f8:	000008fb 	strdeq	r0, [r0], -fp
 9fc:	00779102 	rsbseq	r9, r7, r2, lsl #2
 a00:	00045c21 	andeq	r5, r4, r1, lsr #24
 a04:	0f230200 	svceq	0x00230200
 a08:	000008fb 	strdeq	r0, [r0], -fp
 a0c:	200002c8 	andcs	r0, r0, r8, asr #5
 a10:	00000038 	andeq	r0, r0, r8, lsr r0
 a14:	0a369c01 	beq	da7a20 <startup-0x1f2585e0>
 a18:	631b0000 	tstvs	fp, #0
 a1c:	10240200 	eorne	r0, r4, r0, lsl #4
 a20:	000008fb 	strdeq	r0, [r0], -fp
 a24:	1c779102 	ldfnep	f1, [r7], #-8
 a28:	000004c1 	andeq	r0, r0, r1, asr #9
 a2c:	37021f02 	strcc	r1, [r2, -r2, lsl #30]
 a30:	1d000000 	stcne	0, cr0, [r0, #-0]
 a34:	cb120000 	blgt	480a3c <startup-0x1fb7f5c4>
 a38:	02000001 	andeq	r0, r0, #1
 a3c:	0294061b 	addseq	r0, r4, #28311552	; 0x1b00000
 a40:	00342000 	eorseq	r2, r4, r0
 a44:	9c010000 	stcls	0, cr0, [r1], {-0}
 a48:	00000a6a 	andeq	r0, r0, sl, ror #20
 a4c:	0004cd14 	andeq	ip, r4, r4, lsl sp
 a50:	2b1b0200 	blcs	6c1258 <startup-0x1f93eda8>
 a54:	000008fb 	strdeq	r0, [r0], -fp
 a58:	1c779102 	ldfnep	f1, [r7], #-8
 a5c:	000004c1 	andeq	r0, r0, r1, asr #9
 a60:	37021f02 	strcc	r1, [r2, -r2, lsl #30]
 a64:	1d000000 	stcne	0, cr0, [r0, #-0]
 a68:	8e150000 	cdphi	0, 1, cr0, cr5, cr0, {0}
 a6c:	02000002 	andeq	r0, r0, #2
 a70:	0230060e 	eorseq	r0, r0, #14680064	; 0xe00000
 a74:	00642000 	rsbeq	r2, r4, r0
 a78:	9c010000 	stcls	0, cr0, [r1], {-0}
 a7c:	00000aaa 	andeq	r0, r0, sl, lsr #21
 a80:	02007816 	andeq	r7, r0, #1441792	; 0x160000
 a84:	08fb290e 	ldmeq	fp!, {r1, r2, r3, r8, fp, sp}^
 a88:	91020000 	mrsls	r0, (UNDEF: 2)
 a8c:	00ad146f 	adceq	r1, sp, pc, ror #8
 a90:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
 a94:	0008fb3a 	andeq	pc, r8, sl, lsr fp	; <UNPREDICTABLE>
 a98:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 a9c:	0200631b 	andeq	r6, r0, #1811939328	; 0x6c000000
 aa0:	0050070f 	subseq	r0, r0, pc, lsl #14
 aa4:	91020000 	mrsls	r0, (UNDEF: 2)
 aa8:	a0150077 	andsge	r0, r5, r7, ror r0
 aac:	02000001 	andeq	r0, r0, #1
 ab0:	01d40603 	bicseq	r0, r4, r3, lsl #12
 ab4:	005c2000 	subseq	r2, ip, r0
 ab8:	9c010000 	stcls	0, cr0, [r1], {-0}
 abc:	00000aea 	andeq	r0, r0, sl, ror #21
 ac0:	02007816 	andeq	r7, r0, #1441792	; 0x160000
 ac4:	08fb2703 	ldmeq	fp!, {r0, r1, r8, r9, sl, sp}^
 ac8:	91020000 	mrsls	r0, (UNDEF: 2)
 acc:	00ad146f 	adceq	r1, sp, pc, ror #8
 ad0:	03020000 	movweq	r0, #8192	; 0x2000
 ad4:	0008fb38 	andeq	pc, r8, r8, lsr fp	; <UNPREDICTABLE>
 ad8:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 adc:	0200631b 	andeq	r6, r0, #1811939328	; 0x6c000000
 ae0:	00500704 	subseq	r0, r0, r4, lsl #14
 ae4:	91020000 	mrsls	r0, (UNDEF: 2)
 ae8:	d2210077 	eorle	r0, r1, #119	; 0x77
 aec:	01000004 	tsteq	r0, r4
 af0:	08fb0f40 	ldmeq	fp!, {r6, r8, r9, sl, fp}^
 af4:	016c0000 	cmneq	ip, r0
 af8:	00682000 	rsbeq	r2, r8, r0
 afc:	9c010000 	stcls	0, cr0, [r1], {-0}
 b00:	00000b1c 	andeq	r0, r0, ip, lsl fp
 b04:	0001a21a 	andeq	sl, r1, sl, lsl r2
 b08:	00002220 	andeq	r2, r0, r0, lsr #4
 b0c:	00631b00 	rsbeq	r1, r3, r0, lsl #22
 b10:	50084b01 	andpl	r4, r8, r1, lsl #22
 b14:	02000000 	andeq	r0, r0, #0
 b18:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
 b1c:	00052212 	andeq	r2, r5, r2, lsl r2
 b20:	06380100 	ldrteq	r0, [r8], -r0, lsl #2
 b24:	20000128 	andcs	r0, r0, r8, lsr #2
 b28:	00000044 	andeq	r0, r0, r4, asr #32
 b2c:	0b4f9c01 	bleq	13e7b38 <startup-0x1ec184c8>
 b30:	63160000 	tstvs	r6, #0
 b34:	1c380100 	ldfnes	f0, [r8], #-0
 b38:	000008fb 	strdeq	r0, [r0], -fp
 b3c:	045f9102 	ldrbeq	r9, [pc], #-258	; b44 <startup-0x1ffff4bc>
 b40:	00000509 	andeq	r0, r0, r9, lsl #10
 b44:	4f133a01 	svcmi	0x00133a01
 b48:	0200000b 	andeq	r0, r0, #11
 b4c:	0b006091 	bleq	18d98 <startup-0x1ffe7268>
 b50:	000008fb 	strdeq	r0, [r0], -fp
 b54:	00000b5f 	andeq	r0, r0, pc, asr fp
 b58:	0000d213 	andeq	sp, r0, r3, lsl r2
 b5c:	21000f00 	tstcs	r0, r0, lsl #30
 b60:	00000359 	andeq	r0, r0, r9, asr r3
 b64:	fb0f2a01 	blx	3cb372 <startup-0x1fc34c8e>
 b68:	c0000008 	andgt	r0, r0, r8
 b6c:	68200000 	stmdavs	r0!, {}	; <UNPREDICTABLE>
 b70:	01000000 	mrseq	r0, (UNDEF: 0)
 b74:	000ba79c 	muleq	fp, ip, r7
 b78:	656b1b00 	strbvs	r1, [fp, #-2816]!	; 0xfffff500
 b7c:	2b010079 	blcs	40d68 <startup-0x1ffbf298>
 b80:	000b4f13 	andeq	r4, fp, r3, lsl pc
 b84:	58910200 	ldmpl	r1, {r9}
 b88:	776f721b 			; <UNDEFINED> instruction: 0x776f721b
 b8c:	092c0100 	stmdbeq	ip!, {r8}
 b90:	00000037 	andeq	r0, r0, r7, lsr r0
 b94:	1b6c9102 	blne	1b24fa4 <startup-0x1e4db05c>
 b98:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 b9c:	370e2c01 	strcc	r2, [lr, -r1, lsl #24]
 ba0:	02000000 	andeq	r0, r0, #0
 ba4:	15006891 	strne	r6, [r0, #-2193]	; 0xfffff76f
 ba8:	000003ac 	andeq	r0, r0, ip, lsr #7
 bac:	64061201 	strvs	r1, [r6], #-513	; 0xfffffdff
 bb0:	5c200000 	stcpl	0, cr0, [r0], #-0
 bb4:	01000000 	mrseq	r0, (UNDEF: 0)
 bb8:	000bcd9c 	muleq	fp, ip, sp
 bbc:	6f721600 	svcvs	0x00721600
 bc0:	12010077 	andne	r0, r1, #119	; 0x77
 bc4:	0000d21f 	andeq	sp, r0, pc, lsl r2
 bc8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 bcc:	015f2200 	cmpeq	pc, r0, lsl #4
 bd0:	06010000 	streq	r0, [r1], -r0
 bd4:	00003705 	andeq	r3, r0, r5, lsl #14
 bd8:	00001000 	andeq	r1, r0, r0
 bdc:	00005420 	andeq	r5, r0, r0, lsr #8
 be0:	1b9c0100 	blne	fe700fe8 <ts_state+0xde6ff024>
 be4:	09010063 	stmdbeq	r1, {r0, r1, r5, r6}
 be8:	0008fb13 	andeq	pc, r8, r3, lsl fp	; <UNPREDICTABLE>
 bec:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  24:	24030000 	strcs	r0, [r3], #-0
  28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  2c:	0008030b 	andeq	r0, r8, fp, lsl #6
  30:	00340400 	eorseq	r0, r4, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	0b390b3b 	bleq	e42d2c <startup-0x1f1bd2d4>
  3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  40:	24050000 	strcs	r0, [r5], #-0
  44:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  48:	000e030b 	andeq	r0, lr, fp, lsl #6
  4c:	01130600 	tsteq	r3, r0, lsl #12
  50:	0b3a0b0b 	bleq	e82c84 <startup-0x1f17d37c>
  54:	0b390b3b 	bleq	e42d48 <startup-0x1f1bd2b8>
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03000d07 	movweq	r0, #3335	; 0xd07
  60:	3b0b3a08 	blcc	2ce888 <startup-0x1fd31778>
  64:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
  68:	000b3813 	andeq	r3, fp, r3, lsl r8
  6c:	00160800 	andseq	r0, r6, r0, lsl #16
  70:	0b3a0e03 	bleq	e83884 <startup-0x1f17c77c>
  74:	0b390b3b 	bleq	e42d68 <startup-0x1f1bd298>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	0b011309 	bleq	44ca8 <startup-0x1ffbb358>
  80:	3b0b3a05 	blcc	2ce89c <startup-0x1fd31764>
  84:	010b390b 	tsteq	fp, fp, lsl #18
  88:	0a000013 	beq	dc <startup-0x1fffff24>
  8c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  90:	0b3b0b3a 	bleq	ec2d80 <startup-0x1f13d280>
  94:	13490b39 	movtne	r0, #39737	; 0x9b39
  98:	00000b38 	andeq	r0, r0, r8, lsr fp
  9c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  a0:	00130113 	andseq	r0, r3, r3, lsl r1
  a4:	00210c00 	eoreq	r0, r1, r0, lsl #24
  a8:	052f1349 	streq	r1, [pc, #-841]!	; fffffd67 <ts_state+0xdfffdda3>
  ac:	0f0d0000 	svceq	0x000d0000
  b0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  b4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  bc:	0b3a0b0b 	bleq	e82cf0 <startup-0x1f17d310>
  c0:	0b390b3b 	bleq	e42db4 <startup-0x1f1bd24c>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
  cc:	00130119 	andseq	r0, r3, r9, lsl r1
  d0:	00051000 	andeq	r1, r5, r0
  d4:	00001349 	andeq	r1, r0, r9, asr #6
  d8:	27011511 	smladcs	r1, r1, r5, r1
  dc:	01134919 	tsteq	r3, r9, lsl r9
  e0:	12000013 	andne	r0, r0, #19
  e4:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  e8:	0b3a0e03 	bleq	e838fc <startup-0x1f17c704>
  ec:	0b390b3b 	bleq	e42de0 <startup-0x1f1bd220>
  f0:	01111927 	tsteq	r1, r7, lsr #18
  f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f8:	01194296 			; <UNDEFINED> instruction: 0x01194296
  fc:	13000013 	movwne	r0, #19
 100:	13490021 	movtne	r0, #36897	; 0x9021
 104:	00000b2f 	andeq	r0, r0, pc, lsr #22
 108:	03000514 	movweq	r0, #1300	; 0x514
 10c:	3b0b3a0e 	blcc	2ce94c <startup-0x1fd316b4>
 110:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 114:	00180213 	andseq	r0, r8, r3, lsl r2
 118:	012e1500 			; <UNDEFINED> instruction: 0x012e1500
 11c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 120:	0b3b0b3a 	bleq	ec2e10 <startup-0x1f13d1f0>
 124:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 128:	06120111 			; <UNDEFINED> instruction: 0x06120111
 12c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 130:	00130119 	andseq	r0, r3, r9, lsl r1
 134:	00051600 	andeq	r1, r5, r0, lsl #12
 138:	0b3a0803 	bleq	e8214c <startup-0x1f17deb4>
 13c:	0b390b3b 	bleq	e42e30 <startup-0x1f1bd1d0>
 140:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 144:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
 148:	03193f01 	tsteq	r9, #1, 30
 14c:	3b0b3a0e 	blcc	2ce98c <startup-0x1fd31674>
 150:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 154:	11134919 	tstne	r3, r9, lsl r9
 158:	40061201 	andmi	r1, r6, r1, lsl #4
 15c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 160:	00001301 	andeq	r1, r0, r1, lsl #6
 164:	3f002e18 	svccc	0x00002e18
 168:	3a0e0319 	bcc	380dd4 <startup-0x1fc7f22c>
 16c:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 170:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 174:	97184006 	ldrls	r4, [r8, -r6]
 178:	00001942 	andeq	r1, r0, r2, asr #18
 17c:	3f002e19 	svccc	0x00002e19
 180:	3a0e0319 	bcc	380dec <startup-0x1fc7f214>
 184:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 188:	1119270b 	tstne	r9, fp, lsl #14
 18c:	40061201 	andmi	r1, r6, r1, lsl #4
 190:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 194:	0b1a0000 	bleq	68019c <startup-0x1f97fe64>
 198:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 19c:	1b000006 	blne	1bc <startup-0x1ffffe44>
 1a0:	08030034 	stmdaeq	r3, {r2, r4, r5}
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	13490b39 	movtne	r0, #39737	; 0x9b39
 1ac:	00001802 	andeq	r1, r0, r2, lsl #16
 1b0:	3f012e1c 	svccc	0x00012e1c
 1b4:	3a0e0319 	bcc	380e20 <startup-0x1fc7f1e0>
 1b8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1bc:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1c0:	1d000019 	stcne	0, cr0, [r0, #-100]	; 0xffffff9c
 1c4:	00000018 	andeq	r0, r0, r8, lsl r0
 1c8:	3f002e1e 	svccc	0x00002e1e
 1cc:	3a0e0319 	bcc	380e38 <startup-0x1fc7f1c8>
 1d0:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d4:	1119270b 	tstne	r9, fp, lsl #14
 1d8:	40061201 	andmi	r1, r6, r1, lsl #4
 1dc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1e0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1e4:	03193f01 	tsteq	r9, #1, 30
 1e8:	3b0b3a0e 	blcc	2cea28 <startup-0x1fd315d8>
 1ec:	110b390b 	tstne	fp, fp, lsl #18
 1f0:	40061201 	andmi	r1, r6, r1, lsl #4
 1f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1f8:	00001301 	andeq	r1, r0, r1, lsl #6
 1fc:	3f012e20 	svccc	0x00012e20
 200:	3a0e0319 	bcc	380e6c <startup-0x1fc7f194>
 204:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 20c:	00130119 	andseq	r0, r3, r9, lsl r1
 210:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 214:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 218:	0b3b0b3a 	bleq	ec2f08 <startup-0x1f13d0f8>
 21c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 220:	01111349 	tsteq	r1, r9, asr #6
 224:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 228:	01194296 			; <UNDEFINED> instruction: 0x01194296
 22c:	22000013 	andcs	r0, r0, #19
 230:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 234:	0b3a0e03 	bleq	e83a48 <startup-0x1f17c5b8>
 238:	0b390b3b 	bleq	e42f2c <startup-0x1f1bd0d4>
 23c:	13491927 	movtne	r1, #39207	; 0x9927
 240:	06120111 			; <UNDEFINED> instruction: 0x06120111
 244:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 248:	00000019 	andeq	r0, r0, r9, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000d80 	andeq	r0, r0, r0, lsl #27
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000d90 	mulcs	r0, r0, sp
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000080c 	andeq	r0, r0, ip, lsl #16
   4:	00800003 	addeq	r0, r0, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	6b7a6f72 	blvs	1e9bdf4 <startup-0x1e16420c>
  28:	65442f68 	strbvs	r2, [r4, #-3944]	; 0xfffff098
  2c:	6f746b73 	svcvs	0x00746b73
  30:	4f4d2f70 	svcmi	0x004d2f70
  34:	616c2f50 	cmnvs	ip, r0, asr pc
  38:	2d356262 	lfmcs	f6, 4, [r5, #-392]!	; 0xfffffe78
  3c:	656b0000 	strbvs	r0, [fp, #-0]!
  40:	64617079 	strbtvs	r7, [r1], #-121	; 0xffffff87
  44:	0100682e 	tsteq	r0, lr, lsr #16
  48:	73610000 	cmnvc	r1, #0
  4c:	00696963 	rsbeq	r6, r9, r3, ror #18
  50:	64000001 	strvs	r0, [r0], #-1
  54:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
  58:	00682e73 	rsbeq	r2, r8, r3, ror lr
  5c:	6f000001 	svcvs	0x00000001
  60:	63656a62 	cmnvs	r5, #401408	; 0x62000
  64:	682e7374 	stmdavs	lr!, {r2, r4, r5, r6, r8, r9, ip, sp, lr}
  68:	00000100 	andeq	r0, r0, r0, lsl #2
  6c:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  70:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  74:	00010063 	andeq	r0, r1, r3, rrx
  78:	6f656700 	svcvs	0x00656700
  7c:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  80:	2e736569 	cdpcs	5, 7, cr6, cr3, cr9, {3}
  84:	00010068 	andeq	r0, r1, r8, rrx
  88:	15050000 	strne	r0, [r5, #-0]
  8c:	10020500 	andne	r0, r2, r0, lsl #10
  90:	17200000 	strne	r0, [r0, -r0]!
  94:	05400905 	strbeq	r0, [r0, #-2309]	; 0xfffff6fb
  98:	0b052007 	bleq	1480bc <startup-0x1feb7f44>
  9c:	4a08053d 	bmi	201598 <startup-0x1fdfea68>
  a0:	02001905 	andeq	r1, r0, #81920	; 0x14000
  a4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
  a8:	08052f0b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
  ac:	0019054a 	andseq	r0, r9, sl, asr #10
  b0:	20010402 	andcs	r0, r1, r2, lsl #8
  b4:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff5b7 <ts_state+0xdfffd5f3>
  b8:	19054a08 	stmdbne	r5, {r3, r9, fp, lr}
  bc:	01040200 	mrseq	r0, R12_usr
  c0:	2f0b0520 	svccs	0x000b0520
  c4:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
  c8:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
  cc:	0c052001 	stceq	0, cr2, [r5], {1}
  d0:	2101052f 	tstcs	r1, pc, lsr #10
  d4:	05682405 	strbeq	r2, [r8, #-1029]!	; 0xfffffbfb
  d8:	1e05cc0d 	cdpne	12, 0, cr12, cr5, cr13, {0}
  dc:	2f0d0520 	svccs	0x000d0520
  e0:	201e0522 	andscs	r0, lr, r2, lsr #10
  e4:	222f0d05 	eorcs	r0, pc, #320	; 0x140
  e8:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
  ec:	05222f0d 	streq	r2, [r2, #-3853]!	; 0xfffff0f3
  f0:	0d05201e 	stceq	0, cr2, [r5, #-120]	; 0xffffff88
  f4:	1e05222f 	cdpne	2, 0, cr2, cr5, cr15, {1}
  f8:	2f0d0520 	svccs	0x000d0520
  fc:	201e0522 	andscs	r0, lr, r2, lsr #10
 100:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff403 <ts_state+0xdfffd43f>
 104:	1a052201 	bne	148910 <startup-0x1feb76f0>
 108:	3d130592 	cfldr32cc	mvfx0, [r3, #-584]	; 0xfffffdb8
 10c:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
 110:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 114:	4b140521 	blmi	5015a0 <startup-0x1fafea60>
 118:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
 11c:	21053d0d 	tstcs	r5, sp, lsl #26
 120:	2e1a053d 	mrccs	5, 0, r0, cr10, cr13, {1}
 124:	05202d05 	streq	r2, [r0, #-3333]!	; 0xfffff2fb
 128:	17052e26 	strne	r2, [r5, -r6, lsr #28]
 12c:	00200520 	eoreq	r0, r0, r0, lsr #10
 130:	38020402 	stmdacc	r2, {r1, sl}
 134:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 138:	433c0104 	teqmi	ip, #4, 2
 13c:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 140:	04020001 	streq	r0, [r2], #-1
 144:	1f052101 	svcne	0x00052101
 148:	67080576 	smlsdxvs	r8, r6, r5, r0
 14c:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 150:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
 154:	1f053d13 	svcne	0x00053d13
 158:	2e050576 	cfrshl64cs	mvdx5, mvdx6, r0
 15c:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
 160:	01052e15 	tsteq	r5, r5, lsl lr
 164:	84220522 	strthi	r0, [r2], #-1314	; 0xfffffade
 168:	053e0705 	ldreq	r0, [lr, #-1797]!	; 0xfffff8fb
 16c:	03052e05 	movweq	r2, #24069	; 0x5e05
 170:	3d07052f 	cfstr32cc	mvfx0, [r7, #-188]	; 0xffffff44
 174:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 178:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 17c:	11052001 	tstne	r5, r1
 180:	3d0a054b 	cfstr32cc	mvfx0, [sl, #-300]	; 0xfffffed4
 184:	05320605 	ldreq	r0, [r2, #-1541]!	; 0xfffff9fb
 188:	0c052e04 	stceq	14, cr2, [r5], {4}
 18c:	5908052f 	stmdbpl	r8, {r0, r1, r2, r3, r5, r8, sl}
 190:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 194:	0b054b0d 	bleq	152dd0 <startup-0x1fead230>
 198:	3f01053d 	svccc	0x0001053d
 19c:	3f050204 	svccc	0x00050204
 1a0:	827fb203 	rsbshi	fp, pc, #805306368	; 0x30000000
 1a4:	05920605 	ldreq	r0, [r2, #1541]	; 0x605
 1a8:	054b2004 	strbeq	r2, [fp, #-4]
 1ac:	03054b13 	movweq	r4, #23315	; 0x5b13
 1b0:	20130566 	andscs	r0, r3, r6, ror #10
 1b4:	054f0105 	strbeq	r0, [pc, #-261]	; b7 <startup-0x1fffff49>
 1b8:	13051e03 	movwne	r1, #24067	; 0x5e03
 1bc:	84010520 	strhi	r0, [r1], #-1312	; 0xfffffae0
 1c0:	05764105 	ldrbeq	r4, [r6, #-261]!	; 0xfffffefb
 1c4:	04059206 	streq	r9, [r5], #-518	; 0xfffffdfa
 1c8:	4b080520 	blmi	201650 <startup-0x1fdfe9b0>
 1cc:	2f9e0405 	svccs	0x009e0405
 1d0:	054b0305 	strbeq	r0, [fp, #-773]	; 0xfffffcfb
 1d4:	01052013 	tsteq	r5, r3, lsl r0
 1d8:	1d03056c 	cfstr32ne	mvfx0, [r3, #-432]	; 0xfffffe50
 1dc:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 1e0:	30054d01 	andcc	r4, r5, r1, lsl #26
 1e4:	67020576 	smlsdxvs	r2, r6, r5, r0
 1e8:	2013054b 	andscs	r0, r3, fp, asr #10
 1ec:	4b3d0205 	blmi	f40a08 <startup-0x1f0bf5f8>
 1f0:	052f0105 	streq	r0, [pc, #-261]!	; f3 <startup-0x1fffff0d>
 1f4:	0205692a 	andeq	r6, r5, #688128	; 0xa8000
 1f8:	052f4c3e 	streq	r4, [pc, #-3134]!	; fffff5c2 <ts_state+0xdfffd5fe>
 1fc:	04053006 	streq	r3, [r5], #-6
 200:	3e020520 	cfsh32cc	mvfx0, mvfx2, #16
 204:	054c0905 	strbeq	r0, [ip, #-2309]	; 0xfffff6fb
 208:	2c052f01 	stccs	15, cr2, [r5], {1}
 20c:	67020576 	smlsdxvs	r2, r6, r5, r0
 210:	01054b4b 	tsteq	r5, fp, asr #22
 214:	4c2a0559 	cfstr32mi	mvfx0, [sl], #-356	; 0xfffffe9c
 218:	4b670205 	blmi	19c0a34 <startup-0x1e63f5cc>
 21c:	5901054b 	stmdbpl	r1, {r0, r1, r3, r6, r8, sl}
 220:	054c2605 	strbeq	r2, [ip, #-1541]	; 0xfffff9fb
 224:	10053e02 	andne	r3, r5, r2, lsl #28
 228:	2f020520 	svccs	0x00020520
 22c:	4b06054b 	blmi	181760 <startup-0x1fe7e8a0>
 230:	055a0205 	ldrbeq	r0, [sl, #-517]	; 0xfffffdfb
 234:	09052010 	stmdbeq	r5, {r4, sp}
 238:	2f010530 	svccs	0x00010530
 23c:	05a02405 	streq	r2, [r0, #1029]!	; 0x405
 240:	10053e02 	andne	r3, r5, r2, lsl #28
 244:	2f020520 	svccs	0x00020520
 248:	4b06054b 	blmi	18177c <startup-0x1fe7e884>
 24c:	055a0205 	ldrbeq	r0, [sl, #-517]	; 0xfffffdfb
 250:	09052010 	stmdbeq	r5, {r4, sp}
 254:	2f010530 	svccs	0x00010530
 258:	05a01c05 	streq	r1, [r0, #3077]!	; 0xc05
 25c:	09054b07 	stmdbeq	r5, {r0, r1, r2, r8, r9, fp, lr}
 260:	01040200 	mrseq	r0, R12_usr
 264:	00070520 	andeq	r0, r7, r0, lsr #10
 268:	4a010402 	bmi	41278 <startup-0x1ffbed88>
 26c:	3e2f0205 	cdpcc	2, 2, cr0, cr15, cr5, {0}
 270:	055a0405 	ldrbeq	r0, [sl, #-1029]	; 0xfffffbfb
 274:	01053d03 	tsteq	r5, r3, lsl #26
 278:	1e030541 	cfsh32ne	mvfx0, mvfx3, #33
 27c:	053e0105 	ldreq	r0, [lr, #-261]!	; 0xfffffefb
 280:	02054c16 	andeq	r4, r5, #5632	; 0x1600
 284:	3d4c4b2f 	vstrcc	d20, [ip, #-188]	; 0xffffff44
 288:	3d01053d 	cfstr32cc	mvfx0, [r1, #-244]	; 0xffffff0c
 28c:	053e2705 	ldreq	r2, [lr, #-1797]!	; 0xfffff8fb
 290:	09056707 	stmdbeq	r5, {r0, r1, r2, r8, r9, sl, sp, lr}
 294:	01040200 	mrseq	r0, R12_usr
 298:	00070520 	andeq	r0, r7, r0, lsr #10
 29c:	4a010402 	bmi	412ac <startup-0x1ffbed54>
 2a0:	3e2f0205 	cdpcc	2, 2, cr0, cr15, cr5, {0}
 2a4:	05590105 	ldrbeq	r0, [r9, #-261]	; 0xfffffefb
 2a8:	06054c20 	streq	r4, [r5], -r0, lsr #24
 2ac:	3d050559 	cfstr32cc	mvfx0, [r5, #-356]	; 0xfffffe9c
 2b0:	053d0b05 	ldreq	r0, [sp, #-2821]!	; 0xfffff4fb
 2b4:	02053e17 	andeq	r3, r5, #368	; 0x170
 2b8:	4b010566 	blmi	41858 <startup-0x1ffbe7a8>
 2bc:	17050304 	strne	r0, [r5, -r4, lsl #6]
 2c0:	4a7f8a03 	bmi	1fe2ad4 <startup-0x1e01d52c>
 2c4:	052f0505 	streq	r0, [pc, #-1285]!	; fffffdc7 <ts_state+0xdfffde03>
 2c8:	0505200f 	streq	r2, [r5, #-15]
 2cc:	200f052f 	andcs	r0, pc, pc, lsr #10
 2d0:	052f0505 	streq	r0, [pc, #-1285]!	; fffffdd3 <ts_state+0xdfffde0f>
 2d4:	0505200e 	streq	r2, [r5, #-14]
 2d8:	200f052f 	andcs	r0, pc, pc, lsr #10
 2dc:	052f0a05 	streq	r0, [pc, #-2565]!	; fffff8df <ts_state+0xdfffd91b>
 2e0:	0402000d 	streq	r0, [r2], #-13
 2e4:	17052001 	strne	r2, [r5, -r1]
 2e8:	01040200 	mrseq	r0, R12_usr
 2ec:	000a052e 	andeq	r0, sl, lr, lsr #10
 2f0:	3c010402 	cfstrscc	mvf0, [r1], {2}
 2f4:	05210505 	streq	r0, [r1, #-1285]!	; 0xfffffafb
 2f8:	0105200f 	tsteq	r5, pc
 2fc:	a022052f 	eorge	r0, r2, pc, lsr #10
 300:	054c0805 	strbeq	r0, [ip, #-2053]	; 0xfffff7fb
 304:	0a058307 	beq	160f28 <startup-0x1fe9f0d8>
 308:	2109053e 	tstcs	r9, lr, lsr r5
 30c:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff3e5 <ts_state+0xdfffd421>
 310:	0a052f0b 	beq	14bf44 <startup-0x1feb40bc>
 314:	43010537 	movwmi	r0, #5431	; 0x1537
 318:	055a2205 	ldrbeq	r2, [sl, #-517]	; 0xfffffdfb
 31c:	07054c08 	streq	r4, [r5, -r8, lsl #24]
 320:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 324:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 328:	0a05590b 	beq	15675c <startup-0x1fea98a4>
 32c:	4001053a 	andmi	r0, r1, sl, lsr r5
 330:	1e050404 	cdpne	4, 0, cr0, cr5, cr4, {0}
 334:	05586a03 	ldrbeq	r6, [r8, #-2563]	; 0xfffff5fd
 338:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 33c:	0018052e 	andseq	r0, r8, lr, lsr #10
 340:	21030402 	tstcs	r3, r2, lsl #8
 344:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 348:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 34c:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 350:	03057403 	movweq	r7, #21507	; 0x5403
 354:	03040200 	movweq	r0, #16896	; 0x4200
 358:	0037052e 	eorseq	r0, r7, lr, lsr #10
 35c:	20030402 	andcs	r0, r3, r2, lsl #8
 360:	02004305 	andeq	r4, r0, #335544320	; 0x14000000
 364:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 368:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 36c:	03057403 	movweq	r7, #21507	; 0x5403
 370:	03040200 	movweq	r0, #16896	; 0x4200
 374:	002b052e 	eoreq	r0, fp, lr, lsr #10
 378:	49030402 	stmdbmi	r3, {r1, sl}
 37c:	02001805 	andeq	r1, r0, #327680	; 0x50000
 380:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 384:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 388:	02052e01 	andeq	r2, r5, #1, 28
 38c:	01040200 	mrseq	r0, R12_usr
 390:	3f010520 	svccc	0x00010520
 394:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
 398:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 39c:	001a052e 	andseq	r0, sl, lr, lsr #10
 3a0:	21030402 	tstcs	r3, r2, lsl #8
 3a4:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 3a8:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3ac:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 3b0:	03057403 	movweq	r7, #21507	; 0x5403
 3b4:	03040200 	movweq	r0, #16896	; 0x4200
 3b8:	0039052e 	eorseq	r0, r9, lr, lsr #10
 3bc:	20030402 	andcs	r0, r3, r2, lsl #8
 3c0:	02004505 	andeq	r4, r0, #20971520	; 0x1400000
 3c4:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 3c8:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
 3cc:	03057403 	movweq	r7, #21507	; 0x5403
 3d0:	03040200 	movweq	r0, #16896	; 0x4200
 3d4:	002b052e 	eoreq	r0, fp, lr, lsr #10
 3d8:	49030402 	stmdbmi	r3, {r1, sl}
 3dc:	02001805 	andeq	r1, r0, #327680	; 0x50000
 3e0:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 3e4:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 3e8:	02052e01 	andeq	r2, r5, #1, 28
 3ec:	01040200 	mrseq	r0, R12_usr
 3f0:	3f010520 	svccc	0x00010520
 3f4:	055a1e05 	ldrbeq	r1, [sl, #-3589]	; 0xfffff1fb
 3f8:	0c054b02 			; <UNDEFINED> instruction: 0x0c054b02
 3fc:	2e12054b 	cfmac32cs	mvfx0, mvfx2, mvfx11
 400:	3d2e0c05 	stccc	12, cr0, [lr, #-20]!	; 0xffffffec
 404:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 408:	02052e0c 	andeq	r2, r5, #12, 28	; 0xc0
 40c:	4b01053d 	blmi	41908 <startup-0x1ffbe6f8>
 410:	054c3105 	strbeq	r3, [ip, #-261]	; 0xfffffefb
 414:	053d670c 	ldreq	r6, [sp, #-1804]!	; 0xfffff8f4
 418:	05043d01 	streq	r3, [r4, #-3329]	; 0xfffff2ff
 41c:	72031e05 	andvc	r1, r3, #5, 28	; 0x50
 420:	2105054a 	tstcs	r5, sl, asr #10
 424:	21010513 	tstcs	r1, r3, lsl r5
 428:	05232005 	streq	r2, [r3, #-5]!
 42c:	05132105 	ldreq	r2, [r3, #-261]	; 0xfffffefb
 430:	25052101 	strcs	r2, [r5, #-257]	; 0xfffffeff
 434:	21050523 	tstcs	r5, r3, lsr #10
 438:	21010513 	tstcs	r1, r3, lsl r5
 43c:	05232705 	streq	r2, [r3, #-1797]!	; 0xfffff8fb
 440:	05132105 	ldreq	r2, [r3, #-261]	; 0xfffffefb
 444:	15052101 	strne	r2, [r5, #-257]	; 0xfffffeff
 448:	2f050522 	svccs	0x00050522
 44c:	05201305 	streq	r1, [r0, #-773]!	; 0xfffffcfb
 450:	10052f02 	andne	r2, r5, r2, lsl #30
 454:	2f010520 	svccs	0x00010520
 458:	05ae1305 	streq	r1, [lr, #773]!	; 0x305
 45c:	02052f0c 	andeq	r2, r5, #12, 30	; 0x30
 460:	200c0583 	andcs	r0, ip, r3, lsl #11
 464:	8401053d 	strhi	r0, [r1], #-1341	; 0xfffffac3
 468:	05846b05 	streq	r6, [r4, #2821]	; 0xb05
 46c:	2805761b 	stmdacs	r5, {r0, r1, r3, r4, r9, sl, ip, sp, lr}
 470:	2e2d052e 	cfsh64cs	mvdx0, mvdx13, #30
 474:	05202205 	streq	r2, [r0, #-517]!	; 0xfffffdfb
 478:	0405200d 	streq	r2, [r5], #-13
 47c:	0046052e 	subeq	r0, r6, lr, lsr #10
 480:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 484:	02005705 	andeq	r5, r0, #1310720	; 0x140000
 488:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 48c:	0402005c 	streq	r0, [r2], #-92	; 0xffffffa4
 490:	4d052e01 	stcmi	14, cr2, [r5, #-4]
 494:	01040200 	mrseq	r0, R12_usr
 498:	006a0520 	rsbeq	r0, sl, r0, lsr #10
 49c:	20010402 	andcs	r0, r1, r2, lsl #8
 4a0:	02003905 	andeq	r3, r0, #81920	; 0x14000
 4a4:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 4a8:	1c052f0a 	stcne	15, cr2, [r5], {10}
 4ac:	2e2d052e 	cfsh64cs	mvdx0, mvdx13, #30
 4b0:	052e3205 	streq	r3, [lr, #-517]!	; 0xfffffdfb
 4b4:	05052023 	streq	r2, [r5, #-35]	; 0xffffffdd
 4b8:	00420520 	subeq	r0, r2, r0, lsr #10
 4bc:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4c0:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff5c3 <ts_state+0xdfffd5ff>
 4c4:	21052e1c 	tstcs	r5, ip, lsl lr
 4c8:	2016052e 	andscs	r0, r6, lr, lsr #10
 4cc:	05202d05 	streq	r2, [r0, #-3333]!	; 0xfffff2fb
 4d0:	0a052038 	beq	1485b8 <startup-0x1feb7a48>
 4d4:	0047052e 	subeq	r0, r7, lr, lsr #10
 4d8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4dc:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff5df <ts_state+0xdfffd61b>
 4e0:	2d053120 	stfcss	f3, [r5, #-128]	; 0xffffff80
 4e4:	2e32052e 	cdpcs	5, 3, cr0, cr2, cr14, {1}
 4e8:	05202705 	streq	r2, [r0, #-1797]!	; 0xfffff8fb
 4ec:	09052012 	stmdbeq	r5, {r1, r4, sp}
 4f0:	004b052e 	subeq	r0, fp, lr, lsr #10
 4f4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 4f8:	02005c05 	andeq	r5, r0, #1280	; 0x500
 4fc:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 500:	04020061 	streq	r0, [r2], #-97	; 0xffffff9f
 504:	52052e01 	andpl	r2, r5, #1, 28
 508:	01040200 	mrseq	r0, R12_usr
 50c:	006f0520 	rsbeq	r0, pc, r0, lsr #10
 510:	20010402 	andcs	r0, r1, r2, lsl #8
 514:	02003e05 	andeq	r3, r0, #5, 28	; 0x50
 518:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 51c:	1c052f0a 	stcne	15, cr2, [r5], {10}
 520:	2e2d052e 	cfsh64cs	mvdx0, mvdx13, #30
 524:	052e3205 	streq	r3, [lr, #-517]!	; 0xfffffdfb
 528:	05052023 	streq	r2, [r5, #-35]	; 0xffffffdd
 52c:	00420520 	subeq	r0, r2, r0, lsr #10
 530:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 534:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff637 <ts_state+0xdfffd673>
 538:	21052e1c 	tstcs	r5, ip, lsl lr
 53c:	2016052e 	andscs	r0, r6, lr, lsr #10
 540:	05202d05 	streq	r2, [r0, #-3333]!	; 0xfffff2fb
 544:	0a052038 	beq	14862c <startup-0x1feb79d4>
 548:	0047052e 	subeq	r0, r7, lr, lsr #10
 54c:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 550:	052f0f05 	streq	r0, [pc, #-3845]!	; fffff653 <ts_state+0xdfffd68f>
 554:	01052f10 	tsteq	r5, r0, lsl pc
 558:	4c480521 	cfstr64mi	mvdx0, [r8], {33}	; 0x21
 55c:	05750505 	ldrbeq	r0, [r5, #-1285]!	; 0xfffffafb
 560:	05052e02 	streq	r2, [r5, #-3586]	; 0xfffff1fe
 564:	2e02053d 	mcrcs	5, 0, r0, cr2, cr13, {1}
 568:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 56c:	05052e02 	streq	r2, [r5, #-3586]	; 0xfffff1fe
 570:	2e02053d 	mcrcs	5, 0, r0, cr2, cr13, {1}
 574:	053d0105 	ldreq	r0, [sp, #-261]!	; 0xfffffefb
 578:	05054c5a 	streq	r4, [r5, #-3162]	; 0xfffff3a6
 57c:	2e020575 	cfrshl64cs	mvdx2, mvdx5, r0
 580:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 584:	05052e02 	streq	r2, [r5, #-3586]	; 0xfffff1fe
 588:	2e02054b 	cfsh32cs	mvfx0, mvfx2, #43
 58c:	054b0505 	strbeq	r0, [fp, #-1285]	; 0xfffffafb
 590:	01052e02 	tsteq	r5, r2, lsl #28
 594:	4c64054b 	cfstr64mi	mvdx0, [r4], #-300	; 0xfffffed4
 598:	3d750c05 	ldclcc	12, cr0, [r5, #-20]!	; 0xffffffec
 59c:	3d3e3d4b 	ldccc	13, cr3, [lr, #-300]!	; 0xfffffed4
 5a0:	0b053d4b 	bleq	14fad4 <startup-0x1feb052c>
 5a4:	01053d3e 	tsteq	r5, lr, lsr sp
 5a8:	4c22053d 	cfstr32mi	mvfx0, [r2], #-244	; 0xffffff0c
 5ac:	054c0705 	strbeq	r0, [ip, #-1797]	; 0xfffff8fb
 5b0:	02057508 	andeq	r7, r5, #8, 10	; 0x2000000
 5b4:	4b070530 	blmi	1c1a7c <startup-0x1fe3e584>
 5b8:	05211a05 	streq	r1, [r1, #-2565]!	; 0xfffff5fb
 5bc:	08053c03 	stmdaeq	r5, {r0, r1, sl, fp, ip, sp}
 5c0:	2e070549 	cfsh32cs	mvfx0, mvfx7, #41
 5c4:	05320205 	ldreq	r0, [r2, #-517]!	; 0xfffffdfb
 5c8:	1d054b07 	vstrne	d4, [r5, #-28]	; 0xffffffe4
 5cc:	3c030521 	cfstr32cc	mvfx0, [r3], {33}	; 0x21
 5d0:	05490805 	strbeq	r0, [r9, #-2053]	; 0xfffff7fb
 5d4:	01052e07 	tsteq	r5, r7, lsl #28
 5d8:	845d0531 	ldrbhi	r0, [sp], #-1329	; 0xfffffacf
 5dc:	05770a05 	ldrbeq	r0, [r7, #-2565]!	; 0xfffff5fb
 5e0:	04052e16 	streq	r2, [r5], #-3606	; 0xfffff1ea
 5e4:	0024052e 	eoreq	r0, r4, lr, lsr #10
 5e8:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 5ec:	02003005 	andeq	r3, r0, #5
 5f0:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 5f4:	0402003a 	streq	r0, [r2], #-58	; 0xffffffc6
 5f8:	3f052e01 	svccc	0x00052e01
 5fc:	01040200 	mrseq	r0, R12_usr
 600:	0036052e 	eorseq	r0, r6, lr, lsr #10
 604:	20010402 	andcs	r0, r1, r2, lsl #8
 608:	02001d05 	andeq	r1, r0, #320	; 0x140
 60c:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 610:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 614:	47052e02 	strmi	r2, [r5, -r2, lsl #28]
 618:	02040200 	andeq	r0, r4, #0, 4
 61c:	300e052e 	andcc	r0, lr, lr, lsr #10
 620:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 624:	10052f0c 	andne	r2, r5, ip, lsl #30
 628:	2f0c052e 	svccs	0x000c052e
 62c:	052e0f05 	streq	r0, [lr, #-3845]!	; 0xfffff0fb
 630:	0e054c0b 	cdpeq	12, 0, cr4, cr5, cr11, {0}
 634:	3d11053c 	cfldr32cc	mvfx0, [r1, #-240]	; 0xffffff10
 638:	0d030105 	stfeqs	f0, [r3, #-20]	; 0xffffffec
 63c:	030f053c 	movweq	r0, #62780	; 0xf53c
 640:	1b052076 	blne	148820 <startup-0x1feb77e0>
 644:	2e09052e 	cfsh32cs	mvfx0, mvfx9, #30
 648:	02002905 	andeq	r2, r0, #81920	; 0x14000
 64c:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 650:	04020035 	streq	r0, [r2], #-53	; 0xffffffcb
 654:	3f052e01 	svccc	0x00052e01
 658:	01040200 	mrseq	r0, R12_usr
 65c:	0044052e 	subeq	r0, r4, lr, lsr #10
 660:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 664:	02003b05 	andeq	r3, r0, #5120	; 0x1400
 668:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 66c:	04020022 	streq	r0, [r2], #-34	; 0xffffffde
 670:	51052001 	tstpl	r5, r1
 674:	02040200 	andeq	r0, r4, #0, 4
 678:	004f052e 	subeq	r0, pc, lr, lsr #10
 67c:	2e020402 	cdpcs	4, 0, cr0, cr2, cr2, {0}
 680:	02004c05 	andeq	r4, r0, #1280	; 0x500
 684:	053c0204 	ldreq	r0, [ip, #-516]!	; 0xfffffdfc
 688:	0505300e 	streq	r3, [r5, #-14]
 68c:	2f0c053c 	svccs	0x000c053c
 690:	052e1005 	streq	r1, [lr, #-5]!
 694:	0f052f0c 	svceq	0x00052f0c
 698:	4c0b052e 	cfstr32mi	mvfx0, [fp], {46}	; 0x2e
 69c:	053c0e05 	ldreq	r0, [ip, #-3589]!	; 0xfffff1fb
 6a0:	01053d11 	tsteq	r5, r1, lsl sp
 6a4:	018a053f 	orreq	r0, sl, pc, lsr r5
 6a8:	7604054c 	strvc	r0, [r4], -ip, asr #10
 6ac:	05591305 	ldrbeq	r1, [r9, #-773]	; 0xfffffcfb
 6b0:	0a053c0c 	beq	14f6e8 <startup-0x1feb0918>
 6b4:	18052120 	stmdane	r5, {r5, r8, sp}
 6b8:	3d1b0575 	cfldr32cc	mvfx0, [fp, #-468]	; 0xfffffe2c
 6bc:	053d1e05 	ldreq	r1, [sp, #-3589]!	; 0xfffff1fb
 6c0:	20054a18 	andcs	r4, r5, r8, lsl sl
 6c4:	3c1b052f 	cfldr32cc	mvfx0, [fp], {47}	; 0x2f
 6c8:	0a030105 	beq	c0ae4 <startup-0x1ff3f51c>
 6cc:	0313052e 	tsteq	r3, #192937984	; 0xb800000
 6d0:	0c052079 	stceq	0, cr2, [r5], {121}	; 0x79
 6d4:	200a053c 	andcs	r0, sl, ip, lsr r5
 6d8:	75180521 	ldrvc	r0, [r8, #-1313]	; 0xfffffadf
 6dc:	053d1b05 	ldreq	r1, [sp, #-2821]!	; 0xfffff4fb
 6e0:	18053d1e 	stmdane	r5, {r1, r2, r3, r4, r8, sl, fp, ip, sp}
 6e4:	2f20053c 	svccs	0x0020053c
 6e8:	053c1b05 	ldreq	r1, [ip, #-2821]!	; 0xfffff4fb
 6ec:	10053001 	andne	r3, r5, r1
 6f0:	3d020576 	cfstr32cc	mvfx0, [r2, #-472]	; 0xfffffe28
 6f4:	2f2f2f2f 	svccs	0x002f2f2f
 6f8:	05300705 	ldreq	r0, [r0, #-1797]!	; 0xfffff8fb
 6fc:	054b6708 	strbeq	r6, [fp, #-1800]	; 0xfffff8f8
 700:	3c09031d 	stccc	3, cr0, [r9], {29}
 704:	053c0805 	ldreq	r0, [ip, #-2053]!	; 0xfffff7fb
 708:	08053d1f 	stmdaeq	r5, {r0, r1, r2, r3, r4, r8, sl, fp, ip, sp}
 70c:	3e02053c 	mcrcc	5, 0, r0, cr2, cr12, {1}
 710:	15080305 	strne	r0, [r8, #-773]	; 0xfffffcfb
 714:	e50f052f 	str	r0, [pc, #-1327]	; 1ed <startup-0x1ffffe13>
 718:	053c0305 	ldreq	r0, [ip, #-773]!	; 0xfffffcfb
 71c:	09054b08 	stmdbeq	r5, {r3, r8, r9, fp, lr}
 720:	3d040521 	cfstr32cc	mvfx0, [r4, #-132]	; 0xffffff7c
 724:	09054b59 	stmdbeq	r5, {r0, r3, r4, r6, r8, r9, fp, lr}
 728:	3d040559 	cfstr32cc	mvfx0, [r4, #-356]	; 0xfffffe9c
 72c:	09054b59 	stmdbeq	r5, {r0, r3, r4, r6, r8, r9, fp, lr}
 730:	05587803 	ldrbeq	r7, [r8, #-2051]	; 0xfffff7fd
 734:	03053c08 	movweq	r3, #23560	; 0x5c08
 738:	052e0a03 	streq	r0, [lr, #-2563]!	; 0xfffff5fd
 73c:	05bb3004 	ldreq	r3, [fp, #4]!
 740:	04054c08 	streq	r4, [r5], #-3080	; 0xfffff3f8
 744:	054b4b3c 	strbeq	r4, [fp, #-2876]	; 0xfffff4c4
 748:	0605a107 	streq	sl, [r5], -r7, lsl #2
 74c:	2f1a053c 	svccs	0x001a053c
 750:	053c1405 	ldreq	r1, [ip, #-1029]!	; 0xfffffbfb
 754:	16053d1c 			; <UNDEFINED> instruction: 0x16053d1c
 758:	3d05053c 	cfstr32cc	mvfx0, [r5, #-240]	; 0xffffff10
 75c:	05590a05 	ldrbeq	r0, [r9, #-2565]	; 0xfffff5fb
 760:	10053d09 	andne	r3, r5, r9, lsl #26
 764:	4b09052e 	blmi	241c24 <startup-0x1fdbe3dc>
 768:	052e1005 	streq	r1, [lr, #-5]!
 76c:	10054b09 	andne	r4, r5, r9, lsl #22
 770:	3d09052e 	cfstr32cc	mvfx0, [r9, #-184]	; 0xffffff48
 774:	4b3c0505 	blmi	f01b90 <startup-0x1f0fe470>
 778:	054c0b05 	strbeq	r0, [ip, #-2821]	; 0xfffff4fb
 77c:	10053c06 	andne	r3, r5, r6, lsl #24
 780:	8411052f 	ldrhi	r0, [r1], #-1327	; 0xfffffad1
 784:	053c0c05 	ldreq	r0, [ip, #-3077]!	; 0xfffff3fb
 788:	0b052f10 	bleq	14c3d0 <startup-0x1feb3c30>
 78c:	3c060577 	cfstr32cc	mvfx0, [r6], {119}	; 0x77
 790:	052f1a05 	streq	r1, [pc, #-2565]!	; fffffd93 <ts_state+0xdfffddcf>
 794:	1c053c14 	stcne	12, cr3, [r5], {20}
 798:	3c16053d 	cfldr32cc	mvfx0, [r6], {61}	; 0x3d
 79c:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 7a0:	0905590a 	stmdbeq	r5, {r1, r3, r8, fp, ip, lr}
 7a4:	2e10053d 	mrccs	5, 0, r0, cr0, cr13, {1}
 7a8:	054b0905 	strbeq	r0, [fp, #-2309]	; 0xfffff6fb
 7ac:	08052e10 	stmdaeq	r5, {r4, r9, sl, fp, sp}
 7b0:	3c04054d 	cfstr32cc	mvfx0, [r4], {77}	; 0x4d
 7b4:	4c08054b 	cfstr32mi	mvfx0, [r8], {75}	; 0x4b
 7b8:	05e40705 	strbeq	r0, [r4, #1797]!	; 0x705
 7bc:	053d2111 	ldreq	r2, [sp, #-273]!	; 0xfffffeef
 7c0:	05053d12 	streq	r3, [r5, #-3346]	; 0xfffff2ee
 7c4:	2315053d 	tstcs	r5, #255852544	; 0xf400000
 7c8:	053c2c05 	ldreq	r2, [ip, #-3077]!	; 0xfffff3fb
 7cc:	1c053c31 	stcne	12, cr3, [r5], {49}	; 0x31
 7d0:	20060520 	andcs	r0, r6, r0, lsr #10
 7d4:	052f0505 	streq	r0, [pc, #-1285]!	; 2d7 <startup-0x1ffffd29>
 7d8:	2c05be15 	stccs	14, cr11, [r5], {21}
 7dc:	3c31053c 	cfldr32cc	mvfx0, [r1], #-240	; 0xffffff10
 7e0:	05201c05 	streq	r1, [r0, #-3077]!	; 0xfffff3fb
 7e4:	05052006 	streq	r2, [r5, #-6]
 7e8:	0304053d 	movweq	r0, #17725	; 0x453d
 7ec:	0305ba4d 	movweq	fp, #23117	; 0x5a4d
 7f0:	02207103 	eoreq	r7, r0, #-1073741824	; 0xc0000000
 7f4:	01010016 	tsteq	r1, r6, lsl r0
 7f8:	01050504 	tsteq	r5, r4, lsl #10
 7fc:	00020500 	andeq	r0, r2, r0, lsl #10
 800:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
 804:	2113010c 	tstcs	r3, ip, lsl #2
 808:	02212f21 	eoreq	r2, r1, #33, 30	; 0x84
 80c:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	656d6974 	strbvs	r6, [sp, #-2420]!	; 0xfffff68c
   4:	695f3672 	ldmdbvs	pc, {r1, r4, r5, r6, r9, sl, ip, sp}^	; <UNPREDICTABLE>
   8:	0074696e 	rsbseq	r6, r4, lr, ror #18
   c:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  10:	73626f00 	cmnvc	r2, #0, 30
  14:	5f315f74 	svcpl	0x00315f74
  18:	61720062 	cmnvs	r2, r2, rrx
  1c:	6d6f646e 	cfstrdvs	mvd6, [pc, #-440]!	; fffffe6c <ts_state+0xdfffdea8>
  20:	72696200 	rsbvc	r6, r9, #0, 4
  24:	6f735f64 	svcvs	0x00735f64
  28:	675f7261 	ldrbvs	r7, [pc, -r1, ror #4]
  2c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  30:	00797274 	rsbseq	r7, r9, r4, ror r2
  34:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
  38:	616c665f 	cmnvs	ip, pc, asr r6
  3c:	626f5f70 	rsbvs	r5, pc, #112, 30	; 0x1c0
  40:	626f006a 	rsbvs	r0, pc, #106	; 0x6a
  44:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
  48:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
  4c:	6f74746f 	svcvs	0x0074746f
  50:	00315f6d 	eorseq	r5, r1, sp, ror #30
  54:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
  58:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
  5c:	746f625f 	strbtvc	r6, [pc], #-607	; 64 <startup-0x1fffff9c>
  60:	5f6d6f74 	svcpl	0x006d6f74
  64:	68730032 	ldmdavs	r3!, {r1, r4, r5}^
  68:	2074726f 	rsbscs	r7, r4, pc, ror #4
  6c:	00746e69 	rsbseq	r6, r4, r9, ror #28
  70:	616c6564 	cmnvs	ip, r4, ror #10
  74:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  78:	006f7263 	rsbeq	r7, pc, r3, ror #4
  7c:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
  80:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
  84:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
  88:	6f00315f 	svcvs	0x0000315f
  8c:	61747362 	cmnvs	r4, r2, ror #6
  90:	5f656c63 	svcpl	0x00656c63
  94:	5f706f74 	svcpl	0x00706f74
  98:	65720032 	ldrbvs	r0, [r2, #-50]!	; 0xffffffce
  9c:	5f746573 	svcpl	0x00746573
  a0:	5f6a626f 	svcpl	0x006a626f
  a4:	69736f70 	ldmdbvs	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  a8:	6e6f6974 			; <UNDEFINED> instruction: 0x6e6f6974
  ac:	6c657300 	stclvs	3, cr7, [r5], #-0
  b0:	00746365 	rsbseq	r6, r4, r5, ror #6
  b4:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  b8:	676e6974 			; <UNDEFINED> instruction: 0x676e6974
  bc:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
  c0:	5f6e6565 	svcpl	0x006e6565
  c4:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; ffffff30 <ts_state+0xdfffdf6c>
  c8:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  cc:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
  d0:	6573006e 	ldrbvs	r0, [r3, #-110]!	; 0xffffff92
  d4:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
  d8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
  dc:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
  e0:	70006465 	andvc	r6, r0, r5, ror #8
  e4:	74786574 	ldrbtvc	r6, [r8], #-1396	; 0xfffffa8c
  e8:	45475000 	strbmi	r5, [r7, #-0]
  ec:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  f0:	6f005952 	svcvs	0x00005952
  f4:	5f747362 	svcpl	0x00747362
  f8:	00745f31 	rsbseq	r5, r4, r1, lsr pc
  fc:	70617267 	rsbvc	r7, r1, r7, ror #4
 100:	5f636968 	svcpl	0x00636968
 104:	61656c63 	cmnvs	r5, r3, ror #24
 108:	63735f72 	cmnvs	r3, #456	; 0x1c8
 10c:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 110:	74656200 	strbtvc	r6, [r5], #-512	; 0xfffffe00
 114:	6e656577 	mcrvs	5, 3, r6, cr5, cr7, {3}
 118:	6a626f5f 	bvs	189be9c <startup-0x1e764164>
 11c:	69640031 	stmdbvs	r4!, {r0, r4, r5}^
 120:	616c7073 	smcvs	50947	; 0xc703
 124:	74635f79 	strbtvc	r5, [r3], #-3961	; 0xfffff087
 128:	73610072 	cmnvc	r1, #114	; 0x72
 12c:	5f696963 	svcpl	0x00696963
 130:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 134:	68635f65 	stmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, ip, lr}^
 138:	62007261 	andvs	r7, r0, #268435462	; 0x10000006
 13c:	5f647269 	svcpl	0x00647269
 140:	72616f73 	rsbvc	r6, r1, #460	; 0x1cc
 144:	6a626f5f 	bvs	189bec8 <startup-0x1e764138>
 148:	73626f00 	cmnvc	r2, #0, 30
 14c:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
 150:	6f745f65 	svcvs	0x00745f65
 154:	65675f70 	strbvs	r5, [r7, #-3952]!	; 0xfffff090
 158:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 15c:	6b007972 	blvs	1e72c <startup-0x1ffe18d4>
 160:	65476462 	strbvs	r6, [r7, #-1122]	; 0xfffffb9e
 164:	6c6f4374 	stclvs	3, cr4, [pc], #-464	; ffffff9c <ts_state+0xdfffdfd8>
 168:	696f7000 	stmdbvs	pc!, {ip, sp, lr}^	; <UNPREDICTABLE>
 16c:	635f746e 	cmpvs	pc, #1845493760	; 0x6e000000
 170:	72007274 	andvc	r7, r0, #116, 4	; 0x40000007
 174:	6f646e61 	svcvs	0x00646e61
 178:	657a696d 	ldrbvs	r6, [sl, #-2413]!	; 0xfffff693
 17c:	73626f5f 	cmnvc	r2, #380	; 0x17c
 180:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
 184:	67007365 	strvs	r7, [r0, -r5, ror #6]
 188:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 18c:	695f6369 	ldmdbvs	pc, {r0, r3, r5, r6, r8, r9, sp, lr}^	; <UNPREDICTABLE>
 190:	6974696e 	ldmdbvs	r4!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
 194:	7a696c61 	bvc	1a5b320 <startup-0x1e5a4ce0>
 198:	4f500065 	svcmi	0x00500065
 19c:	00544e49 	subseq	r4, r4, r9, asr #28
 1a0:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1a4:	74635f69 	strbtvc	r5, [r3], #-3945	; 0xfffff097
 1a8:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 1ac:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 1b0:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 1b4:	006a624f 	rsbeq	r6, sl, pc, asr #4
 1b8:	735f7374 	cmpvc	pc, #116, 6	; 0xd0000001
 1bc:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 1c0:	72696400 	rsbvc	r6, r9, #0, 8
 1c4:	69640078 	stmdbvs	r4!, {r3, r4, r5, r6}^
 1c8:	61007972 	tstvs	r0, r2, ror r9
 1cc:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1d0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1d4:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 1d8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1dc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1e0:	626f0072 	rsbvs	r0, pc, #114	; 0x72
 1e4:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
 1e8:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
 1ec:	6f74746f 	svcvs	0x0074746f
 1f0:	626f5f6d 	rsbvs	r5, pc, #436	; 0x1b4
 1f4:	00325f6a 	eorseq	r5, r2, sl, ror #30
 1f8:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
 1fc:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 200:	7a6f725c 	bvc	1bdcb78 <startup-0x1e423488>
 204:	445c686b 	ldrbmi	r6, [ip], #-2155	; 0xfffff795
 208:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
 20c:	4d5c706f 	ldclmi	0, cr7, [ip, #-444]	; 0xfffffe44
 210:	6c5c504f 	mrrcvs	0, 4, r5, ip, cr15
 214:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
 218:	626f002d 	rsbvs	r0, pc, #45	; 0x2d
 21c:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
 220:	745f656c 	ldrbvc	r6, [pc], #-1388	; 228 <startup-0x1ffffdd8>
 224:	6f5f706f 	svcvs	0x005f706f
 228:	315f6a62 	cmpcc	pc, r2, ror #20
 22c:	73626f00 	cmnvc	r2, #0, 30
 230:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
 234:	6f745f65 	svcvs	0x00745f65
 238:	626f5f70 	rsbvs	r5, pc, #112, 30	; 0x1c0
 23c:	00325f6a 	eorseq	r5, r2, sl, ror #30
 240:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 244:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 248:	746f625f 	strbtvc	r6, [pc], #-607	; 250 <startup-0x1ffffdb0>
 24c:	5f6d6f74 	svcpl	0x006d6f74
 250:	5f6a626f 	svcpl	0x006a626f
 254:	69730031 	ldmdbvs	r3!, {r0, r4, r5}^
 258:	0078657a 	rsbseq	r6, r8, sl, ror r5
 25c:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 260:	72670079 	rsbvc	r0, r7, #121	; 0x79
 264:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 268:	69705f63 	ldmdbvs	r0!, {r0, r1, r5, r6, r8, r9, sl, fp, ip, lr}^
 26c:	5f6c6578 	svcpl	0x006c6578
 270:	00746573 	rsbseq	r6, r4, r3, ror r5
 274:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 278:	6f635f69 	svcvs	0x00635f69
 27c:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 280:	65640064 	strbvs	r0, [r4, #-100]!	; 0xffffff9c
 284:	5f79616c 	svcpl	0x0079616c
 288:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 28c:	73610069 	cmnvc	r1, #105	; 0x69
 290:	5f696963 	svcpl	0x00696963
 294:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 298:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 29c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 2a0:	43007261 	movwmi	r7, #609	; 0x261
 2a4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 2a8:	2f737265 	svccs	0x00737265
 2ac:	6b7a6f72 	blvs	1e9c07c <startup-0x1e163f84>
 2b0:	65442f68 	strbvs	r2, [r4, #-3944]	; 0xfffff098
 2b4:	6f746b73 	svcvs	0x00746b73
 2b8:	4f4d2f70 	svcmi	0x004d2f70
 2bc:	616c2f50 	cmnvs	ip, r0, asr pc
 2c0:	2d356262 	lfmcs	f6, 4, [r5, #-392]!	; 0xfffffe78
 2c4:	6174732f 	cmnvs	r4, pc, lsr #6
 2c8:	70757472 	rsbsvc	r7, r5, r2, ror r4
 2cc:	7500632e 	strvc	r6, [r0, #-814]	; 0xfffffcd2
 2d0:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 2d4:	2064656e 	rsbcs	r6, r4, lr, ror #10
 2d8:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 2dc:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 2e0:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 2e4:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
 2e8:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 2ec:	31393130 	teqcc	r9, r0, lsr r1
 2f0:	20353230 	eorscs	r3, r5, r0, lsr r2
 2f4:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 2f8:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 2fc:	415b2029 	cmpmi	fp, r9, lsr #32
 300:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
 304:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
 308:	6172622d 	cmnvs	r2, sp, lsr #4
 30c:	2068636e 	rsbcs	r6, r8, lr, ror #6
 310:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 314:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 318:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
 31c:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
 320:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 324:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 328:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 32c:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 330:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 334:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 338:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 33c:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 340:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 344:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 348:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 34c:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 350:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 354:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 358:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 35c:	64610062 	strbtvs	r0, [r1], #-98	; 0xffffff9e
 360:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
 364:	626f0073 	rsbvs	r0, pc, #115	; 0x73
 368:	325f7473 	subscc	r7, pc, #1929379840	; 0x73000000
 36c:	6100745f 	tstvs	r0, pc, asr r4
 370:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 374:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 378:	645f6574 	ldrbvs	r6, [pc], #-1396	; 380 <startup-0x1ffffc80>
 37c:	00617461 	rsbeq	r7, r1, r1, ror #8
 380:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 384:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 388:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 38c:	65687400 	strbvs	r7, [r8, #-1024]!	; 0xfffffc00
 390:	705f795f 	subsvc	r7, pc, pc, asr r9	; <UNPREDICTABLE>
 394:	625f736f 	subsvs	r7, pc, #-1140850687	; 0xbc000001
 398:	00647269 	rsbeq	r7, r4, r9, ror #4
 39c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 3a0:	5f737463 	svcpl	0x00737463
 3a4:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 3a8:	0070616c 	rsbseq	r6, r0, ip, ror #2
 3ac:	4164626b 	cmnmi	r4, fp, ror #4
 3b0:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 3b4:	00657461 	rsbeq	r7, r5, r1, ror #8
 3b8:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 3bc:	65687400 	strbvs	r7, [r8, #-1024]!	; 0xfffffc00
 3c0:	735f795f 	cmpvc	pc, #1556480	; 0x17c000
 3c4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 3c8:	7269625f 	rsbvc	r6, r9, #-268435451	; 0xf0000005
 3cc:	6f6d0064 	svcvs	0x006d0064
 3d0:	6f5f6576 	svcvs	0x005f6576
 3d4:	63656a62 	cmnvs	r5, #401408	; 0x62000
 3d8:	73610074 	cmnvc	r1, #116	; 0x74
 3dc:	5f696963 	svcpl	0x00696963
 3e0:	6f746f67 	svcvs	0x00746f67
 3e4:	6d007978 	vstrvs.16	s14, [r0, #-240]	; 0xffffff10	; <UNPREDICTABLE>
 3e8:	5f65766f 	svcpl	0x0065766f
 3ec:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 3f0:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 3f4:	6e690073 	mcrvs	0, 3, r0, cr9, cr3, {3}
 3f8:	615f7469 	cmpvs	pc, r9, ror #8
 3fc:	73007070 	movwvc	r7, #112	; 0x70
 400:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 404:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 408:	006e6565 	rsbeq	r6, lr, r5, ror #10
 40c:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 410:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 414:	746f625f 	strbtvc	r6, [pc], #-607	; 41c <startup-0x1ffffbe4>
 418:	5f6d6f74 	svcpl	0x006d6f74
 41c:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 288 <startup-0x1ffffd78>
 420:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 424:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 428:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 42c:	73007374 	movwvc	r7, #884	; 0x374
 430:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 434:	5f676e69 	svcpl	0x00676e69
 438:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 43c:	6f5f6e65 	svcvs	0x005f6e65
 440:	5f006a62 	svcpl	0x00006a62
 444:	6c6f6f42 	stclvs	15, cr6, [pc], #-264	; 344 <startup-0x1ffffcbc>
 448:	72696200 	rsbvc	r6, r9, #0, 4
 44c:	6c665f64 	stclvs	15, cr5, [r6], #-400	; 0xfffffe70
 450:	675f7061 	ldrbvs	r7, [pc, -r1, rrx]
 454:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 458:	00797274 	rsbseq	r7, r9, r4, ror r2
 45c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 460:	65725f69 	ldrbvs	r5, [r2, #-3945]!	; 0xfffff097
 464:	635f6461 	cmpvs	pc, #1627389952	; 0x61000000
 468:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 46c:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 470:	73610072 	cmnvc	r1, #114	; 0x72
 474:	5f696963 	svcpl	0x00696963
 478:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 47c:	6174735f 	cmnvs	r4, pc, asr r3
 480:	00737574 	rsbseq	r7, r3, r4, ror r5
 484:	62726962 	rsbsvs	r6, r2, #1605632	; 0x188000
 488:	5f747000 	svcpl	0x00747000
 48c:	61727261 	cmnvs	r2, r1, ror #4
 490:	72640079 	rsbvc	r0, r4, #121	; 0x79
 494:	73007761 	movwvc	r7, #1889	; 0x761
 498:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 49c:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 4a0:	656c6300 	strbvs	r6, [ip, #-768]!	; 0xfffffd00
 4a4:	6f5f7261 	svcvs	0x005f7261
 4a8:	63656a62 	cmnvs	r5, #401408	; 0x62000
 4ac:	65730074 	ldrbvs	r0, [r3, #-116]!	; 0xffffff8c
 4b0:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 4b4:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
 4b8:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
 4bc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 4c0:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 4c4:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 4c8:	736e3035 	cmnvc	lr, #53	; 0x35
 4cc:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 4d0:	656b0065 	strbvs	r0, [fp, #-101]!	; 0xffffff9b
 4d4:	655f6279 	ldrbvs	r6, [pc, #-633]	; 263 <startup-0x1ffffd9d>
 4d8:	6e61686e 	cdpvs	8, 6, cr6, cr1, cr14, {3}
 4dc:	00646563 	rsbeq	r6, r4, r3, ror #10
 4e0:	70617267 	rsbvc	r7, r1, r7, ror #4
 4e4:	5f636968 	svcpl	0x00636968
 4e8:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 4ec:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
 4f0:	00726165 	rsbseq	r6, r2, r5, ror #2
 4f4:	73756c70 	cmnvc	r5, #112, 24	; 0x7000
 4f8:	63736100 	cmnvs	r3, #0, 2
 4fc:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 500:	5f646165 	svcpl	0x00646165
 504:	61746164 	cmnvs	r4, r4, ror #2
 508:	67657300 	strbvs	r7, [r5, -r0, lsl #6]!
 50c:	65646f43 	strbvs	r6, [r4, #-3907]!	; 0xfffff0bd
 510:	74730073 	ldrbtvc	r0, [r3], #-115	; 0xffffff8d
 514:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 518:	4f500070 	svcmi	0x00500070
 51c:	43454a42 	movtmi	r4, #23106	; 0x5a42
 520:	756f0054 	strbvc	r0, [pc, #-84]!	; 4d4 <startup-0x1ffffb2c>
 524:	65733774 	ldrbvs	r3, [r3, #-1908]!	; 0xfffff88c
 528:	656b0067 	strbvs	r0, [fp, #-103]!	; 0xffffff99
 52c:	735f6279 	cmpvc	pc, #-1879048185	; 0x90000007
 530:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0xfffffe8c
 534:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 538:	72640065 	rsbvc	r0, r4, #101	; 0x65
 53c:	6f5f7761 	svcvs	0x005f7761
 540:	63656a62 	cmnvs	r5, #401408	; 0x62000
 544:	626f0074 	rsbvs	r0, pc, #116	; 0x74
 548:	325f7473 	subscc	r7, pc, #1929379840	; 0x73000000
 54c:	6100625f 	tstvs	r0, pc, asr r2
 550:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 554:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 558:	73610074 	cmnvc	r1, #116	; 0x74
 55c:	5f696963 	svcpl	0x00696963
 560:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 564:	6d635f65 	stclvs	15, cr5, [r3, #-404]!	; 0xfffffe6c
 568:	Address 0x00000568 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000054 	andeq	r0, r0, r4, asr r0
  20:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  24:	41018e02 	tstmi	r1, r2, lsl #28
  28:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  2c:	00000007 	andeq	r0, r0, r7
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000064 	andcs	r0, r0, r4, rrx
  3c:	0000005c 	andeq	r0, r0, ip, asr r0
  40:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  44:	41018e02 	tstmi	r1, r2, lsl #28
  48:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  4c:	00000007 	andeq	r0, r0, r7
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000c0 	andcs	r0, r0, r0, asr #1
  5c:	00000068 	andeq	r0, r0, r8, rrx
  60:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  64:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  68:	280e4101 	stmdacs	lr, {r0, r8, lr}
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	00000020 	andeq	r0, r0, r0, lsr #32
  74:	00000000 	andeq	r0, r0, r0
  78:	20000128 	andcs	r0, r0, r8, lsr #2
  7c:	00000044 	andeq	r0, r0, r4, asr #32
  80:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
  84:	87038504 	strhi	r8, [r3, -r4, lsl #10]
  88:	41018e02 	tstmi	r1, r2, lsl #28
  8c:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
  90:	00000007 	andeq	r0, r0, r7
  94:	0000001c 	andeq	r0, r0, ip, lsl r0
  98:	00000000 	andeq	r0, r0, r0
  9c:	2000016c 	andcs	r0, r0, ip, ror #2
  a0:	00000068 	andeq	r0, r0, r8, rrx
  a4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
  a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
  ac:	180e4101 	stmdane	lr, {r0, r8, lr}
  b0:	00070d41 	andeq	r0, r7, r1, asr #26
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	200001d4 	ldrdcs	r0, [r0], -r4
  c0:	0000005c 	andeq	r0, r0, ip, asr r0
  c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  c8:	41018e02 	tstmi	r1, r2, lsl #28
  cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  d0:	00000007 	andeq	r0, r0, r7
  d4:	0000001c 	andeq	r0, r0, ip, lsl r0
  d8:	00000000 	andeq	r0, r0, r0
  dc:	20000230 	andcs	r0, r0, r0, lsr r2
  e0:	00000064 	andeq	r0, r0, r4, rrx
  e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  e8:	41018e02 	tstmi	r1, r2, lsl #28
  ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  f0:	00000007 	andeq	r0, r0, r7
  f4:	0000001c 	andeq	r0, r0, ip, lsl r0
  f8:	00000000 	andeq	r0, r0, r0
  fc:	20000294 	mulcs	r0, r4, r2
 100:	00000034 	andeq	r0, r0, r4, lsr r0
 104:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 108:	41018e02 	tstmi	r1, r2, lsl #28
 10c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 110:	00000007 	andeq	r0, r0, r7
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000000 	andeq	r0, r0, r0
 11c:	200002c8 	andcs	r0, r0, r8, asr #5
 120:	00000038 	andeq	r0, r0, r8, lsr r0
 124:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 128:	41018e02 	tstmi	r1, r2, lsl #28
 12c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 130:	00000007 	andeq	r0, r0, r7
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000000 	andeq	r0, r0, r0
 13c:	20000300 	andcs	r0, r0, r0, lsl #6
 140:	0000002e 	andeq	r0, r0, lr, lsr #32
 144:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 148:	41018e02 	tstmi	r1, r2, lsl #28
 14c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 150:	00000007 	andeq	r0, r0, r7
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000000 	andeq	r0, r0, r0
 15c:	2000032e 	andcs	r0, r0, lr, lsr #6
 160:	0000002e 	andeq	r0, r0, lr, lsr #32
 164:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 168:	41018e02 	tstmi	r1, r2, lsl #28
 16c:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 170:	00000007 	andeq	r0, r0, r7
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000000 	andeq	r0, r0, r0
 17c:	2000035c 	andcs	r0, r0, ip, asr r3
 180:	00000044 	andeq	r0, r0, r4, asr #32
 184:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 188:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 18c:	180e4101 	stmdane	lr, {r0, r8, lr}
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000000 	andeq	r0, r0, r0
 19c:	200003a0 	andcs	r0, r0, r0, lsr #7
 1a0:	00000044 	andeq	r0, r0, r4, asr #32
 1a4:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 1a8:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 1ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000000 	andeq	r0, r0, r0
 1bc:	200003e4 	andcs	r0, r0, r4, ror #7
 1c0:	00000042 	andeq	r0, r0, r2, asr #32
 1c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1c8:	41018e02 	tstmi	r1, r2, lsl #28
 1cc:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d0:	00000007 	andeq	r0, r0, r7
 1d4:	00000018 	andeq	r0, r0, r8, lsl r0
 1d8:	00000000 	andeq	r0, r0, r0
 1dc:	20000426 	andcs	r0, r0, r6, lsr #8
 1e0:	0000002c 	andeq	r0, r0, ip, lsr #32
 1e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1e8:	41018e02 	tstmi	r1, r2, lsl #28
 1ec:	0000070d 	andeq	r0, r0, sp, lsl #14
 1f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f4:	00000000 	andeq	r0, r0, r0
 1f8:	20000452 	andcs	r0, r0, r2, asr r4
 1fc:	00000032 	andeq	r0, r0, r2, lsr r0
 200:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 204:	41018e02 	tstmi	r1, r2, lsl #28
 208:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 20c:	00000007 	andeq	r0, r0, r7
 210:	0000001c 	andeq	r0, r0, ip, lsl r0
 214:	00000000 	andeq	r0, r0, r0
 218:	20000484 	andcs	r0, r0, r4, lsl #9
 21c:	00000038 	andeq	r0, r0, r8, lsr r0
 220:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 224:	41018e02 	tstmi	r1, r2, lsl #28
 228:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 22c:	00000007 	andeq	r0, r0, r7
 230:	00000018 	andeq	r0, r0, r8, lsl r0
 234:	00000000 	andeq	r0, r0, r0
 238:	200004bc 			; <UNDEFINED> instruction: 0x200004bc
 23c:	00000044 	andeq	r0, r0, r4, asr #32
 240:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 244:	41018e02 	tstmi	r1, r2, lsl #28
 248:	0000070d 	andeq	r0, r0, sp, lsl #14
 24c:	0000001c 	andeq	r0, r0, ip, lsl r0
 250:	00000000 	andeq	r0, r0, r0
 254:	20000500 	andcs	r0, r0, r0, lsl #10
 258:	00000046 	andeq	r0, r0, r6, asr #32
 25c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 260:	41018e02 	tstmi	r1, r2, lsl #28
 264:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 268:	00000007 	andeq	r0, r0, r7
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	00000000 	andeq	r0, r0, r0
 274:	20000546 	andcs	r0, r0, r6, asr #10
 278:	00000040 	andeq	r0, r0, r0, asr #32
 27c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 280:	41018e02 	tstmi	r1, r2, lsl #28
 284:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 288:	00000007 	andeq	r0, r0, r7
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000000 	andeq	r0, r0, r0
 294:	20000586 	andcs	r0, r0, r6, lsl #11
 298:	00000060 	andeq	r0, r0, r0, rrx
 29c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2a0:	41018e02 	tstmi	r1, r2, lsl #28
 2a4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2a8:	00000007 	andeq	r0, r0, r7
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	200005e6 	andcs	r0, r0, r6, ror #11
 2b8:	00000060 	andeq	r0, r0, r0, rrx
 2bc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2c0:	41018e02 	tstmi	r1, r2, lsl #28
 2c4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 2c8:	00000007 	andeq	r0, r0, r7
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000000 	andeq	r0, r0, r0
 2d4:	20000646 	andcs	r0, r0, r6, asr #12
 2d8:	0000003c 	andeq	r0, r0, ip, lsr r0
 2dc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2e0:	41018e02 	tstmi	r1, r2, lsl #28
 2e4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2e8:	00000007 	andeq	r0, r0, r7
 2ec:	0000001c 	andeq	r0, r0, ip, lsl r0
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	20000682 	andcs	r0, r0, r2, lsl #13
 2f8:	00000020 	andeq	r0, r0, r0, lsr #32
 2fc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 300:	41018e02 	tstmi	r1, r2, lsl #28
 304:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 308:	00000007 	andeq	r0, r0, r7
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	20000000 	andcs	r0, r0, r0
 318:	0000000c 	andeq	r0, r0, ip
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	200006a2 	andcs	r0, r0, r2, lsr #13
 328:	00000006 	andeq	r0, r0, r6
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	200006a8 	andcs	r0, r0, r8, lsr #13
 338:	00000006 	andeq	r0, r0, r6
 33c:	0000000c 	andeq	r0, r0, ip
 340:	00000000 	andeq	r0, r0, r0
 344:	200006ae 	andcs	r0, r0, lr, lsr #13
 348:	00000006 	andeq	r0, r0, r6
 34c:	0000000c 	andeq	r0, r0, ip
 350:	00000000 	andeq	r0, r0, r0
 354:	200006b4 			; <UNDEFINED> instruction: 0x200006b4
 358:	00000006 	andeq	r0, r0, r6
 35c:	00000018 	andeq	r0, r0, r8, lsl r0
 360:	00000000 	andeq	r0, r0, r0
 364:	200006ba 			; <UNDEFINED> instruction: 0x200006ba
 368:	00000026 	andeq	r0, r0, r6, lsr #32
 36c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 370:	41018e02 	tstmi	r1, r2, lsl #28
 374:	0000070d 	andeq	r0, r0, sp, lsl #14
 378:	00000018 	andeq	r0, r0, r8, lsl r0
 37c:	00000000 	andeq	r0, r0, r0
 380:	200006e0 	andcs	r0, r0, r0, ror #13
 384:	0000003c 	andeq	r0, r0, ip, lsr r0
 388:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 38c:	41018e02 	tstmi	r1, r2, lsl #28
 390:	0000070d 	andeq	r0, r0, sp, lsl #14
 394:	0000001c 	andeq	r0, r0, ip, lsl r0
 398:	00000000 	andeq	r0, r0, r0
 39c:	2000071c 	andcs	r0, r0, ip, lsl r7
 3a0:	000000d4 	ldrdeq	r0, [r0], -r4
 3a4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3a8:	41018e02 	tstmi	r1, r2, lsl #28
 3ac:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3b0:	00000007 	andeq	r0, r0, r7
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	200007f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 3c0:	0000003e 	andeq	r0, r0, lr, lsr r0
 3c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c8:	41018e02 	tstmi	r1, r2, lsl #28
 3cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d0:	00000007 	andeq	r0, r0, r7
 3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	2000082e 	andcs	r0, r0, lr, lsr #16
 3e0:	00000046 	andeq	r0, r0, r6, asr #32
 3e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3e8:	41018e02 	tstmi	r1, r2, lsl #28
 3ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f0:	00000007 	andeq	r0, r0, r7
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	20000874 	andcs	r0, r0, r4, ror r8
 400:	00000056 	andeq	r0, r0, r6, asr r0
 404:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 408:	41018e02 	tstmi	r1, r2, lsl #28
 40c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 410:	00000007 	andeq	r0, r0, r7
 414:	0000001c 	andeq	r0, r0, ip, lsl r0
 418:	00000000 	andeq	r0, r0, r0
 41c:	200008ca 	andcs	r0, r0, sl, asr #17
 420:	0000006a 	andeq	r0, r0, sl, rrx
 424:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 428:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 42c:	280e4101 	stmdacs	lr, {r0, r8, lr}
 430:	00070d41 	andeq	r0, r7, r1, asr #26
 434:	0000001c 	andeq	r0, r0, ip, lsl r0
 438:	00000000 	andeq	r0, r0, r0
 43c:	20000934 	andcs	r0, r0, r4, lsr r9
 440:	000000ce 	andeq	r0, r0, lr, asr #1
 444:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 448:	41018e02 	tstmi	r1, r2, lsl #28
 44c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 450:	00000007 	andeq	r0, r0, r7
 454:	0000001c 	andeq	r0, r0, ip, lsl r0
 458:	00000000 	andeq	r0, r0, r0
 45c:	20000a02 	andcs	r0, r0, r2, lsl #20
 460:	0000009a 	muleq	r0, sl, r0
 464:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 468:	41018e02 	tstmi	r1, r2, lsl #28
 46c:	0d41200e 	stcleq	0, cr2, [r1, #-56]	; 0xffffffc8
 470:	00000007 	andeq	r0, r0, r7
 474:	00000020 	andeq	r0, r0, r0, lsr #32
 478:	00000000 	andeq	r0, r0, r0
 47c:	20000a9c 	mulcs	r0, ip, sl
 480:	000002f4 	strdeq	r0, [r0], -r4
 484:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 488:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 48c:	41018e02 	tstmi	r1, r2, lsl #28
 490:	0c41280e 	mcrreq	8, 0, r2, r1, cr14
 494:	00002007 	andeq	r2, r0, r7
 498:	0000000c 	andeq	r0, r0, ip
 49c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4a0:	7c010001 	stcvc	0, cr0, [r1], {1}
 4a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4a8:	0000000c 	andeq	r0, r0, ip
 4ac:	00000498 	muleq	r0, r8, r4
 4b0:	20000d91 	mulcs	r0, r1, sp
 4b4:	0000010a 	andeq	r0, r0, sl, lsl #2
 4b8:	0000000c 	andeq	r0, r0, ip
 4bc:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4c0:	7c010001 	stcvc	0, cr0, [r1], {1}
 4c4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4c8:	0000000c 	andeq	r0, r0, ip
 4cc:	000004b8 			; <UNDEFINED> instruction: 0x000004b8
 4d0:	20000ea5 	andcs	r0, r0, r5, lsr #29
 4d4:	000001cc 	andeq	r0, r0, ip, asr #3
