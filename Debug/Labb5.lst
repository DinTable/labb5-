
Debug/Labb5:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
static char keyb_state = 0xFF;

__attribute__((naked)) __attribute__((section (".start_section")) )
void startup ( void )
{
__asm__ volatile(" LDR R0,=0x2001C000\n");        /* set stack */
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <startup+0xc>)
__asm__ volatile(" MOV SP,R0\n");
20000002:	4685      	mov	sp, r0
__asm__ volatile(" BL main\n");                    /* call main */
20000004:	f000 fc35 	bl	20000872 <main>
__asm__ volatile(".L1: B .L1\n");                /* never return */
20000008:	e7fe      	b.n	20000008 <startup+0x8>
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_initialize>:

__attribute__((naked))
void graphic_initialize(void){
20000010:	4770dff0 			; <UNDEFINED> instruction: 0x4770dff0
    __asm volatile (" .HWORD 0xDFF0\n");
    __asm volatile (" BX LR\n");
}
20000014:	46c0      	nop			; (mov r8, r8)

20000016 <graphic_clear_screen>:

__attribute__((naked))
void graphic_clear_screen(void){
20000016:	4770dff1 			; <UNDEFINED> instruction: 0x4770dff1
    __asm volatile (" .HWORD 0xDFF1\n");
    __asm volatile (" BX LR\n");
}
2000001a:	46c0      	nop			; (mov r8, r8)

2000001c <graphic_pixel_set>:

__attribute__((naked))
void graphic_pixel_set(int x, int y){
2000001c:	4770dff2 			; <UNDEFINED> instruction: 0x4770dff2
    __asm volatile (" .HWORD 0xDFF2\n");
    __asm volatile (" BX LR\n");
}
20000020:	46c0      	nop			; (mov r8, r8)

20000022 <graphic_pixel_clear>:

__attribute__((naked))
void graphic_pixel_clear(int x, int y){
20000022:	4770dff3 			; <UNDEFINED> instruction: 0x4770dff3
    __asm volatile (" .HWORD 0xDFF3\n");
    __asm volatile (" BX LR\n");
}
20000026:	46c0      	nop			; (mov r8, r8)

20000028 <init_app>:

void init_app(void) {
20000028:	b580      	push	{r7, lr}
2000002a:	af00      	add	r7, sp, #0
    *GPIO_D_MODER = 0x55005555;
2000002c:	4b04      	ldr	r3, [pc, #16]	; (20000040 <init_app+0x18>)
2000002e:	4a05      	ldr	r2, [pc, #20]	; (20000044 <init_app+0x1c>)
20000030:	601a      	str	r2, [r3, #0]
	*GPIO_E_MODER = 0x55555555;
20000032:	4b05      	ldr	r3, [pc, #20]	; (20000048 <init_app+0x20>)
20000034:	4a05      	ldr	r2, [pc, #20]	; (2000004c <init_app+0x24>)
20000036:	601a      	str	r2, [r3, #0]
}
20000038:	46c0      	nop			; (mov r8, r8)
2000003a:	46bd      	mov	sp, r7
2000003c:	bd80      	pop	{r7, pc}
2000003e:	46c0      	nop			; (mov r8, r8)
20000040:	40020c00 	andmi	r0, r2, r0, lsl #24
20000044:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000048:	40021000 	andmi	r1, r2, r0
2000004c:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000050 <ascii_ctrl_bit_set>:

void ascii_ctrl_bit_set(unsigned char x){
20000050:	b580      	push	{r7, lr}
20000052:	b084      	sub	sp, #16
20000054:	af00      	add	r7, sp, #0
20000056:	0002      	movs	r2, r0
20000058:	1dfb      	adds	r3, r7, #7
2000005a:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
2000005c:	4a09      	ldr	r2, [pc, #36]	; (20000084 <ascii_ctrl_bit_set+0x34>)
2000005e:	210f      	movs	r1, #15
20000060:	187b      	adds	r3, r7, r1
20000062:	7812      	ldrb	r2, [r2, #0]
20000064:	701a      	strb	r2, [r3, #0]
	*GPIO_D_ODR_LOW = B_SELECT | x | c; // Select alltid 1 i vårt fall och sätt x biten till 1.
20000066:	1dfa      	adds	r2, r7, #7
20000068:	187b      	adds	r3, r7, r1
2000006a:	7812      	ldrb	r2, [r2, #0]
2000006c:	781b      	ldrb	r3, [r3, #0]
2000006e:	4313      	orrs	r3, r2
20000070:	b2db      	uxtb	r3, r3
20000072:	4a05      	ldr	r2, [pc, #20]	; (20000088 <ascii_ctrl_bit_set+0x38>)
20000074:	2104      	movs	r1, #4
20000076:	430b      	orrs	r3, r1
20000078:	b2db      	uxtb	r3, r3
2000007a:	7013      	strb	r3, [r2, #0]
}
2000007c:	46c0      	nop			; (mov r8, r8)
2000007e:	46bd      	mov	sp, r7
20000080:	b004      	add	sp, #16
20000082:	bd80      	pop	{r7, pc}
20000084:	40021014 	andmi	r1, r2, r4, lsl r0
20000088:	40020c14 	andmi	r0, r2, r4, lsl ip

2000008c <ascii_ctrl_bit_clear>:

void ascii_ctrl_bit_clear(unsigned char x){
2000008c:	b580      	push	{r7, lr}
2000008e:	b084      	sub	sp, #16
20000090:	af00      	add	r7, sp, #0
20000092:	0002      	movs	r2, r0
20000094:	1dfb      	adds	r3, r7, #7
20000096:	701a      	strb	r2, [r3, #0]
	char c;
	c = *GPIO_E_ODR_LOW;
20000098:	4a0d      	ldr	r2, [pc, #52]	; (200000d0 <ascii_ctrl_bit_clear+0x44>)
2000009a:	210f      	movs	r1, #15
2000009c:	187b      	adds	r3, r7, r1
2000009e:	7812      	ldrb	r2, [r2, #0]
200000a0:	701a      	strb	r2, [r3, #0]
	c = c & ~x; // detta gör att x biten nollställs medan alla andra bitar behåller sina värden.
200000a2:	1dfb      	adds	r3, r7, #7
200000a4:	781b      	ldrb	r3, [r3, #0]
200000a6:	b25b      	sxtb	r3, r3
200000a8:	43db      	mvns	r3, r3
200000aa:	b25b      	sxtb	r3, r3
200000ac:	187a      	adds	r2, r7, r1
200000ae:	7812      	ldrb	r2, [r2, #0]
200000b0:	b252      	sxtb	r2, r2
200000b2:	4013      	ands	r3, r2
200000b4:	b25a      	sxtb	r2, r3
200000b6:	187b      	adds	r3, r7, r1
200000b8:	701a      	strb	r2, [r3, #0]
	*GPIO_E_ODR_LOW = B_SELECT | c; // Select alltid 1
200000ba:	4a05      	ldr	r2, [pc, #20]	; (200000d0 <ascii_ctrl_bit_clear+0x44>)
200000bc:	187b      	adds	r3, r7, r1
200000be:	781b      	ldrb	r3, [r3, #0]
200000c0:	2104      	movs	r1, #4
200000c2:	430b      	orrs	r3, r1
200000c4:	b2db      	uxtb	r3, r3
200000c6:	7013      	strb	r3, [r2, #0]
}
200000c8:	46c0      	nop			; (mov r8, r8)
200000ca:	46bd      	mov	sp, r7
200000cc:	b004      	add	sp, #16
200000ce:	bd80      	pop	{r7, pc}
200000d0:	40021014 	andmi	r1, r2, r4, lsl r0

200000d4 <ascii_write_controller>:

void ascii_write_controller(unsigned char byte){	
200000d4:	b580      	push	{r7, lr}
200000d6:	b082      	sub	sp, #8
200000d8:	af00      	add	r7, sp, #0
200000da:	0002      	movs	r2, r0
200000dc:	1dfb      	adds	r3, r7, #7
200000de:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_E); // E = 1 betyder att arbetscyklen startas
200000e0:	2040      	movs	r0, #64	; 0x40
200000e2:	f7ff ffb5 	bl	20000050 <ascii_ctrl_bit_set>
	*GPIO_E_ODR_HIGH = byte;
200000e6:	4a06      	ldr	r2, [pc, #24]	; (20000100 <ascii_write_controller+0x2c>)
200000e8:	1dfb      	adds	r3, r7, #7
200000ea:	781b      	ldrb	r3, [r3, #0]
200000ec:	7013      	strb	r3, [r2, #0]
	ascii_ctrl_bit_clear(B_E); // Efter att uppgiften utförts så avslutar vi arbetscykeln.
200000ee:	2040      	movs	r0, #64	; 0x40
200000f0:	f7ff ffcc 	bl	2000008c <ascii_ctrl_bit_clear>
	delay_250ns();
200000f4:	f000 f9d6 	bl	200004a4 <delay_250ns>
}
200000f8:	46c0      	nop			; (mov r8, r8)
200000fa:	46bd      	mov	sp, r7
200000fc:	b002      	add	sp, #8
200000fe:	bd80      	pop	{r7, pc}
20000100:	40021015 	andmi	r1, r2, r5, lsl r0

20000104 <ascii_read_controller>:
	

unsigned char ascii_read_controller(void){
20000104:	b580      	push	{r7, lr}
20000106:	b082      	sub	sp, #8
20000108:	af00      	add	r7, sp, #0
	unsigned char c;
	ascii_ctrl_bit_set(B_E); // Starta arbetscyklen
2000010a:	2040      	movs	r0, #64	; 0x40
2000010c:	f7ff ffa0 	bl	20000050 <ascii_ctrl_bit_set>
	
	delay_250ns(); // Vänta minst 360 ns innan datan är förberedd av ascii displayen för att läsas
20000110:	f000 f9c8 	bl	200004a4 <delay_250ns>
	delay_250ns();
20000114:	f000 f9c6 	bl	200004a4 <delay_250ns>
	
	c = *GPIO_E_IDR_HIGH;
20000118:	4a06      	ldr	r2, [pc, #24]	; (20000134 <ascii_read_controller+0x30>)
2000011a:	1dfb      	adds	r3, r7, #7
2000011c:	7812      	ldrb	r2, [r2, #0]
2000011e:	701a      	strb	r2, [r3, #0]
	
	ascii_ctrl_bit_clear(B_E);
20000120:	2040      	movs	r0, #64	; 0x40
20000122:	f7ff ffb3 	bl	2000008c <ascii_ctrl_bit_clear>
	
	return c;
20000126:	1dfb      	adds	r3, r7, #7
20000128:	781b      	ldrb	r3, [r3, #0]
}
2000012a:	0018      	movs	r0, r3
2000012c:	46bd      	mov	sp, r7
2000012e:	b002      	add	sp, #8
20000130:	bd80      	pop	{r7, pc}
20000132:	46c0      	nop			; (mov r8, r8)
20000134:	40021011 	andmi	r1, r2, r1, lsl r0

20000138 <ascii_write_cmd>:

void ascii_write_cmd(unsigned char command){
20000138:	b580      	push	{r7, lr}
2000013a:	b082      	sub	sp, #8
2000013c:	af00      	add	r7, sp, #0
2000013e:	0002      	movs	r2, r0
20000140:	1dfb      	adds	r3, r7, #7
20000142:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_clear(B_RS);
20000144:	2001      	movs	r0, #1
20000146:	f7ff ffa1 	bl	2000008c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
2000014a:	2002      	movs	r0, #2
2000014c:	f7ff ff9e 	bl	2000008c <ascii_ctrl_bit_clear>
	ascii_write_controller(command);
20000150:	1dfb      	adds	r3, r7, #7
20000152:	781b      	ldrb	r3, [r3, #0]
20000154:	0018      	movs	r0, r3
20000156:	f7ff ffbd 	bl	200000d4 <ascii_write_controller>
}
2000015a:	46c0      	nop			; (mov r8, r8)
2000015c:	46bd      	mov	sp, r7
2000015e:	b002      	add	sp, #8
20000160:	bd80      	pop	{r7, pc}

20000162 <ascii_write_data>:

void ascii_write_data(unsigned char data){
20000162:	b580      	push	{r7, lr}
20000164:	b082      	sub	sp, #8
20000166:	af00      	add	r7, sp, #0
20000168:	0002      	movs	r2, r0
2000016a:	1dfb      	adds	r3, r7, #7
2000016c:	701a      	strb	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RS);
2000016e:	2001      	movs	r0, #1
20000170:	f7ff ff6e 	bl	20000050 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RW);
20000174:	2002      	movs	r0, #2
20000176:	f7ff ff89 	bl	2000008c <ascii_ctrl_bit_clear>
	ascii_write_controller(data);
2000017a:	1dfb      	adds	r3, r7, #7
2000017c:	781b      	ldrb	r3, [r3, #0]
2000017e:	0018      	movs	r0, r3
20000180:	f7ff ffa8 	bl	200000d4 <ascii_write_controller>
}
20000184:	46c0      	nop			; (mov r8, r8)
20000186:	46bd      	mov	sp, r7
20000188:	b002      	add	sp, #8
2000018a:	bd80      	pop	{r7, pc}

2000018c <ascii_read_status>:

unsigned char ascii_read_status(void){
2000018c:	b590      	push	{r4, r7, lr}
2000018e:	b083      	sub	sp, #12
20000190:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555; //sätter bit 8-15 i porten (dataregistret för ascii displayen) till ingångar som förberedelse för att ascii_read_controller ska läsa från dem senare.
20000192:	4b0b      	ldr	r3, [pc, #44]	; (200001c0 <ascii_read_status+0x34>)
20000194:	4a0b      	ldr	r2, [pc, #44]	; (200001c4 <ascii_read_status+0x38>)
20000196:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
20000198:	2002      	movs	r0, #2
2000019a:	f7ff ff59 	bl	20000050 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_clear(B_RS);
2000019e:	2001      	movs	r0, #1
200001a0:	f7ff ff74 	bl	2000008c <ascii_ctrl_bit_clear>
	c = ascii_read_controller();
200001a4:	1dfc      	adds	r4, r7, #7
200001a6:	f7ff ffad 	bl	20000104 <ascii_read_controller>
200001aa:	0003      	movs	r3, r0
200001ac:	7023      	strb	r3, [r4, #0]
	
	*GPIO_E_MODER = 0x55555555; //återställer dataregistret till utgång
200001ae:	4b04      	ldr	r3, [pc, #16]	; (200001c0 <ascii_read_status+0x34>)
200001b0:	4a05      	ldr	r2, [pc, #20]	; (200001c8 <ascii_read_status+0x3c>)
200001b2:	601a      	str	r2, [r3, #0]
	
	return c;
200001b4:	1dfb      	adds	r3, r7, #7
200001b6:	781b      	ldrb	r3, [r3, #0]
}
200001b8:	0018      	movs	r0, r3
200001ba:	46bd      	mov	sp, r7
200001bc:	b003      	add	sp, #12
200001be:	bd90      	pop	{r4, r7, pc}
200001c0:	40021000 	andmi	r1, r2, r0
200001c4:	00005555 	andeq	r5, r0, r5, asr r5
200001c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200001cc <ascii_read_data>:

unsigned char ascii_read_data(void){
200001cc:	b590      	push	{r4, r7, lr}
200001ce:	b083      	sub	sp, #12
200001d0:	af00      	add	r7, sp, #0
	char c;
	*GPIO_E_MODER = 0x00005555;  
200001d2:	4b0b      	ldr	r3, [pc, #44]	; (20000200 <ascii_read_data+0x34>)
200001d4:	4a0b      	ldr	r2, [pc, #44]	; (20000204 <ascii_read_data+0x38>)
200001d6:	601a      	str	r2, [r3, #0]
	ascii_ctrl_bit_set(B_RW);
200001d8:	2002      	movs	r0, #2
200001da:	f7ff ff39 	bl	20000050 <ascii_ctrl_bit_set>
	ascii_ctrl_bit_set(B_RS); // som ovan men nu är RS = 1 för att vi läser data istället för status
200001de:	2001      	movs	r0, #1
200001e0:	f7ff ff36 	bl	20000050 <ascii_ctrl_bit_set>
	c = ascii_read_controller();
200001e4:	1dfc      	adds	r4, r7, #7
200001e6:	f7ff ff8d 	bl	20000104 <ascii_read_controller>
200001ea:	0003      	movs	r3, r0
200001ec:	7023      	strb	r3, [r4, #0]
	
	*GPIO_E_MODER = 0x55555555;
200001ee:	4b04      	ldr	r3, [pc, #16]	; (20000200 <ascii_read_data+0x34>)
200001f0:	4a05      	ldr	r2, [pc, #20]	; (20000208 <ascii_read_data+0x3c>)
200001f2:	601a      	str	r2, [r3, #0]
	
	return c;
200001f4:	1dfb      	adds	r3, r7, #7
200001f6:	781b      	ldrb	r3, [r3, #0]
}
200001f8:	0018      	movs	r0, r3
200001fa:	46bd      	mov	sp, r7
200001fc:	b003      	add	sp, #12
200001fe:	bd90      	pop	{r4, r7, pc}
20000200:	40021000 	andmi	r1, r2, r0
20000204:	00005555 	andeq	r5, r0, r5, asr r5
20000208:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000020c <ascii_command>:

void ascii_command(command){
2000020c:	b580      	push	{r7, lr}
2000020e:	b082      	sub	sp, #8
20000210:	af00      	add	r7, sp, #0
20000212:	6078      	str	r0, [r7, #4]
	while( ascii_read_status() & 0x80 ); // Vänta så länge ascii displayen är upptagen
20000214:	46c0      	nop			; (mov r8, r8)
20000216:	f7ff ffb9 	bl	2000018c <ascii_read_status>
2000021a:	0003      	movs	r3, r0
2000021c:	b25b      	sxtb	r3, r3
2000021e:	2b00      	cmp	r3, #0
20000220:	dbf9      	blt.n	20000216 <ascii_command+0xa>
	delay_micro(8);
20000222:	2008      	movs	r0, #8
20000224:	f000 f960 	bl	200004e8 <delay_micro>
	
	ascii_write_cmd(command);
20000228:	687b      	ldr	r3, [r7, #4]
2000022a:	b2db      	uxtb	r3, r3
2000022c:	0018      	movs	r0, r3
2000022e:	f7ff ff83 	bl	20000138 <ascii_write_cmd>
	
	if(command == CLEAR_DISPLAY){
20000232:	687b      	ldr	r3, [r7, #4]
20000234:	2b01      	cmp	r3, #1
20000236:	d103      	bne.n	20000240 <ascii_command+0x34>
		delay_milli(2);
20000238:	2002      	movs	r0, #2
2000023a:	f000 f978 	bl	2000052e <delay_milli>
	}
	else if(command == FUNCTION_SET || command == DISPLAY_CONTROL || ENTRY_MODE_SET){
		delay_micro(39);
	}
}
2000023e:	e002      	b.n	20000246 <ascii_command+0x3a>
		delay_micro(39);
20000240:	2027      	movs	r0, #39	; 0x27
20000242:	f000 f951 	bl	200004e8 <delay_micro>
}
20000246:	46c0      	nop			; (mov r8, r8)
20000248:	46bd      	mov	sp, r7
2000024a:	b002      	add	sp, #8
2000024c:	bd80      	pop	{r7, pc}

2000024e <ascii_init>:

void ascii_init(void){
2000024e:	b580      	push	{r7, lr}
20000250:	af00      	add	r7, sp, #0
	ascii_ctrl_bit_clear(B_RS); // För dessa kommandon skall RS och RW = 0
20000252:	2001      	movs	r0, #1
20000254:	f7ff ff1a 	bl	2000008c <ascii_ctrl_bit_clear>
	ascii_ctrl_bit_clear(B_RW);
20000258:	2002      	movs	r0, #2
2000025a:	f7ff ff17 	bl	2000008c <ascii_ctrl_bit_clear>
	
	ascii_command(FUNCTION_SET);
2000025e:	2030      	movs	r0, #48	; 0x30
20000260:	f7ff ffd4 	bl	2000020c <ascii_command>
	ascii_command(DISPLAY_CONTROL);
20000264:	200f      	movs	r0, #15
20000266:	f7ff ffd1 	bl	2000020c <ascii_command>
	ascii_command(CLEAR_DISPLAY);
2000026a:	2001      	movs	r0, #1
2000026c:	f7ff ffce 	bl	2000020c <ascii_command>
}
20000270:	46c0      	nop			; (mov r8, r8)
20000272:	46bd      	mov	sp, r7
20000274:	bd80      	pop	{r7, pc}

20000276 <ascii_write_char>:

void ascii_write_char(unsigned char c){
20000276:	b580      	push	{r7, lr}
20000278:	b082      	sub	sp, #8
2000027a:	af00      	add	r7, sp, #0
2000027c:	0002      	movs	r2, r0
2000027e:	1dfb      	adds	r3, r7, #7
20000280:	701a      	strb	r2, [r3, #0]
	while( ascii_read_status() & 0x80 ); // Vänta så länge ascii displayen är upptagen
20000282:	46c0      	nop			; (mov r8, r8)
20000284:	f7ff ff82 	bl	2000018c <ascii_read_status>
20000288:	0003      	movs	r3, r0
2000028a:	b25b      	sxtb	r3, r3
2000028c:	2b00      	cmp	r3, #0
2000028e:	dbf9      	blt.n	20000284 <ascii_write_char+0xe>
	delay_micro(8);
20000290:	2008      	movs	r0, #8
20000292:	f000 f929 	bl	200004e8 <delay_micro>
	
	ascii_write_data(c);
20000296:	1dfb      	adds	r3, r7, #7
20000298:	781b      	ldrb	r3, [r3, #0]
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ff61 	bl	20000162 <ascii_write_data>
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b002      	add	sp, #8
200002a6:	bd80      	pop	{r7, pc}

200002a8 <ascii_gotoxy>:

void ascii_gotoxy(int x, int y){	
200002a8:	b580      	push	{r7, lr}
200002aa:	b084      	sub	sp, #16
200002ac:	af00      	add	r7, sp, #0
200002ae:	6078      	str	r0, [r7, #4]
200002b0:	6039      	str	r1, [r7, #0]
	int address = x-1;
200002b2:	687b      	ldr	r3, [r7, #4]
200002b4:	3b01      	subs	r3, #1
200002b6:	60fb      	str	r3, [r7, #12]
	if (y == 2){
200002b8:	683b      	ldr	r3, [r7, #0]
200002ba:	2b02      	cmp	r3, #2
200002bc:	d102      	bne.n	200002c4 <ascii_gotoxy+0x1c>
		address = address + 0x40; // Teckenminnet har plats för 64 tecken per rad (20 visas), därför blir addressen för rad 2 lika med 0x40 (64 i decimal)
200002be:	68fb      	ldr	r3, [r7, #12]
200002c0:	3340      	adds	r3, #64	; 0x40
200002c2:	60fb      	str	r3, [r7, #12]
	}
	ascii_write_cmd(0x80 | address);
200002c4:	68fb      	ldr	r3, [r7, #12]
200002c6:	b25b      	sxtb	r3, r3
200002c8:	2280      	movs	r2, #128	; 0x80
200002ca:	4252      	negs	r2, r2
200002cc:	4313      	orrs	r3, r2
200002ce:	b25b      	sxtb	r3, r3
200002d0:	b2db      	uxtb	r3, r3
200002d2:	0018      	movs	r0, r3
200002d4:	f7ff ff30 	bl	20000138 <ascii_write_cmd>
}
200002d8:	46c0      	nop			; (mov r8, r8)
200002da:	46bd      	mov	sp, r7
200002dc:	b004      	add	sp, #16
200002de:	bd80      	pop	{r7, pc}

200002e0 <kbdGetCol>:

int kbdGetCol(void) { /* Om någon tangent (i aktiverad rad)
200002e0:	b580      	push	{r7, lr}
200002e2:	b082      	sub	sp, #8
200002e4:	af00      	add	r7, sp, #0
* är nedtryckt, returnera dess kolumnnummer,
* annars, returnera 0 */
    unsigned char c;
    c = *GPIO_D_IDR_HIGH;
200002e6:	4a12      	ldr	r2, [pc, #72]	; (20000330 <kbdGetCol+0x50>)
200002e8:	1dfb      	adds	r3, r7, #7
200002ea:	7812      	ldrb	r2, [r2, #0]
200002ec:	701a      	strb	r2, [r3, #0]
    if (c & 0x8) return 4;
200002ee:	1dfb      	adds	r3, r7, #7
200002f0:	781b      	ldrb	r3, [r3, #0]
200002f2:	2208      	movs	r2, #8
200002f4:	4013      	ands	r3, r2
200002f6:	d001      	beq.n	200002fc <kbdGetCol+0x1c>
200002f8:	2304      	movs	r3, #4
200002fa:	e015      	b.n	20000328 <kbdGetCol+0x48>
    if (c & 0x4) return 3;
200002fc:	1dfb      	adds	r3, r7, #7
200002fe:	781b      	ldrb	r3, [r3, #0]
20000300:	2204      	movs	r2, #4
20000302:	4013      	ands	r3, r2
20000304:	d001      	beq.n	2000030a <kbdGetCol+0x2a>
20000306:	2303      	movs	r3, #3
20000308:	e00e      	b.n	20000328 <kbdGetCol+0x48>
    if (c & 0x2) return 2;
2000030a:	1dfb      	adds	r3, r7, #7
2000030c:	781b      	ldrb	r3, [r3, #0]
2000030e:	2202      	movs	r2, #2
20000310:	4013      	ands	r3, r2
20000312:	d001      	beq.n	20000318 <kbdGetCol+0x38>
20000314:	2302      	movs	r3, #2
20000316:	e007      	b.n	20000328 <kbdGetCol+0x48>
    if (c & 0x1) return 1;
20000318:	1dfb      	adds	r3, r7, #7
2000031a:	781b      	ldrb	r3, [r3, #0]
2000031c:	2201      	movs	r2, #1
2000031e:	4013      	ands	r3, r2
20000320:	d001      	beq.n	20000326 <kbdGetCol+0x46>
20000322:	2301      	movs	r3, #1
20000324:	e000      	b.n	20000328 <kbdGetCol+0x48>
    return 0;
20000326:	2300      	movs	r3, #0
}
20000328:	0018      	movs	r0, r3
2000032a:	46bd      	mov	sp, r7
2000032c:	b002      	add	sp, #8
2000032e:	bd80      	pop	{r7, pc}
20000330:	40020c11 	andmi	r0, r2, r1, lsl ip

20000334 <kbdActivate>:

void kbdActivate(unsigned int row) { /* Aktivera angiven rad hos tangentbordet, eller
20000334:	b580      	push	{r7, lr}
20000336:	b082      	sub	sp, #8
20000338:	af00      	add	r7, sp, #0
2000033a:	6078      	str	r0, [r7, #4]
2000033c:	687b      	ldr	r3, [r7, #4]
2000033e:	2b05      	cmp	r3, #5
20000340:	d81d      	bhi.n	2000037e <kbdActivate+0x4a>
20000342:	687b      	ldr	r3, [r7, #4]
20000344:	009a      	lsls	r2, r3, #2
20000346:	4b10      	ldr	r3, [pc, #64]	; (20000388 <kbdActivate+0x54>)
20000348:	18d3      	adds	r3, r2, r3
2000034a:	681b      	ldr	r3, [r3, #0]
2000034c:	469f      	mov	pc, r3
* deaktivera samtliga */
    switch (row) {
        case 1:
            *GPIO_D_ODR_HIGH = 0x10;
2000034e:	4b0f      	ldr	r3, [pc, #60]	; (2000038c <kbdActivate+0x58>)
20000350:	2210      	movs	r2, #16
20000352:	701a      	strb	r2, [r3, #0]
            break;
20000354:	e013      	b.n	2000037e <kbdActivate+0x4a>
        case 2:
            *GPIO_D_ODR_HIGH = 0x20;
20000356:	4b0d      	ldr	r3, [pc, #52]	; (2000038c <kbdActivate+0x58>)
20000358:	2220      	movs	r2, #32
2000035a:	701a      	strb	r2, [r3, #0]
            break;
2000035c:	e00f      	b.n	2000037e <kbdActivate+0x4a>
        case 3:
            *GPIO_D_ODR_HIGH = 0x40;
2000035e:	4b0b      	ldr	r3, [pc, #44]	; (2000038c <kbdActivate+0x58>)
20000360:	2240      	movs	r2, #64	; 0x40
20000362:	701a      	strb	r2, [r3, #0]
            break;
20000364:	e00b      	b.n	2000037e <kbdActivate+0x4a>
        case 4:
            *GPIO_D_ODR_HIGH = 0x80;
20000366:	4b09      	ldr	r3, [pc, #36]	; (2000038c <kbdActivate+0x58>)
20000368:	2280      	movs	r2, #128	; 0x80
2000036a:	701a      	strb	r2, [r3, #0]
            break;
2000036c:	e007      	b.n	2000037e <kbdActivate+0x4a>
        case 5:
            *GPIO_D_ODR_HIGH = 0xF0;
2000036e:	4b07      	ldr	r3, [pc, #28]	; (2000038c <kbdActivate+0x58>)
20000370:	22f0      	movs	r2, #240	; 0xf0
20000372:	701a      	strb	r2, [r3, #0]
            break;
20000374:	e003      	b.n	2000037e <kbdActivate+0x4a>
        case 0:
            *GPIO_D_ODR_HIGH = 0x00;
20000376:	4b05      	ldr	r3, [pc, #20]	; (2000038c <kbdActivate+0x58>)
20000378:	2200      	movs	r2, #0
2000037a:	701a      	strb	r2, [r3, #0]
            break;
2000037c:	46c0      	nop			; (mov r8, r8)
    }
}
2000037e:	46c0      	nop			; (mov r8, r8)
20000380:	46bd      	mov	sp, r7
20000382:	b002      	add	sp, #8
20000384:	bd80      	pop	{r7, pc}
20000386:	46c0      	nop			; (mov r8, r8)
20000388:	20001dc4 	andcs	r1, r0, r4, asr #27
2000038c:	40020c15 	andmi	r0, r2, r5, lsl ip

20000390 <keyb>:

unsigned char keyb(void) {
20000390:	b590      	push	{r4, r7, lr}
20000392:	b087      	sub	sp, #28
20000394:	af00      	add	r7, sp, #0
    unsigned char key[] = {1, 2, 3, 0xA, 4, 5, 6, 0xB, 7, 8, 9, 0xC, 0xE, 0, 0xF, 0xD};
20000396:	003b      	movs	r3, r7
20000398:	4a16      	ldr	r2, [pc, #88]	; (200003f4 <keyb+0x64>)
2000039a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000039c:	c313      	stmia	r3!, {r0, r1, r4}
2000039e:	6812      	ldr	r2, [r2, #0]
200003a0:	601a      	str	r2, [r3, #0]
    int row, col;
    for (row = 1; row <= 4; row++) {
200003a2:	2301      	movs	r3, #1
200003a4:	617b      	str	r3, [r7, #20]
200003a6:	e019      	b.n	200003dc <keyb+0x4c>
        kbdActivate(row);
200003a8:	697b      	ldr	r3, [r7, #20]
200003aa:	0018      	movs	r0, r3
200003ac:	f7ff ffc2 	bl	20000334 <kbdActivate>
        if ((col = kbdGetCol())) {
200003b0:	f7ff ff96 	bl	200002e0 <kbdGetCol>
200003b4:	0003      	movs	r3, r0
200003b6:	613b      	str	r3, [r7, #16]
200003b8:	693b      	ldr	r3, [r7, #16]
200003ba:	2b00      	cmp	r3, #0
200003bc:	d00b      	beq.n	200003d6 <keyb+0x46>
            kbdActivate(0);
200003be:	2000      	movs	r0, #0
200003c0:	f7ff ffb8 	bl	20000334 <kbdActivate>
            return key[4 * (row - 1) + (col - 1)];
200003c4:	697b      	ldr	r3, [r7, #20]
200003c6:	3b01      	subs	r3, #1
200003c8:	009a      	lsls	r2, r3, #2
200003ca:	693b      	ldr	r3, [r7, #16]
200003cc:	3b01      	subs	r3, #1
200003ce:	18d3      	adds	r3, r2, r3
200003d0:	003a      	movs	r2, r7
200003d2:	5cd3      	ldrb	r3, [r2, r3]
200003d4:	e009      	b.n	200003ea <keyb+0x5a>
    for (row = 1; row <= 4; row++) {
200003d6:	697b      	ldr	r3, [r7, #20]
200003d8:	3301      	adds	r3, #1
200003da:	617b      	str	r3, [r7, #20]
200003dc:	697b      	ldr	r3, [r7, #20]
200003de:	2b04      	cmp	r3, #4
200003e0:	dde2      	ble.n	200003a8 <keyb+0x18>
        }
    }
    kbdActivate(0);
200003e2:	2000      	movs	r0, #0
200003e4:	f7ff ffa6 	bl	20000334 <kbdActivate>
    return 0xFF;
200003e8:	23ff      	movs	r3, #255	; 0xff
}
200003ea:	0018      	movs	r0, r3
200003ec:	46bd      	mov	sp, r7
200003ee:	b007      	add	sp, #28
200003f0:	bd90      	pop	{r4, r7, pc}
200003f2:	46c0      	nop			; (mov r8, r8)
200003f4:	20001ddc 	ldrdcs	r1, [r0], -ip

200003f8 <out7seg>:

void out7seg(unsigned char c) {
200003f8:	b5b0      	push	{r4, r5, r7, lr}
200003fa:	b086      	sub	sp, #24
200003fc:	af00      	add	r7, sp, #0
200003fe:	0002      	movs	r2, r0
20000400:	1dfb      	adds	r3, r7, #7
20000402:	701a      	strb	r2, [r3, #0]
    if (c > 16) kbdActivate(0);
20000404:	1dfb      	adds	r3, r7, #7
20000406:	781b      	ldrb	r3, [r3, #0]
20000408:	2b10      	cmp	r3, #16
2000040a:	d902      	bls.n	20000412 <out7seg+0x1a>
2000040c:	2000      	movs	r0, #0
2000040e:	f7ff ff91 	bl	20000334 <kbdActivate>
    unsigned char segCodes[] = {0x3F, 0x6, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x7, 0x7F, 0x67, 0x77, 0x7C, 0x39, 0x5E, 0x79,
20000412:	2008      	movs	r0, #8
20000414:	183b      	adds	r3, r7, r0
20000416:	4a07      	ldr	r2, [pc, #28]	; (20000434 <out7seg+0x3c>)
20000418:	ca32      	ldmia	r2!, {r1, r4, r5}
2000041a:	c332      	stmia	r3!, {r1, r4, r5}
2000041c:	6812      	ldr	r2, [r2, #0]
2000041e:	601a      	str	r2, [r3, #0]
                                0x71};
    *GPIO_D_ODR_LOW = segCodes[c];
20000420:	1dfb      	adds	r3, r7, #7
20000422:	781b      	ldrb	r3, [r3, #0]
20000424:	4904      	ldr	r1, [pc, #16]	; (20000438 <out7seg+0x40>)
20000426:	183a      	adds	r2, r7, r0
20000428:	5cd3      	ldrb	r3, [r2, r3]
2000042a:	700b      	strb	r3, [r1, #0]

}
2000042c:	46c0      	nop			; (mov r8, r8)
2000042e:	46bd      	mov	sp, r7
20000430:	b006      	add	sp, #24
20000432:	bdb0      	pop	{r4, r5, r7, pc}
20000434:	20001dec 	andcs	r1, r0, ip, ror #27
20000438:	40020c14 	andmi	r0, r2, r4, lsl ip

2000043c <keyb_enhanced>:

unsigned char keyb_enhanced(void){
2000043c:	b590      	push	{r4, r7, lr}
2000043e:	b083      	sub	sp, #12
20000440:	af00      	add	r7, sp, #0

	if ( ts_state ){
20000442:	4b16      	ldr	r3, [pc, #88]	; (2000049c <keyb_enhanced+0x60>)
20000444:	681b      	ldr	r3, [r3, #0]
20000446:	2b00      	cmp	r3, #0
20000448:	d00f      	beq.n	2000046a <keyb_enhanced+0x2e>
		kbdActivate(5);
2000044a:	2005      	movs	r0, #5
2000044c:	f7ff ff72 	bl	20000334 <kbdActivate>
		if( kbdGetCol() ) ts_state = 1;
20000450:	f7ff ff46 	bl	200002e0 <kbdGetCol>
20000454:	1e03      	subs	r3, r0, #0
20000456:	d003      	beq.n	20000460 <keyb_enhanced+0x24>
20000458:	4b10      	ldr	r3, [pc, #64]	; (2000049c <keyb_enhanced+0x60>)
2000045a:	2201      	movs	r2, #1
2000045c:	601a      	str	r2, [r3, #0]
2000045e:	e002      	b.n	20000466 <keyb_enhanced+0x2a>
		else ts_state = 0;
20000460:	4b0e      	ldr	r3, [pc, #56]	; (2000049c <keyb_enhanced+0x60>)
20000462:	2200      	movs	r2, #0
20000464:	601a      	str	r2, [r3, #0]
		return 0xFF;
20000466:	23ff      	movs	r3, #255	; 0xff
20000468:	e014      	b.n	20000494 <keyb_enhanced+0x58>
	}
	
	
	if( !ts_state ){
2000046a:	4b0c      	ldr	r3, [pc, #48]	; (2000049c <keyb_enhanced+0x60>)
2000046c:	681b      	ldr	r3, [r3, #0]
2000046e:	2b00      	cmp	r3, #0
20000470:	d110      	bne.n	20000494 <keyb_enhanced+0x58>
		char c = keyb();
20000472:	1dfc      	adds	r4, r7, #7
20000474:	f7ff ff8c 	bl	20000390 <keyb>
20000478:	0003      	movs	r3, r0
2000047a:	7023      	strb	r3, [r4, #0]
		if(c != keyb_state){
2000047c:	4b08      	ldr	r3, [pc, #32]	; (200004a0 <keyb_enhanced+0x64>)
2000047e:	781b      	ldrb	r3, [r3, #0]
20000480:	1dfa      	adds	r2, r7, #7
20000482:	7812      	ldrb	r2, [r2, #0]
20000484:	429a      	cmp	r2, r3
20000486:	d005      	beq.n	20000494 <keyb_enhanced+0x58>
			ts_state = 1;
20000488:	4b04      	ldr	r3, [pc, #16]	; (2000049c <keyb_enhanced+0x60>)
2000048a:	2201      	movs	r2, #1
2000048c:	601a      	str	r2, [r3, #0]
			return c; 
2000048e:	1dfb      	adds	r3, r7, #7
20000490:	781b      	ldrb	r3, [r3, #0]
20000492:	e7ff      	b.n	20000494 <keyb_enhanced+0x58>
		}
	}
} 
20000494:	0018      	movs	r0, r3
20000496:	46bd      	mov	sp, r7
20000498:	b003      	add	sp, #12
2000049a:	bd90      	pop	{r4, r7, pc}
2000049c:	20001e08 	andcs	r1, r0, r8, lsl #28
200004a0:	20000ec4 	andcs	r0, r0, r4, asr #29

200004a4 <delay_250ns>:

void delay_250ns(void){
200004a4:	b580      	push	{r7, lr}
200004a6:	af00      	add	r7, sp, #0
    *STK_CTRL = 0;
200004a8:	4b0c      	ldr	r3, [pc, #48]	; (200004dc <delay_250ns+0x38>)
200004aa:	2200      	movs	r2, #0
200004ac:	601a      	str	r2, [r3, #0]
    *STK_LOAD = ((168/4) - 1);
200004ae:	4b0c      	ldr	r3, [pc, #48]	; (200004e0 <delay_250ns+0x3c>)
200004b0:	2229      	movs	r2, #41	; 0x29
200004b2:	601a      	str	r2, [r3, #0]
    *STK_VAL = 0;
200004b4:	4b0b      	ldr	r3, [pc, #44]	; (200004e4 <delay_250ns+0x40>)
200004b6:	2200      	movs	r2, #0
200004b8:	601a      	str	r2, [r3, #0]
    *STK_CTRL = 5;
200004ba:	4b08      	ldr	r3, [pc, #32]	; (200004dc <delay_250ns+0x38>)
200004bc:	2205      	movs	r2, #5
200004be:	601a      	str	r2, [r3, #0]
    while( (*STK_CTRL & 0x10000) == 0); // Väntar tills statusbiten är lika med 0 innan den fortsätter då det innebär att nedräkningen är färdig.
200004c0:	46c0      	nop			; (mov r8, r8)
200004c2:	4b06      	ldr	r3, [pc, #24]	; (200004dc <delay_250ns+0x38>)
200004c4:	681a      	ldr	r2, [r3, #0]
200004c6:	2380      	movs	r3, #128	; 0x80
200004c8:	025b      	lsls	r3, r3, #9
200004ca:	4013      	ands	r3, r2
200004cc:	d0f9      	beq.n	200004c2 <delay_250ns+0x1e>
    *STK_CTRL = 0;
200004ce:	4b03      	ldr	r3, [pc, #12]	; (200004dc <delay_250ns+0x38>)
200004d0:	2200      	movs	r2, #0
200004d2:	601a      	str	r2, [r3, #0]
}
200004d4:	46c0      	nop			; (mov r8, r8)
200004d6:	46bd      	mov	sp, r7
200004d8:	bd80      	pop	{r7, pc}
200004da:	46c0      	nop			; (mov r8, r8)
200004dc:	e000e010 	and	lr, r0, r0, lsl r0
200004e0:	e000e014 	and	lr, r0, r4, lsl r0
200004e4:	e000e018 	and	lr, r0, r8, lsl r0

200004e8 <delay_micro>:

void delay_micro(unsigned int us){
200004e8:	b580      	push	{r7, lr}
200004ea:	b082      	sub	sp, #8
200004ec:	af00      	add	r7, sp, #0
200004ee:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    us = us / 1000;
200004f0:	687b      	ldr	r3, [r7, #4]
200004f2:	22fa      	movs	r2, #250	; 0xfa
200004f4:	0091      	lsls	r1, r2, #2
200004f6:	0018      	movs	r0, r3
200004f8:	f000 fb6e 	bl	20000bd8 <__udivsi3>
200004fc:	0003      	movs	r3, r0
200004fe:	607b      	str	r3, [r7, #4]
    us++;
20000500:	687b      	ldr	r3, [r7, #4]
20000502:	3301      	adds	r3, #1
20000504:	607b      	str	r3, [r7, #4]
#endif 
    while( us > 0 ){
20000506:	e00a      	b.n	2000051e <delay_micro+0x36>
        delay_250ns();
20000508:	f7ff ffcc 	bl	200004a4 <delay_250ns>
        delay_250ns();
2000050c:	f7ff ffca 	bl	200004a4 <delay_250ns>
        delay_250ns();
20000510:	f7ff ffc8 	bl	200004a4 <delay_250ns>
        delay_250ns();
20000514:	f7ff ffc6 	bl	200004a4 <delay_250ns>
        us--;
20000518:	687b      	ldr	r3, [r7, #4]
2000051a:	3b01      	subs	r3, #1
2000051c:	607b      	str	r3, [r7, #4]
    while( us > 0 ){
2000051e:	687b      	ldr	r3, [r7, #4]
20000520:	2b00      	cmp	r3, #0
20000522:	d1f1      	bne.n	20000508 <delay_micro+0x20>
    }
}
20000524:	46c0      	nop			; (mov r8, r8)
20000526:	46c0      	nop			; (mov r8, r8)
20000528:	46bd      	mov	sp, r7
2000052a:	b002      	add	sp, #8
2000052c:	bd80      	pop	{r7, pc}

2000052e <delay_milli>:

void delay_milli(unsigned int ms){
2000052e:	b580      	push	{r7, lr}
20000530:	b082      	sub	sp, #8
20000532:	af00      	add	r7, sp, #0
20000534:	6078      	str	r0, [r7, #4]
#ifdef SIMULATOR
    ms /= 1000;
20000536:	687b      	ldr	r3, [r7, #4]
20000538:	22fa      	movs	r2, #250	; 0xfa
2000053a:	0091      	lsls	r1, r2, #2
2000053c:	0018      	movs	r0, r3
2000053e:	f000 fb4b 	bl	20000bd8 <__udivsi3>
20000542:	0003      	movs	r3, r0
20000544:	607b      	str	r3, [r7, #4]
    ms++;
20000546:	687b      	ldr	r3, [r7, #4]
20000548:	3301      	adds	r3, #1
2000054a:	607b      	str	r3, [r7, #4]
#endif
    while(ms > 0){
2000054c:	e007      	b.n	2000055e <delay_milli+0x30>
        delay_micro(1000);
2000054e:	23fa      	movs	r3, #250	; 0xfa
20000550:	009b      	lsls	r3, r3, #2
20000552:	0018      	movs	r0, r3
20000554:	f7ff ffc8 	bl	200004e8 <delay_micro>
        ms--;
20000558:	687b      	ldr	r3, [r7, #4]
2000055a:	3b01      	subs	r3, #1
2000055c:	607b      	str	r3, [r7, #4]
    while(ms > 0){
2000055e:	687b      	ldr	r3, [r7, #4]
20000560:	2b00      	cmp	r3, #0
20000562:	d1f4      	bne.n	2000054e <delay_milli+0x20>
    }
}
20000564:	46c0      	nop			; (mov r8, r8)
20000566:	46c0      	nop			; (mov r8, r8)
20000568:	46bd      	mov	sp, r7
2000056a:	b002      	add	sp, #8
2000056c:	bd80      	pop	{r7, pc}

2000056e <objects_overlap>:
	void (*clear) (struct tObj *);
	int (* move) (struct tObj *);
	void (* set_speed) (struct tObj *, int, int);
} OBJECT, *POBJECT;

int objects_overlap( POBJECT fucking_bird, POBJECT obst_1_t, POBJECT obst_1_b, POBJECT obst_2_t, POBJECT obst_2_b){
2000056e:	b580      	push	{r7, lr}
20000570:	b084      	sub	sp, #16
20000572:	af00      	add	r7, sp, #0
20000574:	60f8      	str	r0, [r7, #12]
20000576:	60b9      	str	r1, [r7, #8]
20000578:	607a      	str	r2, [r7, #4]
2000057a:	603b      	str	r3, [r7, #0]

	if(obst_1_t->posx <= fucking_bird->posx + fucking_bird->geo->sizex - 1 && !(obst_1_t->posx + obst_1_t->geo->sizex < fucking_bird->posx)){
2000057c:	68fb      	ldr	r3, [r7, #12]
2000057e:	68da      	ldr	r2, [r3, #12]
20000580:	68fb      	ldr	r3, [r7, #12]
20000582:	681b      	ldr	r3, [r3, #0]
20000584:	685b      	ldr	r3, [r3, #4]
20000586:	18d2      	adds	r2, r2, r3
20000588:	68bb      	ldr	r3, [r7, #8]
2000058a:	68db      	ldr	r3, [r3, #12]
2000058c:	429a      	cmp	r2, r3
2000058e:	dd24      	ble.n	200005da <objects_overlap+0x6c>
20000590:	68bb      	ldr	r3, [r7, #8]
20000592:	68da      	ldr	r2, [r3, #12]
20000594:	68bb      	ldr	r3, [r7, #8]
20000596:	681b      	ldr	r3, [r3, #0]
20000598:	685b      	ldr	r3, [r3, #4]
2000059a:	18d2      	adds	r2, r2, r3
2000059c:	68fb      	ldr	r3, [r7, #12]
2000059e:	68db      	ldr	r3, [r3, #12]
200005a0:	429a      	cmp	r2, r3
200005a2:	db1a      	blt.n	200005da <objects_overlap+0x6c>
		if(fucking_bird->posy <= obst_1_t->posy + obst_1_t->geo->sizey) return 1;
200005a4:	68fb      	ldr	r3, [r7, #12]
200005a6:	691a      	ldr	r2, [r3, #16]
200005a8:	68bb      	ldr	r3, [r7, #8]
200005aa:	6919      	ldr	r1, [r3, #16]
200005ac:	68bb      	ldr	r3, [r7, #8]
200005ae:	681b      	ldr	r3, [r3, #0]
200005b0:	689b      	ldr	r3, [r3, #8]
200005b2:	18cb      	adds	r3, r1, r3
200005b4:	429a      	cmp	r2, r3
200005b6:	dc01      	bgt.n	200005bc <objects_overlap+0x4e>
200005b8:	2301      	movs	r3, #1
200005ba:	e03e      	b.n	2000063a <objects_overlap+0xcc>
		else if(fucking_bird->posy + fucking_bird->geo->sizey - 3 >= obst_1_b->posy) return 1;
200005bc:	68fb      	ldr	r3, [r7, #12]
200005be:	691a      	ldr	r2, [r3, #16]
200005c0:	68fb      	ldr	r3, [r7, #12]
200005c2:	681b      	ldr	r3, [r3, #0]
200005c4:	689b      	ldr	r3, [r3, #8]
200005c6:	18d3      	adds	r3, r2, r3
200005c8:	1e9a      	subs	r2, r3, #2
200005ca:	687b      	ldr	r3, [r7, #4]
200005cc:	691b      	ldr	r3, [r3, #16]
200005ce:	429a      	cmp	r2, r3
200005d0:	dd01      	ble.n	200005d6 <objects_overlap+0x68>
200005d2:	2301      	movs	r3, #1
200005d4:	e031      	b.n	2000063a <objects_overlap+0xcc>
		else return 0;
200005d6:	2300      	movs	r3, #0
200005d8:	e02f      	b.n	2000063a <objects_overlap+0xcc>
	}
	
	else if(obst_2_t->posx <= fucking_bird->posx + fucking_bird->geo->sizex - 1 && !(obst_2_t->posx + obst_2_t->geo->sizex < fucking_bird->posx)){
200005da:	68fb      	ldr	r3, [r7, #12]
200005dc:	68da      	ldr	r2, [r3, #12]
200005de:	68fb      	ldr	r3, [r7, #12]
200005e0:	681b      	ldr	r3, [r3, #0]
200005e2:	685b      	ldr	r3, [r3, #4]
200005e4:	18d2      	adds	r2, r2, r3
200005e6:	683b      	ldr	r3, [r7, #0]
200005e8:	68db      	ldr	r3, [r3, #12]
200005ea:	429a      	cmp	r2, r3
200005ec:	dd24      	ble.n	20000638 <objects_overlap+0xca>
200005ee:	683b      	ldr	r3, [r7, #0]
200005f0:	68da      	ldr	r2, [r3, #12]
200005f2:	683b      	ldr	r3, [r7, #0]
200005f4:	681b      	ldr	r3, [r3, #0]
200005f6:	685b      	ldr	r3, [r3, #4]
200005f8:	18d2      	adds	r2, r2, r3
200005fa:	68fb      	ldr	r3, [r7, #12]
200005fc:	68db      	ldr	r3, [r3, #12]
200005fe:	429a      	cmp	r2, r3
20000600:	db1a      	blt.n	20000638 <objects_overlap+0xca>
		if(fucking_bird->posy <= obst_2_t->posy + obst_2_t->geo->sizey) return 1;
20000602:	68fb      	ldr	r3, [r7, #12]
20000604:	691a      	ldr	r2, [r3, #16]
20000606:	683b      	ldr	r3, [r7, #0]
20000608:	6919      	ldr	r1, [r3, #16]
2000060a:	683b      	ldr	r3, [r7, #0]
2000060c:	681b      	ldr	r3, [r3, #0]
2000060e:	689b      	ldr	r3, [r3, #8]
20000610:	18cb      	adds	r3, r1, r3
20000612:	429a      	cmp	r2, r3
20000614:	dc01      	bgt.n	2000061a <objects_overlap+0xac>
20000616:	2301      	movs	r3, #1
20000618:	e00f      	b.n	2000063a <objects_overlap+0xcc>
		else if(fucking_bird->posy + fucking_bird->geo->sizey - 3 >= obst_2_b->posy) return 1;  
2000061a:	68fb      	ldr	r3, [r7, #12]
2000061c:	691a      	ldr	r2, [r3, #16]
2000061e:	68fb      	ldr	r3, [r7, #12]
20000620:	681b      	ldr	r3, [r3, #0]
20000622:	689b      	ldr	r3, [r3, #8]
20000624:	18d3      	adds	r3, r2, r3
20000626:	1e9a      	subs	r2, r3, #2
20000628:	69bb      	ldr	r3, [r7, #24]
2000062a:	691b      	ldr	r3, [r3, #16]
2000062c:	429a      	cmp	r2, r3
2000062e:	dd01      	ble.n	20000634 <objects_overlap+0xc6>
20000630:	2301      	movs	r3, #1
20000632:	e002      	b.n	2000063a <objects_overlap+0xcc>
		else return 0;
20000634:	2300      	movs	r3, #0
20000636:	e000      	b.n	2000063a <objects_overlap+0xcc>
	} else return 0; 
20000638:	2300      	movs	r3, #0
}
2000063a:	0018      	movs	r0, r3
2000063c:	46bd      	mov	sp, r7
2000063e:	b004      	add	sp, #16
20000640:	bd80      	pop	{r7, pc}

20000642 <draw_object>:

void draw_object(POBJECT obj){
20000642:	b580      	push	{r7, lr}
20000644:	b084      	sub	sp, #16
20000646:	af00      	add	r7, sp, #0
20000648:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < obj->geo->numpoints; i++){
2000064a:	2300      	movs	r3, #0
2000064c:	60fb      	str	r3, [r7, #12]
2000064e:	e01d      	b.n	2000068c <draw_object+0x4a>
		graphic_pixel_set(obj->geo->px[i].x + obj->posx, obj->geo->px[i].y + obj->posy);
20000650:	687b      	ldr	r3, [r7, #4]
20000652:	681a      	ldr	r2, [r3, #0]
20000654:	68fb      	ldr	r3, [r7, #12]
20000656:	3304      	adds	r3, #4
20000658:	005b      	lsls	r3, r3, #1
2000065a:	18d3      	adds	r3, r2, r3
2000065c:	3304      	adds	r3, #4
2000065e:	781b      	ldrb	r3, [r3, #0]
20000660:	001a      	movs	r2, r3
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	68db      	ldr	r3, [r3, #12]
20000666:	18d0      	adds	r0, r2, r3
20000668:	687b      	ldr	r3, [r7, #4]
2000066a:	681a      	ldr	r2, [r3, #0]
2000066c:	68fb      	ldr	r3, [r7, #12]
2000066e:	3304      	adds	r3, #4
20000670:	005b      	lsls	r3, r3, #1
20000672:	18d3      	adds	r3, r2, r3
20000674:	3305      	adds	r3, #5
20000676:	781b      	ldrb	r3, [r3, #0]
20000678:	001a      	movs	r2, r3
2000067a:	687b      	ldr	r3, [r7, #4]
2000067c:	691b      	ldr	r3, [r3, #16]
2000067e:	18d3      	adds	r3, r2, r3
20000680:	0019      	movs	r1, r3
20000682:	f7ff fccb 	bl	2000001c <graphic_pixel_set>
	for(int i = 0; i < obj->geo->numpoints; i++){
20000686:	68fb      	ldr	r3, [r7, #12]
20000688:	3301      	adds	r3, #1
2000068a:	60fb      	str	r3, [r7, #12]
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	681b      	ldr	r3, [r3, #0]
20000690:	681b      	ldr	r3, [r3, #0]
20000692:	68fa      	ldr	r2, [r7, #12]
20000694:	429a      	cmp	r2, r3
20000696:	dbdb      	blt.n	20000650 <draw_object+0xe>
	}
}
20000698:	46c0      	nop			; (mov r8, r8)
2000069a:	46c0      	nop			; (mov r8, r8)
2000069c:	46bd      	mov	sp, r7
2000069e:	b004      	add	sp, #16
200006a0:	bd80      	pop	{r7, pc}

200006a2 <clear_object>:

void clear_object(POBJECT obj){
200006a2:	b580      	push	{r7, lr}
200006a4:	b084      	sub	sp, #16
200006a6:	af00      	add	r7, sp, #0
200006a8:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < obj->geo->numpoints; i++){
200006aa:	2300      	movs	r3, #0
200006ac:	60fb      	str	r3, [r7, #12]
200006ae:	e01d      	b.n	200006ec <clear_object+0x4a>
		graphic_pixel_clear(obj->geo->px[i].x + obj->posx, obj->geo->px[i].y + obj->posy);
200006b0:	687b      	ldr	r3, [r7, #4]
200006b2:	681a      	ldr	r2, [r3, #0]
200006b4:	68fb      	ldr	r3, [r7, #12]
200006b6:	3304      	adds	r3, #4
200006b8:	005b      	lsls	r3, r3, #1
200006ba:	18d3      	adds	r3, r2, r3
200006bc:	3304      	adds	r3, #4
200006be:	781b      	ldrb	r3, [r3, #0]
200006c0:	001a      	movs	r2, r3
200006c2:	687b      	ldr	r3, [r7, #4]
200006c4:	68db      	ldr	r3, [r3, #12]
200006c6:	18d0      	adds	r0, r2, r3
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	681a      	ldr	r2, [r3, #0]
200006cc:	68fb      	ldr	r3, [r7, #12]
200006ce:	3304      	adds	r3, #4
200006d0:	005b      	lsls	r3, r3, #1
200006d2:	18d3      	adds	r3, r2, r3
200006d4:	3305      	adds	r3, #5
200006d6:	781b      	ldrb	r3, [r3, #0]
200006d8:	001a      	movs	r2, r3
200006da:	687b      	ldr	r3, [r7, #4]
200006dc:	691b      	ldr	r3, [r3, #16]
200006de:	18d3      	adds	r3, r2, r3
200006e0:	0019      	movs	r1, r3
200006e2:	f7ff fc9e 	bl	20000022 <graphic_pixel_clear>
	for(int i = 0; i < obj->geo->numpoints; i++){
200006e6:	68fb      	ldr	r3, [r7, #12]
200006e8:	3301      	adds	r3, #1
200006ea:	60fb      	str	r3, [r7, #12]
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	681b      	ldr	r3, [r3, #0]
200006f0:	681b      	ldr	r3, [r3, #0]
200006f2:	68fa      	ldr	r2, [r7, #12]
200006f4:	429a      	cmp	r2, r3
200006f6:	dbdb      	blt.n	200006b0 <clear_object+0xe>
	}
}
200006f8:	46c0      	nop			; (mov r8, r8)
200006fa:	46c0      	nop			; (mov r8, r8)
200006fc:	46bd      	mov	sp, r7
200006fe:	b004      	add	sp, #16
20000700:	bd80      	pop	{r7, pc}

20000702 <move_object>:

void move_object(POBJECT obj){
20000702:	b580      	push	{r7, lr}
20000704:	b082      	sub	sp, #8
20000706:	af00      	add	r7, sp, #0
20000708:	6078      	str	r0, [r7, #4]
	clear_object(obj);
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	0018      	movs	r0, r3
2000070e:	f7ff ffc8 	bl	200006a2 <clear_object>
	obj->posx += obj->dirx;
20000712:	687b      	ldr	r3, [r7, #4]
20000714:	68da      	ldr	r2, [r3, #12]
20000716:	687b      	ldr	r3, [r7, #4]
20000718:	685b      	ldr	r3, [r3, #4]
2000071a:	18d2      	adds	r2, r2, r3
2000071c:	687b      	ldr	r3, [r7, #4]
2000071e:	60da      	str	r2, [r3, #12]
	obj->posy += obj->diry;
20000720:	687b      	ldr	r3, [r7, #4]
20000722:	691a      	ldr	r2, [r3, #16]
20000724:	687b      	ldr	r3, [r7, #4]
20000726:	689b      	ldr	r3, [r3, #8]
20000728:	18d2      	adds	r2, r2, r3
2000072a:	687b      	ldr	r3, [r7, #4]
2000072c:	611a      	str	r2, [r3, #16]
	draw_object(obj);
2000072e:	687b      	ldr	r3, [r7, #4]
20000730:	0018      	movs	r0, r3
20000732:	f7ff ff86 	bl	20000642 <draw_object>
}
20000736:	46c0      	nop			; (mov r8, r8)
20000738:	46bd      	mov	sp, r7
2000073a:	b002      	add	sp, #8
2000073c:	bd80      	pop	{r7, pc}

2000073e <set_object_speed>:

void set_object_speed(POBJECT obj, int x, int y){
2000073e:	b580      	push	{r7, lr}
20000740:	b084      	sub	sp, #16
20000742:	af00      	add	r7, sp, #0
20000744:	60f8      	str	r0, [r7, #12]
20000746:	60b9      	str	r1, [r7, #8]
20000748:	607a      	str	r2, [r7, #4]
	obj->dirx = x;
2000074a:	68fb      	ldr	r3, [r7, #12]
2000074c:	68ba      	ldr	r2, [r7, #8]
2000074e:	605a      	str	r2, [r3, #4]
	obj->diry = y;
20000750:	68fb      	ldr	r3, [r7, #12]
20000752:	687a      	ldr	r2, [r7, #4]
20000754:	609a      	str	r2, [r3, #8]
}
20000756:	46c0      	nop			; (mov r8, r8)
20000758:	46bd      	mov	sp, r7
2000075a:	b004      	add	sp, #16
2000075c:	bd80      	pop	{r7, pc}

2000075e <timer6_init>:

void timer6_init(){
2000075e:	b580      	push	{r7, lr}
20000760:	af00      	add	r7, sp, #0
	*TIM6_CR1 &= ~CEN;
20000762:	4b0b      	ldr	r3, [pc, #44]	; (20000790 <timer6_init+0x32>)
20000764:	881b      	ldrh	r3, [r3, #0]
20000766:	b29b      	uxth	r3, r3
20000768:	4a09      	ldr	r2, [pc, #36]	; (20000790 <timer6_init+0x32>)
2000076a:	2101      	movs	r1, #1
2000076c:	438b      	bics	r3, r1
2000076e:	b29b      	uxth	r3, r3
20000770:	8013      	strh	r3, [r2, #0]
	*TIM6_ARR = 0xFFFF;
20000772:	4b08      	ldr	r3, [pc, #32]	; (20000794 <timer6_init+0x36>)
20000774:	2201      	movs	r2, #1
20000776:	4252      	negs	r2, r2
20000778:	801a      	strh	r2, [r3, #0]
	*TIM6_CR1 |= (CEN | UDIS);
2000077a:	4b05      	ldr	r3, [pc, #20]	; (20000790 <timer6_init+0x32>)
2000077c:	881b      	ldrh	r3, [r3, #0]
2000077e:	b29b      	uxth	r3, r3
20000780:	4a03      	ldr	r2, [pc, #12]	; (20000790 <timer6_init+0x32>)
20000782:	2103      	movs	r1, #3
20000784:	430b      	orrs	r3, r1
20000786:	b29b      	uxth	r3, r3
20000788:	8013      	strh	r3, [r2, #0]
	
}
2000078a:	46c0      	nop			; (mov r8, r8)
2000078c:	46bd      	mov	sp, r7
2000078e:	bd80      	pop	{r7, pc}
20000790:	40001000 	andmi	r1, r0, r0
20000794:	4000102c 	andmi	r1, r0, ip, lsr #32

20000798 <move_obstacles>:

void move_obstacles(POBJECT o1t, POBJECT o1b, POBJECT o2t, POBJECT o2b){
20000798:	b580      	push	{r7, lr}
2000079a:	b084      	sub	sp, #16
2000079c:	af00      	add	r7, sp, #0
2000079e:	60f8      	str	r0, [r7, #12]
200007a0:	60b9      	str	r1, [r7, #8]
200007a2:	607a      	str	r2, [r7, #4]
200007a4:	603b      	str	r3, [r7, #0]
	o1t->move(o1t);
200007a6:	68fb      	ldr	r3, [r7, #12]
200007a8:	69db      	ldr	r3, [r3, #28]
200007aa:	68fa      	ldr	r2, [r7, #12]
200007ac:	0010      	movs	r0, r2
200007ae:	4798      	blx	r3
	o1b->move(o1b);
200007b0:	68bb      	ldr	r3, [r7, #8]
200007b2:	69db      	ldr	r3, [r3, #28]
200007b4:	68ba      	ldr	r2, [r7, #8]
200007b6:	0010      	movs	r0, r2
200007b8:	4798      	blx	r3
	o2t->move(o2t);
200007ba:	687b      	ldr	r3, [r7, #4]
200007bc:	69db      	ldr	r3, [r3, #28]
200007be:	687a      	ldr	r2, [r7, #4]
200007c0:	0010      	movs	r0, r2
200007c2:	4798      	blx	r3
	o1b->move(o2b);
200007c4:	68bb      	ldr	r3, [r7, #8]
200007c6:	69db      	ldr	r3, [r3, #28]
200007c8:	683a      	ldr	r2, [r7, #0]
200007ca:	0010      	movs	r0, r2
200007cc:	4798      	blx	r3
}
200007ce:	46c0      	nop			; (mov r8, r8)
200007d0:	46bd      	mov	sp, r7
200007d2:	b004      	add	sp, #16
200007d4:	bd80      	pop	{r7, pc}

200007d6 <set_obstacle_speed>:

void set_obstacle_speed(int x, int y, POBJECT o1t, POBJECT o1b, POBJECT o2t, POBJECT o2b){
200007d6:	b580      	push	{r7, lr}
200007d8:	b084      	sub	sp, #16
200007da:	af00      	add	r7, sp, #0
200007dc:	60f8      	str	r0, [r7, #12]
200007de:	60b9      	str	r1, [r7, #8]
200007e0:	607a      	str	r2, [r7, #4]
200007e2:	603b      	str	r3, [r7, #0]
	o1t->set_speed(o1t, x,y);
200007e4:	687b      	ldr	r3, [r7, #4]
200007e6:	6a1b      	ldr	r3, [r3, #32]
200007e8:	68ba      	ldr	r2, [r7, #8]
200007ea:	68f9      	ldr	r1, [r7, #12]
200007ec:	6878      	ldr	r0, [r7, #4]
200007ee:	4798      	blx	r3
	o1b->set_speed(o1b, x,y);
200007f0:	683b      	ldr	r3, [r7, #0]
200007f2:	6a1b      	ldr	r3, [r3, #32]
200007f4:	68ba      	ldr	r2, [r7, #8]
200007f6:	68f9      	ldr	r1, [r7, #12]
200007f8:	6838      	ldr	r0, [r7, #0]
200007fa:	4798      	blx	r3
	o2t->set_speed(o2t, x,y);
200007fc:	69bb      	ldr	r3, [r7, #24]
200007fe:	6a1b      	ldr	r3, [r3, #32]
20000800:	68ba      	ldr	r2, [r7, #8]
20000802:	68f9      	ldr	r1, [r7, #12]
20000804:	69b8      	ldr	r0, [r7, #24]
20000806:	4798      	blx	r3
	o2b->set_speed(o2b, x,y);
20000808:	69fb      	ldr	r3, [r7, #28]
2000080a:	6a1b      	ldr	r3, [r3, #32]
2000080c:	68ba      	ldr	r2, [r7, #8]
2000080e:	68f9      	ldr	r1, [r7, #12]
20000810:	69f8      	ldr	r0, [r7, #28]
20000812:	4798      	blx	r3
}
20000814:	46c0      	nop			; (mov r8, r8)
20000816:	46bd      	mov	sp, r7
20000818:	b004      	add	sp, #16
2000081a:	bd80      	pop	{r7, pc}

2000081c <reset_obj_position>:
	clear_object,
	move_object,
	set_object_speed
};

void reset_obj_position(POBJECT ot1, POBJECT ob1, POBJECT ot2, POBJECT ob2, POBJECT bs, POBJECT bf){
2000081c:	b580      	push	{r7, lr}
2000081e:	b084      	sub	sp, #16
20000820:	af00      	add	r7, sp, #0
20000822:	60f8      	str	r0, [r7, #12]
20000824:	60b9      	str	r1, [r7, #8]
20000826:	607a      	str	r2, [r7, #4]
20000828:	603b      	str	r3, [r7, #0]
	ot1->posx = 60;
2000082a:	68fb      	ldr	r3, [r7, #12]
2000082c:	223c      	movs	r2, #60	; 0x3c
2000082e:	60da      	str	r2, [r3, #12]
	ot1->posy = -29;
20000830:	68fb      	ldr	r3, [r7, #12]
20000832:	221d      	movs	r2, #29
20000834:	4252      	negs	r2, r2
20000836:	611a      	str	r2, [r3, #16]
	ob1->posx = 60;
20000838:	68bb      	ldr	r3, [r7, #8]
2000083a:	223c      	movs	r2, #60	; 0x3c
2000083c:	60da      	str	r2, [r3, #12]
	ob1->posy = 43;
2000083e:	68bb      	ldr	r3, [r7, #8]
20000840:	222b      	movs	r2, #43	; 0x2b
20000842:	611a      	str	r2, [r3, #16]
	
	ot2->posx = 130;
20000844:	687b      	ldr	r3, [r7, #4]
20000846:	2282      	movs	r2, #130	; 0x82
20000848:	60da      	str	r2, [r3, #12]
	ot2->posy = -29;
2000084a:	687b      	ldr	r3, [r7, #4]
2000084c:	221d      	movs	r2, #29
2000084e:	4252      	negs	r2, r2
20000850:	611a      	str	r2, [r3, #16]
	ob2->posx = 130;
20000852:	683b      	ldr	r3, [r7, #0]
20000854:	2282      	movs	r2, #130	; 0x82
20000856:	60da      	str	r2, [r3, #12]
	ob2->posy = 43;
20000858:	683b      	ldr	r3, [r7, #0]
2000085a:	222b      	movs	r2, #43	; 0x2b
2000085c:	611a      	str	r2, [r3, #16]
	
	bs->posy = 30;
2000085e:	69bb      	ldr	r3, [r7, #24]
20000860:	221e      	movs	r2, #30
20000862:	611a      	str	r2, [r3, #16]
	bf->posy = 30;
20000864:	69fb      	ldr	r3, [r7, #28]
20000866:	221e      	movs	r2, #30
20000868:	611a      	str	r2, [r3, #16]
}
2000086a:	46c0      	nop			; (mov r8, r8)
2000086c:	46bd      	mov	sp, r7
2000086e:	b004      	add	sp, #16
20000870:	bd80      	pop	{r7, pc}

20000872 <main>:

void main(void){
20000872:	b5b0      	push	{r4, r5, r7, lr}
20000874:	b088      	sub	sp, #32
20000876:	af02      	add	r7, sp, #8
	init_app();
20000878:	f7ff fbd6 	bl	20000028 <init_app>
	graphic_initialize(); //initierar port E enligt boken
2000087c:	f7ff fbc8 	bl	20000010 <graphic_initialize>
	graphic_clear_screen();
20000880:	f7ff fbc9 	bl	20000016 <graphic_clear_screen>
	timer6_init();
20000884:	f7ff ff6b 	bl	2000075e <timer6_init>
	ascii_init();
20000888:	f7ff fce1 	bl	2000024e <ascii_init>
	
	char *s;
	char counter[] = "Points: ";
2000088c:	003b      	movs	r3, r7
2000088e:	4ac7      	ldr	r2, [pc, #796]	; (20000bac <main+0x33a>)
20000890:	ca03      	ldmia	r2!, {r0, r1}
20000892:	c303      	stmia	r3!, {r0, r1}
20000894:	7812      	ldrb	r2, [r2, #0]
20000896:	701a      	strb	r2, [r3, #0]
	
	ascii_gotoxy(1,1);
20000898:	2101      	movs	r1, #1
2000089a:	2001      	movs	r0, #1
2000089c:	f7ff fd04 	bl	200002a8 <ascii_gotoxy>
	s = counter;
200008a0:	003b      	movs	r3, r7
200008a2:	617b      	str	r3, [r7, #20]
	
	while(*s){
200008a4:	e006      	b.n	200008b4 <main+0x42>
		ascii_write_char(*s++);
200008a6:	697b      	ldr	r3, [r7, #20]
200008a8:	1c5a      	adds	r2, r3, #1
200008aa:	617a      	str	r2, [r7, #20]
200008ac:	781b      	ldrb	r3, [r3, #0]
200008ae:	0018      	movs	r0, r3
200008b0:	f7ff fce1 	bl	20000276 <ascii_write_char>
	while(*s){
200008b4:	697b      	ldr	r3, [r7, #20]
200008b6:	781b      	ldrb	r3, [r3, #0]
200008b8:	2b00      	cmp	r3, #0
200008ba:	d1f4      	bne.n	200008a6 <main+0x34>
	}
	
	short random = 0;
200008bc:	230e      	movs	r3, #14
200008be:	18fb      	adds	r3, r7, r3
200008c0:	2200      	movs	r2, #0
200008c2:	801a      	strh	r2, [r3, #0]
	static POBJECT obstacle_top_2 = &obstacle_top_obj_2;
	static POBJECT obstacle_bottom_2 = &obstacle_bottom_obj_2;
	static POBJECT bird = &bird_soar_obj;
	static POBJECT start_screen = &starting_screen_obj;
	
	short the_y_pos_bird = bird->posy; 
200008c4:	4bba      	ldr	r3, [pc, #744]	; (20000bb0 <main+0x33e>)
200008c6:	681b      	ldr	r3, [r3, #0]
200008c8:	691a      	ldr	r2, [r3, #16]
200008ca:	230c      	movs	r3, #12
200008cc:	18fb      	adds	r3, r7, r3
200008ce:	801a      	strh	r2, [r3, #0]
	short the_y_speed_bird = bird->diry;
200008d0:	4bb7      	ldr	r3, [pc, #732]	; (20000bb0 <main+0x33e>)
200008d2:	681b      	ldr	r3, [r3, #0]
200008d4:	689a      	ldr	r2, [r3, #8]
200008d6:	230a      	movs	r3, #10
200008d8:	18fb      	adds	r3, r7, r3
200008da:	801a      	strh	r2, [r3, #0]
	
	set_obstacle_speed(-6, 0, obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2);
200008dc:	4bb5      	ldr	r3, [pc, #724]	; (20000bb4 <main+0x342>)
200008de:	6819      	ldr	r1, [r3, #0]
200008e0:	4bb5      	ldr	r3, [pc, #724]	; (20000bb8 <main+0x346>)
200008e2:	681c      	ldr	r4, [r3, #0]
200008e4:	4bb5      	ldr	r3, [pc, #724]	; (20000bbc <main+0x34a>)
200008e6:	681a      	ldr	r2, [r3, #0]
200008e8:	4bb5      	ldr	r3, [pc, #724]	; (20000bc0 <main+0x34e>)
200008ea:	681b      	ldr	r3, [r3, #0]
200008ec:	2006      	movs	r0, #6
200008ee:	4240      	negs	r0, r0
200008f0:	9301      	str	r3, [sp, #4]
200008f2:	9200      	str	r2, [sp, #0]
200008f4:	0023      	movs	r3, r4
200008f6:	000a      	movs	r2, r1
200008f8:	2100      	movs	r1, #0
200008fa:	f7ff ff6c 	bl	200007d6 <set_obstacle_speed>

	while(1){
		points = 0; 
200008fe:	2300      	movs	r3, #0
20000900:	613b      	str	r3, [r7, #16]
		graphic_clear_screen();
20000902:	f7ff fb88 	bl	20000016 <graphic_clear_screen>
		reset_obj_position(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2, &bird_soar_obj, &bird_flap_obj);
20000906:	4bab      	ldr	r3, [pc, #684]	; (20000bb4 <main+0x342>)
20000908:	6818      	ldr	r0, [r3, #0]
2000090a:	4bab      	ldr	r3, [pc, #684]	; (20000bb8 <main+0x346>)
2000090c:	6819      	ldr	r1, [r3, #0]
2000090e:	4bab      	ldr	r3, [pc, #684]	; (20000bbc <main+0x34a>)
20000910:	681a      	ldr	r2, [r3, #0]
20000912:	4bab      	ldr	r3, [pc, #684]	; (20000bc0 <main+0x34e>)
20000914:	681c      	ldr	r4, [r3, #0]
20000916:	4bab      	ldr	r3, [pc, #684]	; (20000bc4 <main+0x352>)
20000918:	9301      	str	r3, [sp, #4]
2000091a:	4bab      	ldr	r3, [pc, #684]	; (20000bc8 <main+0x356>)
2000091c:	9300      	str	r3, [sp, #0]
2000091e:	0023      	movs	r3, r4
20000920:	f7ff ff7c 	bl	2000081c <reset_obj_position>
		start_screen->draw(start_screen);
20000924:	4ba9      	ldr	r3, [pc, #676]	; (20000bcc <main+0x35a>)
20000926:	681b      	ldr	r3, [r3, #0]
20000928:	695a      	ldr	r2, [r3, #20]
2000092a:	4ba8      	ldr	r3, [pc, #672]	; (20000bcc <main+0x35a>)
2000092c:	681b      	ldr	r3, [r3, #0]
2000092e:	0018      	movs	r0, r3
20000930:	4790      	blx	r2
		while(keyb_enhanced() != 5){
20000932:	e021      	b.n	20000978 <main+0x106>
			bird = &bird_soar_obj;
20000934:	4b9e      	ldr	r3, [pc, #632]	; (20000bb0 <main+0x33e>)
20000936:	4aa4      	ldr	r2, [pc, #656]	; (20000bc8 <main+0x356>)
20000938:	601a      	str	r2, [r3, #0]
			draw_object(bird);
2000093a:	4b9d      	ldr	r3, [pc, #628]	; (20000bb0 <main+0x33e>)
2000093c:	681b      	ldr	r3, [r3, #0]
2000093e:	0018      	movs	r0, r3
20000940:	f7ff fe7f 	bl	20000642 <draw_object>
			delay_milli(50000);
20000944:	4ba2      	ldr	r3, [pc, #648]	; (20000bd0 <main+0x35e>)
20000946:	0018      	movs	r0, r3
20000948:	f7ff fdf1 	bl	2000052e <delay_milli>
			clear_object(bird);
2000094c:	4b98      	ldr	r3, [pc, #608]	; (20000bb0 <main+0x33e>)
2000094e:	681b      	ldr	r3, [r3, #0]
20000950:	0018      	movs	r0, r3
20000952:	f7ff fea6 	bl	200006a2 <clear_object>
			bird = &bird_flap_obj;
20000956:	4b96      	ldr	r3, [pc, #600]	; (20000bb0 <main+0x33e>)
20000958:	4a9a      	ldr	r2, [pc, #616]	; (20000bc4 <main+0x352>)
2000095a:	601a      	str	r2, [r3, #0]
			draw_object(bird);
2000095c:	4b94      	ldr	r3, [pc, #592]	; (20000bb0 <main+0x33e>)
2000095e:	681b      	ldr	r3, [r3, #0]
20000960:	0018      	movs	r0, r3
20000962:	f7ff fe6e 	bl	20000642 <draw_object>
			delay_milli(50000);
20000966:	4b9a      	ldr	r3, [pc, #616]	; (20000bd0 <main+0x35e>)
20000968:	0018      	movs	r0, r3
2000096a:	f7ff fde0 	bl	2000052e <delay_milli>
			clear_object(bird);
2000096e:	4b90      	ldr	r3, [pc, #576]	; (20000bb0 <main+0x33e>)
20000970:	681b      	ldr	r3, [r3, #0]
20000972:	0018      	movs	r0, r3
20000974:	f7ff fe95 	bl	200006a2 <clear_object>
		while(keyb_enhanced() != 5){
20000978:	f7ff fd60 	bl	2000043c <keyb_enhanced>
2000097c:	0003      	movs	r3, r0
2000097e:	2b05      	cmp	r3, #5
20000980:	d1d8      	bne.n	20000934 <main+0xc2>
		}
		graphic_clear_screen();
20000982:	f7ff fb48 	bl	20000016 <graphic_clear_screen>
		while(1){
			bird->move(bird);
20000986:	4b8a      	ldr	r3, [pc, #552]	; (20000bb0 <main+0x33e>)
20000988:	681b      	ldr	r3, [r3, #0]
2000098a:	69da      	ldr	r2, [r3, #28]
2000098c:	4b88      	ldr	r3, [pc, #544]	; (20000bb0 <main+0x33e>)
2000098e:	681b      	ldr	r3, [r3, #0]
20000990:	0018      	movs	r0, r3
20000992:	4790      	blx	r2
			delay_milli(50000);
20000994:	4b8e      	ldr	r3, [pc, #568]	; (20000bd0 <main+0x35e>)
20000996:	0018      	movs	r0, r3
20000998:	f7ff fdc9 	bl	2000052e <delay_milli>
			move_obstacles(obstacle_top_1, obstacle_bottom_1, obstacle_top_2, obstacle_bottom_2);
2000099c:	4b85      	ldr	r3, [pc, #532]	; (20000bb4 <main+0x342>)
2000099e:	6818      	ldr	r0, [r3, #0]
200009a0:	4b85      	ldr	r3, [pc, #532]	; (20000bb8 <main+0x346>)
200009a2:	6819      	ldr	r1, [r3, #0]
200009a4:	4b85      	ldr	r3, [pc, #532]	; (20000bbc <main+0x34a>)
200009a6:	681a      	ldr	r2, [r3, #0]
200009a8:	4b85      	ldr	r3, [pc, #532]	; (20000bc0 <main+0x34e>)
200009aa:	681b      	ldr	r3, [r3, #0]
200009ac:	f7ff fef4 	bl	20000798 <move_obstacles>

		
			if(keyb_enhanced() == 2){
200009b0:	f7ff fd44 	bl	2000043c <keyb_enhanced>
200009b4:	0003      	movs	r3, r0
200009b6:	2b02      	cmp	r3, #2
200009b8:	d12f      	bne.n	20000a1a <main+0x1a8>
				the_y_pos_bird = bird->posy;
200009ba:	4b7d      	ldr	r3, [pc, #500]	; (20000bb0 <main+0x33e>)
200009bc:	681b      	ldr	r3, [r3, #0]
200009be:	691a      	ldr	r2, [r3, #16]
200009c0:	240c      	movs	r4, #12
200009c2:	193b      	adds	r3, r7, r4
200009c4:	801a      	strh	r2, [r3, #0]
				the_y_speed_bird = bird->diry;
200009c6:	4b7a      	ldr	r3, [pc, #488]	; (20000bb0 <main+0x33e>)
200009c8:	681b      	ldr	r3, [r3, #0]
200009ca:	689a      	ldr	r2, [r3, #8]
200009cc:	250a      	movs	r5, #10
200009ce:	197b      	adds	r3, r7, r5
200009d0:	801a      	strh	r2, [r3, #0]
				clear_object(bird);
200009d2:	4b77      	ldr	r3, [pc, #476]	; (20000bb0 <main+0x33e>)
200009d4:	681b      	ldr	r3, [r3, #0]
200009d6:	0018      	movs	r0, r3
200009d8:	f7ff fe63 	bl	200006a2 <clear_object>
				bird = &bird_flap_obj;
200009dc:	4b74      	ldr	r3, [pc, #464]	; (20000bb0 <main+0x33e>)
200009de:	4a79      	ldr	r2, [pc, #484]	; (20000bc4 <main+0x352>)
200009e0:	601a      	str	r2, [r3, #0]
				bird->posy = the_y_pos_bird; 
200009e2:	4b73      	ldr	r3, [pc, #460]	; (20000bb0 <main+0x33e>)
200009e4:	681b      	ldr	r3, [r3, #0]
200009e6:	193a      	adds	r2, r7, r4
200009e8:	2100      	movs	r1, #0
200009ea:	5e52      	ldrsh	r2, [r2, r1]
200009ec:	611a      	str	r2, [r3, #16]
				bird->diry = the_y_speed_bird; 
200009ee:	4b70      	ldr	r3, [pc, #448]	; (20000bb0 <main+0x33e>)
200009f0:	681b      	ldr	r3, [r3, #0]
200009f2:	197a      	adds	r2, r7, r5
200009f4:	2100      	movs	r1, #0
200009f6:	5e52      	ldrsh	r2, [r2, r1]
200009f8:	609a      	str	r2, [r3, #8]
				bird->diry = -4; 
200009fa:	4b6d      	ldr	r3, [pc, #436]	; (20000bb0 <main+0x33e>)
200009fc:	681b      	ldr	r3, [r3, #0]
200009fe:	2204      	movs	r2, #4
20000a00:	4252      	negs	r2, r2
20000a02:	609a      	str	r2, [r3, #8]
				bird->move(bird);
20000a04:	4b6a      	ldr	r3, [pc, #424]	; (20000bb0 <main+0x33e>)
20000a06:	681b      	ldr	r3, [r3, #0]
20000a08:	69da      	ldr	r2, [r3, #28]
20000a0a:	4b69      	ldr	r3, [pc, #420]	; (20000bb0 <main+0x33e>)
20000a0c:	681b      	ldr	r3, [r3, #0]
20000a0e:	0018      	movs	r0, r3
20000a10:	4790      	blx	r2
				delay_milli(50000);
20000a12:	4b6f      	ldr	r3, [pc, #444]	; (20000bd0 <main+0x35e>)
20000a14:	0018      	movs	r0, r3
20000a16:	f7ff fd8a 	bl	2000052e <delay_milli>
	
			} 
			if(bird->diry < 0){
20000a1a:	4b65      	ldr	r3, [pc, #404]	; (20000bb0 <main+0x33e>)
20000a1c:	681b      	ldr	r3, [r3, #0]
20000a1e:	689b      	ldr	r3, [r3, #8]
20000a20:	2b00      	cmp	r3, #0
20000a22:	da07      	bge.n	20000a34 <main+0x1c2>
				bird->diry += 2;
20000a24:	4b62      	ldr	r3, [pc, #392]	; (20000bb0 <main+0x33e>)
20000a26:	681b      	ldr	r3, [r3, #0]
20000a28:	689a      	ldr	r2, [r3, #8]
20000a2a:	4b61      	ldr	r3, [pc, #388]	; (20000bb0 <main+0x33e>)
20000a2c:	681b      	ldr	r3, [r3, #0]
20000a2e:	3202      	adds	r2, #2
20000a30:	609a      	str	r2, [r3, #8]
20000a32:	e00b      	b.n	20000a4c <main+0x1da>
			}
			else if (bird->diry < 5){
20000a34:	4b5e      	ldr	r3, [pc, #376]	; (20000bb0 <main+0x33e>)
20000a36:	681b      	ldr	r3, [r3, #0]
20000a38:	689b      	ldr	r3, [r3, #8]
20000a3a:	2b04      	cmp	r3, #4
20000a3c:	dc06      	bgt.n	20000a4c <main+0x1da>
				bird->diry +=3;
20000a3e:	4b5c      	ldr	r3, [pc, #368]	; (20000bb0 <main+0x33e>)
20000a40:	681b      	ldr	r3, [r3, #0]
20000a42:	689a      	ldr	r2, [r3, #8]
20000a44:	4b5a      	ldr	r3, [pc, #360]	; (20000bb0 <main+0x33e>)
20000a46:	681b      	ldr	r3, [r3, #0]
20000a48:	3203      	adds	r2, #3
20000a4a:	609a      	str	r2, [r3, #8]
			}
		
			if(bird->diry >= 0){
20000a4c:	4b58      	ldr	r3, [pc, #352]	; (20000bb0 <main+0x33e>)
20000a4e:	681b      	ldr	r3, [r3, #0]
20000a50:	689b      	ldr	r3, [r3, #8]
20000a52:	2b00      	cmp	r3, #0
20000a54:	db1f      	blt.n	20000a96 <main+0x224>
				the_y_pos_bird = bird->posy;
20000a56:	4b56      	ldr	r3, [pc, #344]	; (20000bb0 <main+0x33e>)
20000a58:	681b      	ldr	r3, [r3, #0]
20000a5a:	691a      	ldr	r2, [r3, #16]
20000a5c:	240c      	movs	r4, #12
20000a5e:	193b      	adds	r3, r7, r4
20000a60:	801a      	strh	r2, [r3, #0]
				the_y_speed_bird = bird->diry;
20000a62:	4b53      	ldr	r3, [pc, #332]	; (20000bb0 <main+0x33e>)
20000a64:	681b      	ldr	r3, [r3, #0]
20000a66:	689a      	ldr	r2, [r3, #8]
20000a68:	250a      	movs	r5, #10
20000a6a:	197b      	adds	r3, r7, r5
20000a6c:	801a      	strh	r2, [r3, #0]
				clear_object(bird);
20000a6e:	4b50      	ldr	r3, [pc, #320]	; (20000bb0 <main+0x33e>)
20000a70:	681b      	ldr	r3, [r3, #0]
20000a72:	0018      	movs	r0, r3
20000a74:	f7ff fe15 	bl	200006a2 <clear_object>
				bird = &bird_soar_obj;
20000a78:	4b4d      	ldr	r3, [pc, #308]	; (20000bb0 <main+0x33e>)
20000a7a:	4a53      	ldr	r2, [pc, #332]	; (20000bc8 <main+0x356>)
20000a7c:	601a      	str	r2, [r3, #0]
				bird->posy = the_y_pos_bird;
20000a7e:	4b4c      	ldr	r3, [pc, #304]	; (20000bb0 <main+0x33e>)
20000a80:	681b      	ldr	r3, [r3, #0]
20000a82:	193a      	adds	r2, r7, r4
20000a84:	2100      	movs	r1, #0
20000a86:	5e52      	ldrsh	r2, [r2, r1]
20000a88:	611a      	str	r2, [r3, #16]
				bird->diry = the_y_speed_bird;
20000a8a:	4b49      	ldr	r3, [pc, #292]	; (20000bb0 <main+0x33e>)
20000a8c:	681b      	ldr	r3, [r3, #0]
20000a8e:	197a      	adds	r2, r7, r5
20000a90:	2100      	movs	r1, #0
20000a92:	5e52      	ldrsh	r2, [r2, r1]
20000a94:	609a      	str	r2, [r3, #8]
			}
			
			bird->move(bird);
20000a96:	4b46      	ldr	r3, [pc, #280]	; (20000bb0 <main+0x33e>)
20000a98:	681b      	ldr	r3, [r3, #0]
20000a9a:	69da      	ldr	r2, [r3, #28]
20000a9c:	4b44      	ldr	r3, [pc, #272]	; (20000bb0 <main+0x33e>)
20000a9e:	681b      	ldr	r3, [r3, #0]
20000aa0:	0018      	movs	r0, r3
20000aa2:	4790      	blx	r2
			delay_milli(50000);
20000aa4:	4b4a      	ldr	r3, [pc, #296]	; (20000bd0 <main+0x35e>)
20000aa6:	0018      	movs	r0, r3
20000aa8:	f7ff fd41 	bl	2000052e <delay_milli>
		
			if (objects_overlap(bird, obstacle_top_1, obstacle_bottom_1,obstacle_top_2, obstacle_bottom_2)){
20000aac:	4b40      	ldr	r3, [pc, #256]	; (20000bb0 <main+0x33e>)
20000aae:	6818      	ldr	r0, [r3, #0]
20000ab0:	4b40      	ldr	r3, [pc, #256]	; (20000bb4 <main+0x342>)
20000ab2:	6819      	ldr	r1, [r3, #0]
20000ab4:	4b40      	ldr	r3, [pc, #256]	; (20000bb8 <main+0x346>)
20000ab6:	681a      	ldr	r2, [r3, #0]
20000ab8:	4b40      	ldr	r3, [pc, #256]	; (20000bbc <main+0x34a>)
20000aba:	681c      	ldr	r4, [r3, #0]
20000abc:	4b40      	ldr	r3, [pc, #256]	; (20000bc0 <main+0x34e>)
20000abe:	681b      	ldr	r3, [r3, #0]
20000ac0:	9300      	str	r3, [sp, #0]
20000ac2:	0023      	movs	r3, r4
20000ac4:	f7ff fd53 	bl	2000056e <objects_overlap>
20000ac8:	1e03      	subs	r3, r0, #0
20000aca:	d16c      	bne.n	20000ba6 <main+0x334>
				break;
			}
			
			if(obstacle_top_1->posx + obstacle_top_1->geo->sizex <= 0){
20000acc:	4b39      	ldr	r3, [pc, #228]	; (20000bb4 <main+0x342>)
20000ace:	681b      	ldr	r3, [r3, #0]
20000ad0:	68da      	ldr	r2, [r3, #12]
20000ad2:	4b38      	ldr	r3, [pc, #224]	; (20000bb4 <main+0x342>)
20000ad4:	681b      	ldr	r3, [r3, #0]
20000ad6:	681b      	ldr	r3, [r3, #0]
20000ad8:	685b      	ldr	r3, [r3, #4]
20000ada:	18d3      	adds	r3, r2, r3
20000adc:	2b00      	cmp	r3, #0
20000ade:	dc2c      	bgt.n	20000b3a <main+0x2c8>
				++points;
20000ae0:	693b      	ldr	r3, [r7, #16]
20000ae2:	3301      	adds	r3, #1
20000ae4:	613b      	str	r3, [r7, #16]
				random = (char) *TIM6_CNT;
20000ae6:	4b3b      	ldr	r3, [pc, #236]	; (20000bd4 <main+0x362>)
20000ae8:	881b      	ldrh	r3, [r3, #0]
20000aea:	b29b      	uxth	r3, r3
20000aec:	b2da      	uxtb	r2, r3
20000aee:	250e      	movs	r5, #14
20000af0:	197b      	adds	r3, r7, r5
20000af2:	801a      	strh	r2, [r3, #0]
				random %= 14;
20000af4:	197c      	adds	r4, r7, r5
20000af6:	197b      	adds	r3, r7, r5
20000af8:	2200      	movs	r2, #0
20000afa:	5e9b      	ldrsh	r3, [r3, r2]
20000afc:	210e      	movs	r1, #14
20000afe:	0018      	movs	r0, r3
20000b00:	f000 f9da 	bl	20000eb8 <__aeabi_idivmod>
20000b04:	000b      	movs	r3, r1
20000b06:	8023      	strh	r3, [r4, #0]
				obstacle_top_1->posx = 128;
20000b08:	4b2a      	ldr	r3, [pc, #168]	; (20000bb4 <main+0x342>)
20000b0a:	681b      	ldr	r3, [r3, #0]
20000b0c:	2280      	movs	r2, #128	; 0x80
20000b0e:	60da      	str	r2, [r3, #12]
				obstacle_bottom_1->posx = 128;
20000b10:	4b29      	ldr	r3, [pc, #164]	; (20000bb8 <main+0x346>)
20000b12:	681b      	ldr	r3, [r3, #0]
20000b14:	2280      	movs	r2, #128	; 0x80
20000b16:	60da      	str	r2, [r3, #12]
				obstacle_top_1->posy = -29 - random;
20000b18:	197b      	adds	r3, r7, r5
20000b1a:	2200      	movs	r2, #0
20000b1c:	5e9a      	ldrsh	r2, [r3, r2]
20000b1e:	4b25      	ldr	r3, [pc, #148]	; (20000bb4 <main+0x342>)
20000b20:	681b      	ldr	r3, [r3, #0]
20000b22:	211d      	movs	r1, #29
20000b24:	4249      	negs	r1, r1
20000b26:	1a8a      	subs	r2, r1, r2
20000b28:	611a      	str	r2, [r3, #16]
				obstacle_bottom_1->posy = 43 - random;
20000b2a:	197b      	adds	r3, r7, r5
20000b2c:	2200      	movs	r2, #0
20000b2e:	5e9a      	ldrsh	r2, [r3, r2]
20000b30:	4b21      	ldr	r3, [pc, #132]	; (20000bb8 <main+0x346>)
20000b32:	681b      	ldr	r3, [r3, #0]
20000b34:	212b      	movs	r1, #43	; 0x2b
20000b36:	1a8a      	subs	r2, r1, r2
20000b38:	611a      	str	r2, [r3, #16]
			}
		
			if(obstacle_top_2->posx + obstacle_top_2->geo->sizex <= 0){
20000b3a:	4b20      	ldr	r3, [pc, #128]	; (20000bbc <main+0x34a>)
20000b3c:	681b      	ldr	r3, [r3, #0]
20000b3e:	68da      	ldr	r2, [r3, #12]
20000b40:	4b1e      	ldr	r3, [pc, #120]	; (20000bbc <main+0x34a>)
20000b42:	681b      	ldr	r3, [r3, #0]
20000b44:	681b      	ldr	r3, [r3, #0]
20000b46:	685b      	ldr	r3, [r3, #4]
20000b48:	18d3      	adds	r3, r2, r3
20000b4a:	2b00      	cmp	r3, #0
20000b4c:	dd00      	ble.n	20000b50 <main+0x2de>
20000b4e:	e71a      	b.n	20000986 <main+0x114>
				++points;
20000b50:	693b      	ldr	r3, [r7, #16]
20000b52:	3301      	adds	r3, #1
20000b54:	613b      	str	r3, [r7, #16]
				random = (char) *TIM6_CNT; 
20000b56:	4b1f      	ldr	r3, [pc, #124]	; (20000bd4 <main+0x362>)
20000b58:	881b      	ldrh	r3, [r3, #0]
20000b5a:	b29b      	uxth	r3, r3
20000b5c:	b2da      	uxtb	r2, r3
20000b5e:	250e      	movs	r5, #14
20000b60:	197b      	adds	r3, r7, r5
20000b62:	801a      	strh	r2, [r3, #0]
				random %= 14;
20000b64:	197c      	adds	r4, r7, r5
20000b66:	197b      	adds	r3, r7, r5
20000b68:	2200      	movs	r2, #0
20000b6a:	5e9b      	ldrsh	r3, [r3, r2]
20000b6c:	210e      	movs	r1, #14
20000b6e:	0018      	movs	r0, r3
20000b70:	f000 f9a2 	bl	20000eb8 <__aeabi_idivmod>
20000b74:	000b      	movs	r3, r1
20000b76:	8023      	strh	r3, [r4, #0]
				obstacle_top_2->posx = 128;
20000b78:	4b10      	ldr	r3, [pc, #64]	; (20000bbc <main+0x34a>)
20000b7a:	681b      	ldr	r3, [r3, #0]
20000b7c:	2280      	movs	r2, #128	; 0x80
20000b7e:	60da      	str	r2, [r3, #12]
				obstacle_bottom_2->posx = 128;
20000b80:	4b0f      	ldr	r3, [pc, #60]	; (20000bc0 <main+0x34e>)
20000b82:	681b      	ldr	r3, [r3, #0]
20000b84:	2280      	movs	r2, #128	; 0x80
20000b86:	60da      	str	r2, [r3, #12]
				obstacle_top_2->posy = -29 + random;
20000b88:	197b      	adds	r3, r7, r5
20000b8a:	2200      	movs	r2, #0
20000b8c:	5e9a      	ldrsh	r2, [r3, r2]
20000b8e:	4b0b      	ldr	r3, [pc, #44]	; (20000bbc <main+0x34a>)
20000b90:	681b      	ldr	r3, [r3, #0]
20000b92:	3a1d      	subs	r2, #29
20000b94:	611a      	str	r2, [r3, #16]
				obstacle_bottom_2->posy = 43 + random;
20000b96:	197b      	adds	r3, r7, r5
20000b98:	2200      	movs	r2, #0
20000b9a:	5e9a      	ldrsh	r2, [r3, r2]
20000b9c:	4b08      	ldr	r3, [pc, #32]	; (20000bc0 <main+0x34e>)
20000b9e:	681b      	ldr	r3, [r3, #0]
20000ba0:	322b      	adds	r2, #43	; 0x2b
20000ba2:	611a      	str	r2, [r3, #16]
			bird->move(bird);
20000ba4:	e6ef      	b.n	20000986 <main+0x114>
				break;
20000ba6:	46c0      	nop			; (mov r8, r8)
		points = 0; 
20000ba8:	e6a9      	b.n	200008fe <main+0x8c>
20000baa:	46c0      	nop			; (mov r8, r8)
20000bac:	20001dfc 	strdcs	r1, [r0], -ip
20000bb0:	20001dac 	andcs	r1, r0, ip, lsr #27
20000bb4:	20001db0 			; <UNDEFINED> instruction: 0x20001db0
20000bb8:	20001db4 			; <UNDEFINED> instruction: 0x20001db4
20000bbc:	20001db8 			; <UNDEFINED> instruction: 0x20001db8
20000bc0:	20001dbc 			; <UNDEFINED> instruction: 0x20001dbc
20000bc4:	20001d88 	andcs	r1, r0, r8, lsl #27
20000bc8:	20001d64 	andcs	r1, r0, r4, ror #26
20000bcc:	20001dc0 	andcs	r1, r0, r0, asr #27
20000bd0:	0000c350 	andeq	ip, r0, r0, asr r3
20000bd4:	40001024 	andmi	r1, r0, r4, lsr #32

20000bd8 <__udivsi3>:
20000bd8:	2200      	movs	r2, #0
20000bda:	0843      	lsrs	r3, r0, #1
20000bdc:	428b      	cmp	r3, r1
20000bde:	d374      	bcc.n	20000cca <__udivsi3+0xf2>
20000be0:	0903      	lsrs	r3, r0, #4
20000be2:	428b      	cmp	r3, r1
20000be4:	d35f      	bcc.n	20000ca6 <__udivsi3+0xce>
20000be6:	0a03      	lsrs	r3, r0, #8
20000be8:	428b      	cmp	r3, r1
20000bea:	d344      	bcc.n	20000c76 <__udivsi3+0x9e>
20000bec:	0b03      	lsrs	r3, r0, #12
20000bee:	428b      	cmp	r3, r1
20000bf0:	d328      	bcc.n	20000c44 <__udivsi3+0x6c>
20000bf2:	0c03      	lsrs	r3, r0, #16
20000bf4:	428b      	cmp	r3, r1
20000bf6:	d30d      	bcc.n	20000c14 <__udivsi3+0x3c>
20000bf8:	22ff      	movs	r2, #255	; 0xff
20000bfa:	0209      	lsls	r1, r1, #8
20000bfc:	ba12      	rev	r2, r2
20000bfe:	0c03      	lsrs	r3, r0, #16
20000c00:	428b      	cmp	r3, r1
20000c02:	d302      	bcc.n	20000c0a <__udivsi3+0x32>
20000c04:	1212      	asrs	r2, r2, #8
20000c06:	0209      	lsls	r1, r1, #8
20000c08:	d065      	beq.n	20000cd6 <__udivsi3+0xfe>
20000c0a:	0b03      	lsrs	r3, r0, #12
20000c0c:	428b      	cmp	r3, r1
20000c0e:	d319      	bcc.n	20000c44 <__udivsi3+0x6c>
20000c10:	e000      	b.n	20000c14 <__udivsi3+0x3c>
20000c12:	0a09      	lsrs	r1, r1, #8
20000c14:	0bc3      	lsrs	r3, r0, #15
20000c16:	428b      	cmp	r3, r1
20000c18:	d301      	bcc.n	20000c1e <__udivsi3+0x46>
20000c1a:	03cb      	lsls	r3, r1, #15
20000c1c:	1ac0      	subs	r0, r0, r3
20000c1e:	4152      	adcs	r2, r2
20000c20:	0b83      	lsrs	r3, r0, #14
20000c22:	428b      	cmp	r3, r1
20000c24:	d301      	bcc.n	20000c2a <__udivsi3+0x52>
20000c26:	038b      	lsls	r3, r1, #14
20000c28:	1ac0      	subs	r0, r0, r3
20000c2a:	4152      	adcs	r2, r2
20000c2c:	0b43      	lsrs	r3, r0, #13
20000c2e:	428b      	cmp	r3, r1
20000c30:	d301      	bcc.n	20000c36 <__udivsi3+0x5e>
20000c32:	034b      	lsls	r3, r1, #13
20000c34:	1ac0      	subs	r0, r0, r3
20000c36:	4152      	adcs	r2, r2
20000c38:	0b03      	lsrs	r3, r0, #12
20000c3a:	428b      	cmp	r3, r1
20000c3c:	d301      	bcc.n	20000c42 <__udivsi3+0x6a>
20000c3e:	030b      	lsls	r3, r1, #12
20000c40:	1ac0      	subs	r0, r0, r3
20000c42:	4152      	adcs	r2, r2
20000c44:	0ac3      	lsrs	r3, r0, #11
20000c46:	428b      	cmp	r3, r1
20000c48:	d301      	bcc.n	20000c4e <__udivsi3+0x76>
20000c4a:	02cb      	lsls	r3, r1, #11
20000c4c:	1ac0      	subs	r0, r0, r3
20000c4e:	4152      	adcs	r2, r2
20000c50:	0a83      	lsrs	r3, r0, #10
20000c52:	428b      	cmp	r3, r1
20000c54:	d301      	bcc.n	20000c5a <__udivsi3+0x82>
20000c56:	028b      	lsls	r3, r1, #10
20000c58:	1ac0      	subs	r0, r0, r3
20000c5a:	4152      	adcs	r2, r2
20000c5c:	0a43      	lsrs	r3, r0, #9
20000c5e:	428b      	cmp	r3, r1
20000c60:	d301      	bcc.n	20000c66 <__udivsi3+0x8e>
20000c62:	024b      	lsls	r3, r1, #9
20000c64:	1ac0      	subs	r0, r0, r3
20000c66:	4152      	adcs	r2, r2
20000c68:	0a03      	lsrs	r3, r0, #8
20000c6a:	428b      	cmp	r3, r1
20000c6c:	d301      	bcc.n	20000c72 <__udivsi3+0x9a>
20000c6e:	020b      	lsls	r3, r1, #8
20000c70:	1ac0      	subs	r0, r0, r3
20000c72:	4152      	adcs	r2, r2
20000c74:	d2cd      	bcs.n	20000c12 <__udivsi3+0x3a>
20000c76:	09c3      	lsrs	r3, r0, #7
20000c78:	428b      	cmp	r3, r1
20000c7a:	d301      	bcc.n	20000c80 <__udivsi3+0xa8>
20000c7c:	01cb      	lsls	r3, r1, #7
20000c7e:	1ac0      	subs	r0, r0, r3
20000c80:	4152      	adcs	r2, r2
20000c82:	0983      	lsrs	r3, r0, #6
20000c84:	428b      	cmp	r3, r1
20000c86:	d301      	bcc.n	20000c8c <__udivsi3+0xb4>
20000c88:	018b      	lsls	r3, r1, #6
20000c8a:	1ac0      	subs	r0, r0, r3
20000c8c:	4152      	adcs	r2, r2
20000c8e:	0943      	lsrs	r3, r0, #5
20000c90:	428b      	cmp	r3, r1
20000c92:	d301      	bcc.n	20000c98 <__udivsi3+0xc0>
20000c94:	014b      	lsls	r3, r1, #5
20000c96:	1ac0      	subs	r0, r0, r3
20000c98:	4152      	adcs	r2, r2
20000c9a:	0903      	lsrs	r3, r0, #4
20000c9c:	428b      	cmp	r3, r1
20000c9e:	d301      	bcc.n	20000ca4 <__udivsi3+0xcc>
20000ca0:	010b      	lsls	r3, r1, #4
20000ca2:	1ac0      	subs	r0, r0, r3
20000ca4:	4152      	adcs	r2, r2
20000ca6:	08c3      	lsrs	r3, r0, #3
20000ca8:	428b      	cmp	r3, r1
20000caa:	d301      	bcc.n	20000cb0 <__udivsi3+0xd8>
20000cac:	00cb      	lsls	r3, r1, #3
20000cae:	1ac0      	subs	r0, r0, r3
20000cb0:	4152      	adcs	r2, r2
20000cb2:	0883      	lsrs	r3, r0, #2
20000cb4:	428b      	cmp	r3, r1
20000cb6:	d301      	bcc.n	20000cbc <__udivsi3+0xe4>
20000cb8:	008b      	lsls	r3, r1, #2
20000cba:	1ac0      	subs	r0, r0, r3
20000cbc:	4152      	adcs	r2, r2
20000cbe:	0843      	lsrs	r3, r0, #1
20000cc0:	428b      	cmp	r3, r1
20000cc2:	d301      	bcc.n	20000cc8 <__udivsi3+0xf0>
20000cc4:	004b      	lsls	r3, r1, #1
20000cc6:	1ac0      	subs	r0, r0, r3
20000cc8:	4152      	adcs	r2, r2
20000cca:	1a41      	subs	r1, r0, r1
20000ccc:	d200      	bcs.n	20000cd0 <__udivsi3+0xf8>
20000cce:	4601      	mov	r1, r0
20000cd0:	4152      	adcs	r2, r2
20000cd2:	4610      	mov	r0, r2
20000cd4:	4770      	bx	lr
20000cd6:	e7ff      	b.n	20000cd8 <__udivsi3+0x100>
20000cd8:	b501      	push	{r0, lr}
20000cda:	2000      	movs	r0, #0
20000cdc:	f000 f8f0 	bl	20000ec0 <__aeabi_idiv0>
20000ce0:	bd02      	pop	{r1, pc}
20000ce2:	46c0      	nop			; (mov r8, r8)

20000ce4 <__aeabi_uidivmod>:
20000ce4:	2900      	cmp	r1, #0
20000ce6:	d0f7      	beq.n	20000cd8 <__udivsi3+0x100>
20000ce8:	e776      	b.n	20000bd8 <__udivsi3>
20000cea:	4770      	bx	lr

20000cec <__divsi3>:
20000cec:	4603      	mov	r3, r0
20000cee:	430b      	orrs	r3, r1
20000cf0:	d47f      	bmi.n	20000df2 <__divsi3+0x106>
20000cf2:	2200      	movs	r2, #0
20000cf4:	0843      	lsrs	r3, r0, #1
20000cf6:	428b      	cmp	r3, r1
20000cf8:	d374      	bcc.n	20000de4 <__divsi3+0xf8>
20000cfa:	0903      	lsrs	r3, r0, #4
20000cfc:	428b      	cmp	r3, r1
20000cfe:	d35f      	bcc.n	20000dc0 <__divsi3+0xd4>
20000d00:	0a03      	lsrs	r3, r0, #8
20000d02:	428b      	cmp	r3, r1
20000d04:	d344      	bcc.n	20000d90 <__divsi3+0xa4>
20000d06:	0b03      	lsrs	r3, r0, #12
20000d08:	428b      	cmp	r3, r1
20000d0a:	d328      	bcc.n	20000d5e <__divsi3+0x72>
20000d0c:	0c03      	lsrs	r3, r0, #16
20000d0e:	428b      	cmp	r3, r1
20000d10:	d30d      	bcc.n	20000d2e <__divsi3+0x42>
20000d12:	22ff      	movs	r2, #255	; 0xff
20000d14:	0209      	lsls	r1, r1, #8
20000d16:	ba12      	rev	r2, r2
20000d18:	0c03      	lsrs	r3, r0, #16
20000d1a:	428b      	cmp	r3, r1
20000d1c:	d302      	bcc.n	20000d24 <__divsi3+0x38>
20000d1e:	1212      	asrs	r2, r2, #8
20000d20:	0209      	lsls	r1, r1, #8
20000d22:	d065      	beq.n	20000df0 <__divsi3+0x104>
20000d24:	0b03      	lsrs	r3, r0, #12
20000d26:	428b      	cmp	r3, r1
20000d28:	d319      	bcc.n	20000d5e <__divsi3+0x72>
20000d2a:	e000      	b.n	20000d2e <__divsi3+0x42>
20000d2c:	0a09      	lsrs	r1, r1, #8
20000d2e:	0bc3      	lsrs	r3, r0, #15
20000d30:	428b      	cmp	r3, r1
20000d32:	d301      	bcc.n	20000d38 <__divsi3+0x4c>
20000d34:	03cb      	lsls	r3, r1, #15
20000d36:	1ac0      	subs	r0, r0, r3
20000d38:	4152      	adcs	r2, r2
20000d3a:	0b83      	lsrs	r3, r0, #14
20000d3c:	428b      	cmp	r3, r1
20000d3e:	d301      	bcc.n	20000d44 <__divsi3+0x58>
20000d40:	038b      	lsls	r3, r1, #14
20000d42:	1ac0      	subs	r0, r0, r3
20000d44:	4152      	adcs	r2, r2
20000d46:	0b43      	lsrs	r3, r0, #13
20000d48:	428b      	cmp	r3, r1
20000d4a:	d301      	bcc.n	20000d50 <__divsi3+0x64>
20000d4c:	034b      	lsls	r3, r1, #13
20000d4e:	1ac0      	subs	r0, r0, r3
20000d50:	4152      	adcs	r2, r2
20000d52:	0b03      	lsrs	r3, r0, #12
20000d54:	428b      	cmp	r3, r1
20000d56:	d301      	bcc.n	20000d5c <__divsi3+0x70>
20000d58:	030b      	lsls	r3, r1, #12
20000d5a:	1ac0      	subs	r0, r0, r3
20000d5c:	4152      	adcs	r2, r2
20000d5e:	0ac3      	lsrs	r3, r0, #11
20000d60:	428b      	cmp	r3, r1
20000d62:	d301      	bcc.n	20000d68 <__divsi3+0x7c>
20000d64:	02cb      	lsls	r3, r1, #11
20000d66:	1ac0      	subs	r0, r0, r3
20000d68:	4152      	adcs	r2, r2
20000d6a:	0a83      	lsrs	r3, r0, #10
20000d6c:	428b      	cmp	r3, r1
20000d6e:	d301      	bcc.n	20000d74 <__divsi3+0x88>
20000d70:	028b      	lsls	r3, r1, #10
20000d72:	1ac0      	subs	r0, r0, r3
20000d74:	4152      	adcs	r2, r2
20000d76:	0a43      	lsrs	r3, r0, #9
20000d78:	428b      	cmp	r3, r1
20000d7a:	d301      	bcc.n	20000d80 <__divsi3+0x94>
20000d7c:	024b      	lsls	r3, r1, #9
20000d7e:	1ac0      	subs	r0, r0, r3
20000d80:	4152      	adcs	r2, r2
20000d82:	0a03      	lsrs	r3, r0, #8
20000d84:	428b      	cmp	r3, r1
20000d86:	d301      	bcc.n	20000d8c <__divsi3+0xa0>
20000d88:	020b      	lsls	r3, r1, #8
20000d8a:	1ac0      	subs	r0, r0, r3
20000d8c:	4152      	adcs	r2, r2
20000d8e:	d2cd      	bcs.n	20000d2c <__divsi3+0x40>
20000d90:	09c3      	lsrs	r3, r0, #7
20000d92:	428b      	cmp	r3, r1
20000d94:	d301      	bcc.n	20000d9a <__divsi3+0xae>
20000d96:	01cb      	lsls	r3, r1, #7
20000d98:	1ac0      	subs	r0, r0, r3
20000d9a:	4152      	adcs	r2, r2
20000d9c:	0983      	lsrs	r3, r0, #6
20000d9e:	428b      	cmp	r3, r1
20000da0:	d301      	bcc.n	20000da6 <__divsi3+0xba>
20000da2:	018b      	lsls	r3, r1, #6
20000da4:	1ac0      	subs	r0, r0, r3
20000da6:	4152      	adcs	r2, r2
20000da8:	0943      	lsrs	r3, r0, #5
20000daa:	428b      	cmp	r3, r1
20000dac:	d301      	bcc.n	20000db2 <__divsi3+0xc6>
20000dae:	014b      	lsls	r3, r1, #5
20000db0:	1ac0      	subs	r0, r0, r3
20000db2:	4152      	adcs	r2, r2
20000db4:	0903      	lsrs	r3, r0, #4
20000db6:	428b      	cmp	r3, r1
20000db8:	d301      	bcc.n	20000dbe <__divsi3+0xd2>
20000dba:	010b      	lsls	r3, r1, #4
20000dbc:	1ac0      	subs	r0, r0, r3
20000dbe:	4152      	adcs	r2, r2
20000dc0:	08c3      	lsrs	r3, r0, #3
20000dc2:	428b      	cmp	r3, r1
20000dc4:	d301      	bcc.n	20000dca <__divsi3+0xde>
20000dc6:	00cb      	lsls	r3, r1, #3
20000dc8:	1ac0      	subs	r0, r0, r3
20000dca:	4152      	adcs	r2, r2
20000dcc:	0883      	lsrs	r3, r0, #2
20000dce:	428b      	cmp	r3, r1
20000dd0:	d301      	bcc.n	20000dd6 <__divsi3+0xea>
20000dd2:	008b      	lsls	r3, r1, #2
20000dd4:	1ac0      	subs	r0, r0, r3
20000dd6:	4152      	adcs	r2, r2
20000dd8:	0843      	lsrs	r3, r0, #1
20000dda:	428b      	cmp	r3, r1
20000ddc:	d301      	bcc.n	20000de2 <__divsi3+0xf6>
20000dde:	004b      	lsls	r3, r1, #1
20000de0:	1ac0      	subs	r0, r0, r3
20000de2:	4152      	adcs	r2, r2
20000de4:	1a41      	subs	r1, r0, r1
20000de6:	d200      	bcs.n	20000dea <__divsi3+0xfe>
20000de8:	4601      	mov	r1, r0
20000dea:	4152      	adcs	r2, r2
20000dec:	4610      	mov	r0, r2
20000dee:	4770      	bx	lr
20000df0:	e05d      	b.n	20000eae <__divsi3+0x1c2>
20000df2:	0fca      	lsrs	r2, r1, #31
20000df4:	d000      	beq.n	20000df8 <__divsi3+0x10c>
20000df6:	4249      	negs	r1, r1
20000df8:	1003      	asrs	r3, r0, #32
20000dfa:	d300      	bcc.n	20000dfe <__divsi3+0x112>
20000dfc:	4240      	negs	r0, r0
20000dfe:	4053      	eors	r3, r2
20000e00:	2200      	movs	r2, #0
20000e02:	469c      	mov	ip, r3
20000e04:	0903      	lsrs	r3, r0, #4
20000e06:	428b      	cmp	r3, r1
20000e08:	d32d      	bcc.n	20000e66 <__divsi3+0x17a>
20000e0a:	0a03      	lsrs	r3, r0, #8
20000e0c:	428b      	cmp	r3, r1
20000e0e:	d312      	bcc.n	20000e36 <__divsi3+0x14a>
20000e10:	22fc      	movs	r2, #252	; 0xfc
20000e12:	0189      	lsls	r1, r1, #6
20000e14:	ba12      	rev	r2, r2
20000e16:	0a03      	lsrs	r3, r0, #8
20000e18:	428b      	cmp	r3, r1
20000e1a:	d30c      	bcc.n	20000e36 <__divsi3+0x14a>
20000e1c:	0189      	lsls	r1, r1, #6
20000e1e:	1192      	asrs	r2, r2, #6
20000e20:	428b      	cmp	r3, r1
20000e22:	d308      	bcc.n	20000e36 <__divsi3+0x14a>
20000e24:	0189      	lsls	r1, r1, #6
20000e26:	1192      	asrs	r2, r2, #6
20000e28:	428b      	cmp	r3, r1
20000e2a:	d304      	bcc.n	20000e36 <__divsi3+0x14a>
20000e2c:	0189      	lsls	r1, r1, #6
20000e2e:	d03a      	beq.n	20000ea6 <__divsi3+0x1ba>
20000e30:	1192      	asrs	r2, r2, #6
20000e32:	e000      	b.n	20000e36 <__divsi3+0x14a>
20000e34:	0989      	lsrs	r1, r1, #6
20000e36:	09c3      	lsrs	r3, r0, #7
20000e38:	428b      	cmp	r3, r1
20000e3a:	d301      	bcc.n	20000e40 <__divsi3+0x154>
20000e3c:	01cb      	lsls	r3, r1, #7
20000e3e:	1ac0      	subs	r0, r0, r3
20000e40:	4152      	adcs	r2, r2
20000e42:	0983      	lsrs	r3, r0, #6
20000e44:	428b      	cmp	r3, r1
20000e46:	d301      	bcc.n	20000e4c <__divsi3+0x160>
20000e48:	018b      	lsls	r3, r1, #6
20000e4a:	1ac0      	subs	r0, r0, r3
20000e4c:	4152      	adcs	r2, r2
20000e4e:	0943      	lsrs	r3, r0, #5
20000e50:	428b      	cmp	r3, r1
20000e52:	d301      	bcc.n	20000e58 <__divsi3+0x16c>
20000e54:	014b      	lsls	r3, r1, #5
20000e56:	1ac0      	subs	r0, r0, r3
20000e58:	4152      	adcs	r2, r2
20000e5a:	0903      	lsrs	r3, r0, #4
20000e5c:	428b      	cmp	r3, r1
20000e5e:	d301      	bcc.n	20000e64 <__divsi3+0x178>
20000e60:	010b      	lsls	r3, r1, #4
20000e62:	1ac0      	subs	r0, r0, r3
20000e64:	4152      	adcs	r2, r2
20000e66:	08c3      	lsrs	r3, r0, #3
20000e68:	428b      	cmp	r3, r1
20000e6a:	d301      	bcc.n	20000e70 <__divsi3+0x184>
20000e6c:	00cb      	lsls	r3, r1, #3
20000e6e:	1ac0      	subs	r0, r0, r3
20000e70:	4152      	adcs	r2, r2
20000e72:	0883      	lsrs	r3, r0, #2
20000e74:	428b      	cmp	r3, r1
20000e76:	d301      	bcc.n	20000e7c <__divsi3+0x190>
20000e78:	008b      	lsls	r3, r1, #2
20000e7a:	1ac0      	subs	r0, r0, r3
20000e7c:	4152      	adcs	r2, r2
20000e7e:	d2d9      	bcs.n	20000e34 <__divsi3+0x148>
20000e80:	0843      	lsrs	r3, r0, #1
20000e82:	428b      	cmp	r3, r1
20000e84:	d301      	bcc.n	20000e8a <__divsi3+0x19e>
20000e86:	004b      	lsls	r3, r1, #1
20000e88:	1ac0      	subs	r0, r0, r3
20000e8a:	4152      	adcs	r2, r2
20000e8c:	1a41      	subs	r1, r0, r1
20000e8e:	d200      	bcs.n	20000e92 <__divsi3+0x1a6>
20000e90:	4601      	mov	r1, r0
20000e92:	4663      	mov	r3, ip
20000e94:	4152      	adcs	r2, r2
20000e96:	105b      	asrs	r3, r3, #1
20000e98:	4610      	mov	r0, r2
20000e9a:	d301      	bcc.n	20000ea0 <__divsi3+0x1b4>
20000e9c:	4240      	negs	r0, r0
20000e9e:	2b00      	cmp	r3, #0
20000ea0:	d500      	bpl.n	20000ea4 <__divsi3+0x1b8>
20000ea2:	4249      	negs	r1, r1
20000ea4:	4770      	bx	lr
20000ea6:	4663      	mov	r3, ip
20000ea8:	105b      	asrs	r3, r3, #1
20000eaa:	d300      	bcc.n	20000eae <__divsi3+0x1c2>
20000eac:	4240      	negs	r0, r0
20000eae:	b501      	push	{r0, lr}
20000eb0:	2000      	movs	r0, #0
20000eb2:	f000 f805 	bl	20000ec0 <__aeabi_idiv0>
20000eb6:	bd02      	pop	{r1, pc}

20000eb8 <__aeabi_idivmod>:
20000eb8:	2900      	cmp	r1, #0
20000eba:	d0f8      	beq.n	20000eae <__divsi3+0x1c2>
20000ebc:	e716      	b.n	20000cec <__divsi3>
20000ebe:	4770      	bx	lr

20000ec0 <__aeabi_idiv0>:
20000ec0:	4770      	bx	lr
20000ec2:	46c0      	nop			; (mov r8, r8)

20000ec4 <keyb_state>:
20000ec4:	00ff      	lsls	r7, r7, #3
	...

20000ec8 <obstacle_top_geometry>:
20000ec8:	0000007e 	andeq	r0, r0, lr, ror r0
20000ecc:	0000000e 	andeq	r0, r0, lr
20000ed0:	00000032 	andeq	r0, r0, r2, lsr r0
20000ed4:	000c0001 	andeq	r0, ip, r1
20000ed8:	010c0101 	tsteq	ip, r1, lsl #2
20000edc:	020c0201 	andeq	r0, ip, #268435456	; 0x10000000
20000ee0:	030c0301 	movweq	r0, #49921	; 0xc301
20000ee4:	040c0401 	streq	r0, [ip], #-1025	; 0xfffffbff
20000ee8:	050c0501 	streq	r0, [ip, #-1281]	; 0xfffffaff
20000eec:	060c0601 	streq	r0, [ip], -r1, lsl #12
20000ef0:	070c0701 	streq	r0, [ip, -r1, lsl #14]
20000ef4:	080c0801 	stmdaeq	ip, {r0, fp}
20000ef8:	090c0901 	stmdbeq	ip, {r0, r8, fp}
20000efc:	0a0c0a01 	beq	20303708 <ts_state+0x301900>
20000f00:	0b0c0b01 	bleq	20303b0c <ts_state+0x301d04>
20000f04:	0c0c0c01 	stceq	12, cr0, [ip], {1}
20000f08:	0d0c0d01 	stceq	13, cr0, [ip, #-4]
20000f0c:	0e0c0e01 	cdpeq	14, 0, cr0, cr12, cr1, {0}
20000f10:	0f0c0f01 	svceq	0x000c0f01
20000f14:	100c1001 	andne	r1, ip, r1
20000f18:	110c1101 	tstne	ip, r1, lsl #2
20000f1c:	120c1201 	andne	r1, ip, #268435456	; 0x10000000
20000f20:	130c1301 	movwne	r1, #49921	; 0xc301
20000f24:	140c1401 	strne	r1, [ip], #-1025	; 0xfffffbff
20000f28:	150c1501 	strne	r1, [ip, #-1281]	; 0xfffffaff
20000f2c:	160c1601 	strne	r1, [ip], -r1, lsl #12
20000f30:	170c1701 	strne	r1, [ip, -r1, lsl #14]
20000f34:	180c1801 	stmdane	ip, {r0, fp, ip}
20000f38:	190c1901 	stmdbne	ip, {r0, r8, fp, ip}
20000f3c:	1a0c1a01 	bne	20307748 <ts_state+0x305940>
20000f40:	1b0c1b01 	blne	20307b4c <ts_state+0x305d44>
20000f44:	1c0c1c01 	stcne	12, cr1, [ip], {1}
20000f48:	1d0c1d01 	stcne	13, cr1, [ip, #-4]
20000f4c:	1e0c1e01 	cdpne	14, 0, cr1, cr12, cr1, {0}
20000f50:	1f0c1f01 	svcne	0x000c1f01
20000f54:	200c2001 	andcs	r2, ip, r1
20000f58:	210c2101 	tstcs	ip, r1, lsl #2
20000f5c:	220c2201 	andcs	r2, ip, #268435456	; 0x10000000
20000f60:	230c2301 	movwcs	r2, #49921	; 0xc301
20000f64:	240c2401 	strcs	r2, [ip], #-1025	; 0xfffffbff
20000f68:	250c2501 	strcs	r2, [ip, #-1281]	; 0xfffffaff
20000f6c:	260c2601 	strcs	r2, [ip], -r1, lsl #12
20000f70:	270c2701 	strcs	r2, [ip, -r1, lsl #14]
20000f74:	280c2801 	stmdacs	ip, {r0, fp, sp}
20000f78:	290c2901 	stmdbcs	ip, {r0, r8, fp, sp}
20000f7c:	2a0c2a01 	bcs	2030b788 <ts_state+0x309980>
20000f80:	2b0c2b01 	blcs	2030bb8c <ts_state+0x309d84>
20000f84:	2c0c2c01 	stccs	12, cr2, [ip], {1}
20000f88:	2d0c2d01 	stccs	13, cr2, [ip, #-4]
20000f8c:	2e012e00 	cdpcs	14, 0, cr2, cr1, cr0, {0}
20000f90:	2e032e02 	cdpcs	14, 0, cr2, cr3, cr2, {0}
20000f94:	2e052e04 	cdpcs	14, 0, cr2, cr5, cr4, {0}
20000f98:	2e072e06 	cdpcs	14, 0, cr2, cr7, cr6, {0}
20000f9c:	2e092e08 	cdpcs	14, 0, cr2, cr9, cr8, {0}
20000fa0:	2e0b2e0a 	cdpcs	14, 0, cr2, cr11, cr10, {0}
20000fa4:	2e0d2e0c 	cdpcs	14, 0, cr2, cr13, cr12, {0}
20000fa8:	2f0d2f00 	svccs	0x000d2f00
20000fac:	300d3000 	andcc	r3, sp, r0
20000fb0:	310d3100 	mrscc	r3, (UNDEF: 29)
20000fb4:	32013200 	andcc	r3, r1, #0, 4
20000fb8:	32033202 	andcc	r3, r3, #536870912	; 0x20000000
20000fbc:	32053204 	andcc	r3, r5, #4, 4	; 0x40000000
20000fc0:	32073206 	andcc	r3, r7, #1610612736	; 0x60000000
20000fc4:	32093208 	andcc	r3, r9, #8, 4	; 0x80000000
20000fc8:	320b320a 	andcc	r3, fp, #-1610612736	; 0xa0000000
20000fcc:	320d320c 	andcc	r3, sp, #12, 4	; 0xc0000000
	...

20001190 <obstacle_bottom_geometry>:
20001190:	0000007e 	andeq	r0, r0, lr, ror r0
20001194:	0000000e 	andeq	r0, r0, lr
20001198:	00000032 	andeq	r0, r0, r2, lsr r0
2000119c:	00010000 	andeq	r0, r1, r0
200011a0:	00030002 	andeq	r0, r3, r2
200011a4:	00050004 	andeq	r0, r5, r4
200011a8:	00070006 	andeq	r0, r7, r6
200011ac:	00090008 	andeq	r0, r9, r8
200011b0:	000b000a 	andeq	r0, fp, sl
200011b4:	000d000c 	andeq	r0, sp, ip
200011b8:	010d0100 	mrseq	r0, (UNDEF: 29)
200011bc:	020d0200 	andeq	r0, sp, #0, 4
200011c0:	030d0300 	movweq	r0, #54016	; 0xd300
200011c4:	04010400 	streq	r0, [r1], #-1024	; 0xfffffc00
200011c8:	04030402 	streq	r0, [r3], #-1026	; 0xfffffbfe
200011cc:	04050404 	streq	r0, [r5], #-1028	; 0xfffffbfc
200011d0:	04070406 	streq	r0, [r7], #-1030	; 0xfffffbfa
200011d4:	04090408 	streq	r0, [r9], #-1032	; 0xfffffbf8
200011d8:	040b040a 	streq	r0, [fp], #-1034	; 0xfffffbf6
200011dc:	040d040c 	streq	r0, [sp], #-1036	; 0xfffffbf4
200011e0:	050c0501 	streq	r0, [ip, #-1281]	; 0xfffffaff
200011e4:	060c0601 	streq	r0, [ip], -r1, lsl #12
200011e8:	070c0701 	streq	r0, [ip, -r1, lsl #14]
200011ec:	080c0801 	stmdaeq	ip, {r0, fp}
200011f0:	090c0901 	stmdbeq	ip, {r0, r8, fp}
200011f4:	0a0c0a01 	beq	20303a00 <ts_state+0x301bf8>
200011f8:	0b0c0b01 	bleq	20303e04 <ts_state+0x301ffc>
200011fc:	0c0c0c01 	stceq	12, cr0, [ip], {1}
20001200:	0d0c0d01 	stceq	13, cr0, [ip, #-4]
20001204:	0e0c0e01 	cdpeq	14, 0, cr0, cr12, cr1, {0}
20001208:	0f0c0f01 	svceq	0x000c0f01
2000120c:	100c1001 	andne	r1, ip, r1
20001210:	110c1101 	tstne	ip, r1, lsl #2
20001214:	120c1201 	andne	r1, ip, #268435456	; 0x10000000
20001218:	130c1301 	movwne	r1, #49921	; 0xc301
2000121c:	140c1401 	strne	r1, [ip], #-1025	; 0xfffffbff
20001220:	150c1501 	strne	r1, [ip, #-1281]	; 0xfffffaff
20001224:	160c1601 	strne	r1, [ip], -r1, lsl #12
20001228:	170c1701 	strne	r1, [ip, -r1, lsl #14]
2000122c:	180c1801 	stmdane	ip, {r0, fp, ip}
20001230:	190c1901 	stmdbne	ip, {r0, r8, fp, ip}
20001234:	1a0c1a01 	bne	20307a40 <ts_state+0x305c38>
20001238:	1b0c1b01 	blne	20307e44 <ts_state+0x30603c>
2000123c:	1c0c1c01 	stcne	12, cr1, [ip], {1}
20001240:	1d0c1d01 	stcne	13, cr1, [ip, #-4]
20001244:	1e0c1e01 	cdpne	14, 0, cr1, cr12, cr1, {0}
20001248:	1f0c1f01 	svcne	0x000c1f01
2000124c:	200c2001 	andcs	r2, ip, r1
20001250:	210c2101 	tstcs	ip, r1, lsl #2
20001254:	220c2201 	andcs	r2, ip, #268435456	; 0x10000000
20001258:	230c2301 	movwcs	r2, #49921	; 0xc301
2000125c:	240c2401 	strcs	r2, [ip], #-1025	; 0xfffffbff
20001260:	250c2501 	strcs	r2, [ip, #-1281]	; 0xfffffaff
20001264:	260c2601 	strcs	r2, [ip], -r1, lsl #12
20001268:	270c2701 	strcs	r2, [ip, -r1, lsl #14]
2000126c:	280c2801 	stmdacs	ip, {r0, fp, sp}
20001270:	290c2901 	stmdbcs	ip, {r0, r8, fp, sp}
20001274:	2a0c2a01 	bcs	2030ba80 <ts_state+0x309c78>
20001278:	2b0c2b01 	blcs	2030be84 <ts_state+0x30a07c>
2000127c:	2c0c2c01 	stccs	12, cr2, [ip], {1}
20001280:	2d0c2d01 	stccs	13, cr2, [ip, #-4]
20001284:	2e0c2e01 	cdpcs	14, 0, cr2, cr12, cr1, {0}
20001288:	2f0c2f01 	svccs	0x000c2f01
2000128c:	300c3001 	andcc	r3, ip, r1
20001290:	310c3101 	tstcc	ip, r1, lsl #2
20001294:	320c3201 	andcc	r3, ip, #268435456	; 0x10000000
	...

20001458 <bird_flap_geometry>:
20001458:	0000002c 	andeq	r0, r0, ip, lsr #32
2000145c:	0000000d 	andeq	r0, r0, sp
20001460:	0000000c 	andeq	r0, r0, ip
20001464:	08000700 	stmdaeq	r0, {r8, r9, sl}
20001468:	08010601 	stmdaeq	r1, {r0, r9, sl}
2000146c:	05020402 	streq	r0, [r2, #-1026]	; 0xfffffbfe
20001470:	03030802 	movweq	r0, #14338	; 0x3802
20001474:	08030603 	stmdaeq	r3, {r0, r1, r9, sl}
20001478:	0a030903 	beq	200c388c <ts_state+0xc1a84>
2000147c:	02040b03 	andeq	r0, r4, #3072	; 0xc00
20001480:	08040604 	stmdaeq	r4, {r2, r9, sl}
20001484:	03050105 	movweq	r0, #20741	; 0x5105
20001488:	08050605 	stmdaeq	r5, {r0, r2, r9, sl}
2000148c:	04060006 	streq	r0, [r6], #-6
20001490:	06060506 	streq	r0, [r6], -r6, lsl #10
20001494:	09060806 	stmdbeq	r6, {r1, r2, fp}
20001498:	0b060a06 	bleq	20183cb8 <ts_state+0x181eb0>
2000149c:	08070007 	stmdaeq	r7, {r0, r1, r2}
200014a0:	02080008 	andeq	r0, r8, #8, 0
200014a4:	00090808 	andeq	r0, r9, r8, lsl #16
200014a8:	010a0809 	tsteq	sl, r9, lsl #16
200014ac:	040a030a 	streq	r0, [sl], #-778	; 0xfffffcf6
200014b0:	060a050a 	streq	r0, [sl], -sl, lsl #10
200014b4:	020b070a 	andeq	r0, fp, #2621440	; 0x280000
200014b8:	030c030b 	movweq	r0, #49931	; 0xc30b
	...

20001720 <bird_soar_geometry>:
20001720:	0000002f 	andeq	r0, r0, pc, lsr #32
20001724:	0000000e 	andeq	r0, r0, lr
20001728:	0000000c 	andeq	r0, r0, ip
2000172c:	00ff00ff 	ldrshteq	r0, [pc], #15
20001730:	02000000 	andeq	r0, r0, #0, 0
20001734:	08000700 	stmdaeq	r0, {r8, r9, sl}
20001738:	03010001 	movweq	r0, #4097	; 0x1001
2000173c:	08010601 	stmdaeq	r1, {r0, r9, sl}
20001740:	04020002 	streq	r0, [r2], #-2
20001744:	08020502 	stmdaeq	r2, {r1, r8, sl}
20001748:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
2000174c:	08030303 	stmdaeq	r3, {r0, r1, r8, r9}
20001750:	0a030903 	beq	200c3b64 <ts_state+0xc1d5c>
20001754:	02040b03 	andeq	r0, r4, #3072	; 0xc00
20001758:	08040304 	stmdaeq	r4, {r2, r8, r9}
2000175c:	08050105 	stmdaeq	r5, {r0, r2, r8}
20001760:	08060006 	stmdaeq	r6, {r1, r2}
20001764:	0a060906 	beq	20183b84 <ts_state+0x181d7c>
20001768:	00070b06 	andeq	r0, r7, r6, lsl #22
2000176c:	00080807 	andeq	r0, r8, r7, lsl #16
20001770:	08080208 	stmdaeq	r8, {r3, r9}
20001774:	08090009 	stmdaeq	r9, {r0, r3}
20001778:	030a010a 	movweq	r0, #41226	; 0xa10a
2000177c:	050a040a 	streq	r0, [sl, #-1034]	; 0xfffffbf6
20001780:	070a060a 	streq	r0, [sl, -sl, lsl #12]
20001784:	030b020b 	movweq	r0, #45579	; 0xb20b
20001788:	0000030c 	andeq	r0, r0, ip, lsl #6
	...

200019e8 <starting_screen_geometry>:
200019e8:	0000013d 	andeq	r0, r0, sp, lsr r1
200019ec:	00000043 	andeq	r0, r0, r3, asr #32
200019f0:	00000025 	andeq	r0, r0, r5, lsr #32
200019f4:	00030002 	andeq	r0, r3, r2
200019f8:	01010004 	tsteq	r1, r4
200019fc:	01040102 	tsteq	r4, r2, lsl #2
20001a00:	02000105 	andeq	r0, r0, #1073741825	; 0x40000001
20001a04:	02050201 	andeq	r0, r5, #268435456	; 0x10000000
20001a08:	03000206 	movweq	r0, #518	; 0x206
20001a0c:	04000306 	streq	r0, [r0], #-774	; 0xfffffcfa
20001a10:	05000406 	streq	r0, [r0, #-1030]	; 0xfffffbfa
20001a14:	06000506 	streq	r0, [r0], -r6, lsl #10
20001a18:	07000606 	streq	r0, [r0, -r6, lsl #12]
20001a1c:	08010706 	stmdaeq	r1, {r1, r2, r8, r9, sl}
20001a20:	09020805 	stmdbeq	r2, {r0, r2, fp}
20001a24:	09040903 	stmdbeq	r4, {r0, r1, r8, fp}
20001a28:	0a030a02 	beq	200c4238 <ts_state+0xc2430>
20001a2c:	0b010a04 	bleq	20044244 <ts_state+0x4243c>
20001a30:	0c000b05 			; <UNDEFINED> instruction: 0x0c000b05
20001a34:	0dff0c06 	ldcleq	12, cr0, [pc, #24]!	; 20001a54 <starting_screen_geometry+0x6c>
20001a38:	0eff0d07 	cdpeq	13, 15, cr0, cr15, cr7, {0}
20001a3c:	0fff0e07 	svceq	0x00ff0e07
20001a40:	10ff0f07 	rscsne	r0, pc, r7, lsl #30
20001a44:	11ff1007 	mvnsne	r1, r7
20001a48:	12001107 	andne	r1, r0, #-1073741823	; 0xc0000001
20001a4c:	13011206 	movwne	r1, #4614	; 0x1206
20001a50:	13031302 	movwne	r1, #13058	; 0x3302
20001a54:	13051304 	movwne	r1, #21252	; 0x5304
20001a58:	0c0b0c0a 	stceq	12, cr0, [fp], {10}
20001a5c:	0c0d0c0c 	stceq	12, cr0, [sp], {12}
20001a60:	07100610 			; <UNDEFINED> instruction: 0x07100610
20001a64:	09100810 	ldmdbeq	r0, {r4, fp}
20001a68:	0b100a10 	bleq	204042b0 <ts_state+0x4024a8>
20001a6c:	0c110c10 	ldceq	12, cr0, [r1], {16}
20001a70:	0c130c12 	ldceq	12, cr0, [r3], {18}
20001a74:	0d140d10 	ldceq	13, cr0, [r4, #-64]	; 0xffffffc0
20001a78:	0e150e10 	mrceq	14, 0, r0, cr5, cr0, {0}
20001a7c:	0f150f10 	svceq	0x00150f10
20001a80:	10141010 	andsne	r1, r4, r0, lsl r0
20001a84:	11111110 	tstne	r1, r0, lsl r1
20001a88:	11131112 	tstne	r3, r2, lsl r1
20001a8c:	0b170917 	bleq	205c3ef0 <ts_state+0x5c20e8>
20001a90:	0d170c17 	ldceq	12, cr0, [r7, #-92]	; 0xffffffa4
20001a94:	0f170e17 	svceq	0x00170e17
20001a98:	11171017 	tstne	r7, r7, lsl r0
20001a9c:	0a1a091a 	beq	20683f0c <ts_state+0x682104>
20001aa0:	0c1a0b1a 			; <UNDEFINED> instruction: 0x0c1a0b1a
20001aa4:	0d1a0d19 	ldceq	13, cr0, [sl, #-100]	; 0xffffff9c
20001aa8:	0e1a0d1b 	mrceq	13, 0, r0, cr10, cr11, {0}
20001aac:	101a0f1a 	andsne	r0, sl, sl, lsl pc
20001ab0:	111b111a 	tstne	fp, sl, lsl r1
20001ab4:	0621111c 			; <UNDEFINED> instruction: 0x0621111c
20001ab8:	08210721 	stmdaeq	r1!, {r0, r5, r8, r9, sl}
20001abc:	0a210921 	beq	20843f48 <ts_state+0x842140>
20001ac0:	0c210b21 			; <UNDEFINED> instruction: 0x0c210b21
20001ac4:	0c230c22 	stceq	12, cr0, [r3], #-136	; 0xffffff78
20001ac8:	0d210c24 	stceq	12, cr0, [r1, #-144]!	; 0xffffff70
20001acc:	0e210d25 	cdpeq	13, 2, cr0, cr1, cr5, {1}
20001ad0:	0f210e26 	svceq	0x00210e26
20001ad4:	10210f26 	eorne	r0, r1, r6, lsr #30
20001ad8:	11211025 			; <UNDEFINED> instruction: 0x11211025
20001adc:	11231122 			; <UNDEFINED> instruction: 0x11231122
20001ae0:	09281124 	stmdbeq	r8!, {r2, r5, r8, ip}
20001ae4:	0c280b28 			; <UNDEFINED> instruction: 0x0c280b28
20001ae8:	0e280d28 	cdpeq	13, 2, cr0, cr8, cr8, {1}
20001aec:	10280f28 	eorne	r0, r8, r8, lsr #30
20001af0:	0b2b1128 	bleq	20ac5f98 <ts_state+0xac4190>
20001af4:	0b2e0b2d 	bleq	20b847b0 <ts_state+0xb829a8>
20001af8:	0c2c0c2b 	stceq	12, cr0, [ip], #-172	; 0xffffff54
20001afc:	0e2b0d2b 	cdpeq	13, 2, cr0, cr11, cr11, {1}
20001b00:	102b0f2b 	eorne	r0, fp, fp, lsr #30
20001b04:	0633112b 	ldrteq	r1, [r3], -fp, lsr #2
20001b08:	08330733 	ldmdaeq	r3!, {r0, r1, r4, r5, r8, r9, sl}
20001b0c:	0a330933 	beq	20cc3fe0 <ts_state+0xcc21d8>
20001b10:	0c330b33 			; <UNDEFINED> instruction: 0x0c330b33
20001b14:	0c310c32 	ldceq	12, cr0, [r1], #-200	; 0xffffff38
20001b18:	0d330c30 	ldceq	12, cr0, [r3, #-192]!	; 0xffffff40
20001b1c:	0e330d2f 	cdpeq	13, 3, cr0, cr3, cr15, {1}
20001b20:	0f330e2e 	svceq	0x00330e2e
20001b24:	10330f2e 	eorsne	r0, r3, lr, lsr #30
20001b28:	1133102f 	teqne	r3, pc, lsr #32
20001b2c:	11311132 	teqne	r1, r2, lsr r1
20001b30:	00351130 	eorseq	r1, r5, r0, lsr r1
20001b34:	00370036 	eorseq	r0, r7, r6, lsr r0
20001b38:	00390038 	eorseq	r0, r9, r8, lsr r0
20001b3c:	02370137 	eorseq	r0, r7, #-1073741811	; 0xc000000d
20001b40:	04370337 	ldrteq	r0, [r7], #-823	; 0xfffffcc9
20001b44:	003c0537 	eorseq	r0, ip, r7, lsr r5
20001b48:	013b0040 	teqeq	fp, r0, asr #32
20001b4c:	013f013d 	teqeq	pc, sp, lsr r1	; <UNPREDICTABLE>
20001b50:	023b0141 	eorseq	r0, fp, #1073741840	; 0x40000010
20001b54:	0241023e 	subeq	r0, r1, #-536870909	; 0xe0000003
20001b58:	0341033b 	movteq	r0, #4923	; 0x133b
20001b5c:	0441043b 	strbeq	r0, [r1], #-1083	; 0xfffffbc5
20001b60:	0541053b 	strbeq	r0, [r1, #-1339]	; 0xfffffac5
20001b64:	16111610 			; <UNDEFINED> instruction: 0x16111610
20001b68:	16131612 			; <UNDEFINED> instruction: 0x16131612
20001b6c:	17141710 			; <UNDEFINED> instruction: 0x17141710
20001b70:	18151810 	ldmdane	r5, {r4, fp, ip}
20001b74:	19151910 	ldmdbne	r5, {r4, r8, fp, ip}
20001b78:	1a111a10 	bne	204483c0 <ts_state+0x4465b8>
20001b7c:	1a131a12 	bne	204c83cc <ts_state+0x4c65c4>
20001b80:	1b101a14 	blne	204083d8 <ts_state+0x4065d0>
20001b84:	1d101c10 	ldcne	12, cr1, [r0, #-64]	; 0xffffffc0
20001b88:	19191917 	ldmdbne	r9, {r0, r1, r2, r4, r8, fp, ip}
20001b8c:	1a17191a 	bne	205c7ffc <ts_state+0x5c61f4>
20001b90:	1b171a18 	blne	205c83f8 <ts_state+0x5c65f0>
20001b94:	1d171c17 	ldcne	12, cr1, [r7, #-92]	; 0xffffffa4
20001b98:	191e191d 	ldmdbne	lr, {r0, r2, r3, r4, r8, fp, ip}
20001b9c:	1a1f1a1c 	bne	207c8414 <ts_state+0x7c660c>
20001ba0:	1b1d1b1c 	blne	20748818 <ts_state+0x746a10>
20001ba4:	1b1f1b1e 	blne	207c8824 <ts_state+0x7c6a1c>
20001ba8:	1d1c1c1c 	ldcne	12, cr1, [ip, #-112]	; 0xffffff90
20001bac:	1d1e1d1d 	ldcne	13, cr1, [lr, #-116]	; 0xffffff8c
20001bb0:	19221d1f 	stmdbne	r2!, {r0, r1, r2, r3, r4, r8, sl, fp, ip}
20001bb4:	19241923 	stmdbne	r4!, {r0, r1, r5, r8, fp, ip}
20001bb8:	1b231a22 	blne	208c8448 <ts_state+0x8c6640>
20001bbc:	1d221c24 	stcne	12, cr1, [r2, #-144]!	; 0xffffff70
20001bc0:	1d241d23 	stcne	13, cr1, [r4, #-140]!	; 0xffffff74
20001bc4:	19281927 	stmdbne	r8!, {r0, r1, r2, r5, r8, fp, ip}
20001bc8:	1a271929 	bne	209c8074 <ts_state+0x9c626c>
20001bcc:	1c291b28 			; <UNDEFINED> instruction: 0x1c291b28
20001bd0:	1d281d27 	stcne	13, cr1, [r8, #-156]!	; 0xffffff64
20001bd4:	172d1d29 	strne	r1, [sp, -r9, lsr #26]!
20001bd8:	192f182d 	stmdbne	pc!, {r0, r2, r3, r5, fp, ip}	; <UNPREDICTABLE>
20001bdc:	19311930 	ldmdbne	r1!, {r4, r5, r8, fp, ip}
20001be0:	1a2f1932 	bne	20bc80b0 <ts_state+0xbc62a8>
20001be4:	1b301b2f 	blne	20c088a8 <ts_state+0xc06aa0>
20001be8:	1c321b31 			; <UNDEFINED> instruction: 0x1c321b31
20001bec:	1d301d2f 	ldcne	13, cr1, [r0, #-188]!	; 0xffffff44
20001bf0:	17341d31 			; <UNDEFINED> instruction: 0x17341d31
20001bf4:	1f101834 	svcne	0x00101834
20001bf8:	210f2010 	tstcs	pc, r0, lsl r0	; <UNPREDICTABLE>
20001bfc:	21112110 	tstcs	r1, r0, lsl r1
20001c00:	23102210 	tstcs	r0, #16, 4
20001c04:	24112410 	ldrcs	r2, [r1], #-1040	; 0xfffffbf0
20001c08:	21142412 	tstcs	r4, r2, lsl r4
20001c0c:	22132115 	andscs	r2, r3, #1073741829	; 0x40000005
20001c10:	23132216 	tstcs	r3, #1610612737	; 0x60000001
20001c14:	24142316 	ldrcs	r2, [r4], #-790	; 0xfffffcea
20001c18:	1f1a2415 	svcne	0x001a2415
20001c1c:	1f1c1f1b 	svcne	0x001c1f1b
20001c20:	201a1f1d 	andscs	r1, sl, sp, lsl pc
20001c24:	211a201e 	tstcs	sl, lr, lsl r0
20001c28:	221a211e 	andscs	r2, sl, #-2147483641	; 0x80000007
20001c2c:	221c221b 	andscs	r2, ip, #-1342177279	; 0xb0000001
20001c30:	231a221d 	tstcs	sl, #-805306367	; 0xd0000001
20001c34:	1f20241a 	svcne	0x0020241a
20001c38:	21202020 			; <UNDEFINED> instruction: 0x21202020
20001c3c:	23202220 			; <UNDEFINED> instruction: 0x23202220
20001c40:	24212420 	strtcs	r2, [r1], #-1056	; 0xfffffbe0
20001c44:	20252024 	eorcs	r2, r5, r4, lsr #32
20001c48:	21232026 			; <UNDEFINED> instruction: 0x21232026
20001c4c:	22232127 	eorcs	r2, r3, #-1073741815	; 0xc0000009
20001c50:	23232227 			; <UNDEFINED> instruction: 0x23232227
20001c54:	24242327 	strtcs	r2, [r4], #-807	; 0xfffffcd9
20001c58:	24262425 	strtcs	r2, [r6], #-1061	; 0xfffffbdb
20001c5c:	24292428 	strtcs	r2, [r9], #-1064	; 0xfffffbd8
20001c60:	202f202b 	eorcs	r2, pc, fp, lsr #32
20001c64:	212e212c 			; <UNDEFINED> instruction: 0x212e212c
20001c68:	232c222d 			; <UNDEFINED> instruction: 0x232c222d
20001c6c:	0000242b 	andeq	r2, r0, fp, lsr #8
	...

20001cb0 <starting_screen_obj>:
20001cb0:	200019e8 	andcs	r1, r0, r8, ror #19
	...
20001cbc:	00000020 	andeq	r0, r0, r0, lsr #32
20001cc0:	00000010 	andeq	r0, r0, r0, lsl r0
20001cc4:	20000643 	andcs	r0, r0, r3, asr #12
20001cc8:	200006a3 	andcs	r0, r0, r3, lsr #13
	...

20001cd4 <obstacle_top_obj_1>:
20001cd4:	20000ec8 	andcs	r0, r0, r8, asr #29
	...
20001ce0:	0000003c 	andeq	r0, r0, ip, lsr r0
20001ce4:	ffffffe3 			; <UNDEFINED> instruction: 0xffffffe3
20001ce8:	20000643 	andcs	r0, r0, r3, asr #12
20001cec:	200006a3 	andcs	r0, r0, r3, lsr #13
20001cf0:	20000703 	andcs	r0, r0, r3, lsl #14
20001cf4:	2000073f 	andcs	r0, r0, pc, lsr r7

20001cf8 <obstacle_bottom_obj_1>:
20001cf8:	20001190 	mulcs	r0, r0, r1
	...
20001d04:	0000003c 	andeq	r0, r0, ip, lsr r0
20001d08:	0000002b 	andeq	r0, r0, fp, lsr #32
20001d0c:	20000643 	andcs	r0, r0, r3, asr #12
20001d10:	200006a3 	andcs	r0, r0, r3, lsr #13
20001d14:	20000703 	andcs	r0, r0, r3, lsl #14
20001d18:	2000073f 	andcs	r0, r0, pc, lsr r7

20001d1c <obstacle_top_obj_2>:
20001d1c:	20000ec8 	andcs	r0, r0, r8, asr #29
	...
20001d28:	00000082 	andeq	r0, r0, r2, lsl #1
20001d2c:	ffffffe3 			; <UNDEFINED> instruction: 0xffffffe3
20001d30:	20000643 	andcs	r0, r0, r3, asr #12
20001d34:	200006a3 	andcs	r0, r0, r3, lsr #13
20001d38:	20000703 	andcs	r0, r0, r3, lsl #14
20001d3c:	2000073f 	andcs	r0, r0, pc, lsr r7

20001d40 <obstacle_bottom_obj_2>:
20001d40:	20001190 	mulcs	r0, r0, r1
	...
20001d4c:	00000082 	andeq	r0, r0, r2, lsl #1
20001d50:	0000002b 	andeq	r0, r0, fp, lsr #32
20001d54:	20000643 	andcs	r0, r0, r3, asr #12
20001d58:	200006a3 	andcs	r0, r0, r3, lsr #13
20001d5c:	20000703 	andcs	r0, r0, r3, lsl #14
20001d60:	2000073f 	andcs	r0, r0, pc, lsr r7

20001d64 <bird_soar_obj>:
20001d64:	20001720 	andcs	r1, r0, r0, lsr #14
	...
20001d70:	00000005 	andeq	r0, r0, r5
20001d74:	0000001e 	andeq	r0, r0, lr, lsl r0
20001d78:	20000643 	andcs	r0, r0, r3, asr #12
20001d7c:	200006a3 	andcs	r0, r0, r3, lsr #13
20001d80:	20000703 	andcs	r0, r0, r3, lsl #14
20001d84:	2000073f 	andcs	r0, r0, pc, lsr r7

20001d88 <bird_flap_obj>:
20001d88:	20001458 	andcs	r1, r0, r8, asr r4
	...
20001d94:	00000005 	andeq	r0, r0, r5
20001d98:	0000001e 	andeq	r0, r0, lr, lsl r0
20001d9c:	20000643 	andcs	r0, r0, r3, asr #12
20001da0:	200006a3 	andcs	r0, r0, r3, lsr #13
20001da4:	20000703 	andcs	r0, r0, r3, lsl #14
20001da8:	2000073f 	andcs	r0, r0, pc, lsr r7

20001dac <bird.4205>:
20001dac:	20001d64 	andcs	r1, r0, r4, ror #26

20001db0 <obstacle_top_1.4201>:
20001db0:	20001cd4 	ldrdcs	r1, [r0], -r4

20001db4 <obstacle_bottom_1.4202>:
20001db4:	20001cf8 	strdcs	r1, [r0], -r8

20001db8 <obstacle_top_2.4203>:
20001db8:	20001d1c 	andcs	r1, r0, ip, lsl sp

20001dbc <obstacle_bottom_2.4204>:
20001dbc:	20001d40 	andcs	r1, r0, r0, asr #26

20001dc0 <start_screen.4206>:
20001dc0:	20001cb0 			; <UNDEFINED> instruction: 0x20001cb0
20001dc4:	20000376 	andcs	r0, r0, r6, ror r3
20001dc8:	2000034e 	andcs	r0, r0, lr, asr #6
20001dcc:	20000356 	andcs	r0, r0, r6, asr r3
20001dd0:	2000035e 	andcs	r0, r0, lr, asr r3
20001dd4:	20000366 	andcs	r0, r0, r6, ror #6
20001dd8:	2000036e 	andcs	r0, r0, lr, ror #6
20001ddc:	0a030201 	beq	200c25e8 <ts_state+0xc07e0>
20001de0:	0b060504 	bleq	201831f8 <ts_state+0x1813f0>
20001de4:	0c090807 	stceq	8, cr0, [r9], {7}
20001de8:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 20001db8 <obstacle_top_2.4203>
20001dec:	4f5b063f 	svcmi	0x005b063f
20001df0:	077d6d66 	ldrbeq	r6, [sp, -r6, ror #26]!
20001df4:	7c77677f 	ldclvc	7, cr6, [r7], #-508	; 0xfffffe04
20001df8:	71795e39 	cmnvc	r9, r9, lsr lr
20001dfc:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
20001e00:	203a7374 	eorscs	r7, sl, r4, ror r3
20001e04:	00000000 	andeq	r0, r0, r0

20001e08 <ts_state>:
20001e08:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000add 	ldrdeq	r0, [r0], -sp
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000029e 	muleq	r0, lr, r2
  10:	0001d20c 	andeq	sp, r1, ip, lsl #4
  14:	0000dd00 	andeq	sp, r0, r0, lsl #26
	...
  24:	01bf0200 			; <UNDEFINED> instruction: 0x01bf0200
  28:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
  2c:	00003705 	andeq	r3, r0, r5, lsl #14
  30:	08030500 	stmdaeq	r3, {r8, sl}
  34:	0320001e 			; <UNDEFINED> instruction: 0x0320001e
  38:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  3c:	e0040074 	and	r0, r4, r4, ror r0
  40:	01000004 	tsteq	r0, r4
  44:	00500d3f 	subseq	r0, r0, pc, lsr sp
  48:	03050000 	movweq	r0, #20480	; 0x5000
  4c:	20000ec4 	andcs	r0, r0, r4, asr #29
  50:	99080105 	stmdbls	r8, {r0, r2, r8}
  54:	06000002 	streq	r0, [r0], -r2
  58:	01430102 	cmpeq	r3, r2, lsl #2
  5c:	00007a09 	andeq	r7, r0, r9, lsl #20
  60:	00780700 	rsbseq	r0, r8, r0, lsl #14
  64:	07014401 	streq	r4, [r1, -r1, lsl #8]
  68:	00000050 	andeq	r0, r0, r0, asr r0
  6c:	00790700 	rsbseq	r0, r9, r0, lsl #14
  70:	09014401 	stmdbeq	r1, {r0, sl, lr}
  74:	00000050 	andeq	r0, r0, r0, asr r0
  78:	a1080001 	tstge	r8, r1
  7c:	01000001 	tsteq	r0, r1
  80:	57030145 	strpl	r0, [r3, -r5, asr #2]
  84:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  88:	470102c8 	strmi	r0, [r1, -r8, asr #5]
  8c:	00ca0901 	sbceq	r0, sl, r1, lsl #18
  90:	860a0000 	strhi	r0, [sl], -r0
  94:	01000002 	tsteq	r0, r2
  98:	37060148 	strcc	r0, [r6, -r8, asr #2]
  9c:	00000000 	andeq	r0, r0, r0
  a0:	0002390a 	andeq	r3, r2, sl, lsl #18
  a4:	01490100 	mrseq	r0, (UNDEF: 89)
  a8:	00003706 	andeq	r3, r0, r6, lsl #14
  ac:	3f0a0400 	svccc	0x000a0400
  b0:	01000002 	tsteq	r0, r2
  b4:	3706014a 	strcc	r0, [r6, -sl, asr #2]
  b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  bc:	00787007 	rsbseq	r7, r8, r7
  c0:	08014b01 	stmdaeq	r1, {r0, r8, r9, fp, lr}
  c4:	000000ca 	andeq	r0, r0, sl, asr #1
  c8:	7a0b000c 	bvc	2c0100 <startup-0x1fd3ff00>
  cc:	db000000 	blle	d4 <startup-0x1fffff2c>
  d0:	0c000000 	stceq	0, cr0, [r0], {-0}
  d4:	000000db 	ldrdeq	r0, [r0], -fp
  d8:	0500015d 	streq	r0, [r0, #-349]	; 0xfffffea3
  dc:	03400704 	movteq	r0, #1796	; 0x704
  e0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
  e4:	01000001 	tsteq	r0, r1
  e8:	8703014c 	strhi	r0, [r3, -ip, asr #2]
  ec:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
  f0:	00000108 	andeq	r0, r0, r8, lsl #2
  f4:	0e014c01 	cdpeq	12, 0, cr4, cr1, cr1, {0}
  f8:	000000fc 	strdeq	r0, [r0], -ip
  fc:	0087040d 	addeq	r0, r7, sp, lsl #8
 100:	f40e0000 	vst4.8	{d0-d3}, [lr], r0
 104:	24000003 	strcs	r0, [r0], #-3
 108:	10014e01 	andne	r4, r1, r1, lsl #28
 10c:	0000018f 	andeq	r0, r0, pc, lsl #3
 110:	6f656707 	svcvs	0x00656707
 114:	014f0100 	mrseq	r0, (UNDEF: 95)
 118:	0000ef0c 	andeq	lr, r0, ip, lsl #30
 11c:	c80a0000 	stmdagt	sl, {}	; <UNPREDICTABLE>
 120:	01000001 	tsteq	r0, r1
 124:	37060150 	smlsdcc	r6, r0, r1, r0
 128:	04000000 	streq	r0, [r0], #-0
 12c:	0001cd0a 	andeq	ip, r1, sl, lsl #26
 130:	01500100 	cmpeq	r0, r0, lsl #2
 134:	0000370c 	andeq	r3, r0, ip, lsl #14
 138:	000a0800 	andeq	r0, sl, r0, lsl #16
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	37060151 	smlsdcc	r6, r1, r1, r0
 144:	0c000000 	stceq	0, cr0, [r0], {-0}
 148:	0001ba0a 	andeq	fp, r1, sl, lsl #20
 14c:	01510100 	cmpeq	r1, r0, lsl #2
 150:	0000370c 	andeq	r3, r0, ip, lsl #14
 154:	510a1000 	mrspl	r1, (UNDEF: 10)
 158:	01000004 	tsteq	r0, r4
 15c:	a0090152 	andge	r0, r9, r2, asr r1
 160:	14000001 	strne	r0, [r0], #-1
 164:	0003860a 	andeq	r8, r3, sl, lsl #12
 168:	01530100 	cmpeq	r3, r0, lsl #2
 16c:	0001a009 	andeq	sl, r1, r9
 170:	eb0a1800 	bl	286178 <startup-0x1fd79e88>
 174:	01000004 	tsteq	r0, r4
 178:	b5090154 	strlt	r0, [r9, #-340]	; 0xfffffeac
 17c:	1c000001 	stcne	0, cr0, [r0], {1}
 180:	0004560a 	andeq	r5, r4, sl, lsl #12
 184:	01550100 	cmpeq	r5, r0, lsl #2
 188:	0001d00a 	andeq	sp, r1, sl
 18c:	0f002000 	svceq	0x00002000
 190:	0000019a 	muleq	r0, sl, r1
 194:	00019a10 	andeq	r9, r1, r0, lsl sl
 198:	040d0000 	streq	r0, [sp], #-0
 19c:	00000102 	andeq	r0, r0, r2, lsl #2
 1a0:	018f040d 	orreq	r0, pc, sp, lsl #8
 1a4:	37110000 	ldrcc	r0, [r1, -r0]
 1a8:	b5000000 	strlt	r0, [r0, #-0]
 1ac:	10000001 	andne	r0, r0, r1
 1b0:	0000019a 	muleq	r0, sl, r1
 1b4:	a6040d00 	strge	r0, [r4], -r0, lsl #26
 1b8:	0f000001 	svceq	0x00000001
 1bc:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1c0:	00019a10 	andeq	r9, r1, r0, lsl sl
 1c4:	00371000 	eorseq	r1, r7, r0
 1c8:	37100000 	ldrcc	r0, [r0, -r0]
 1cc:	00000000 	andeq	r0, r0, r0
 1d0:	01bb040d 			; <UNDEFINED> instruction: 0x01bb040d
 1d4:	d1080000 	mrsle	r0, (UNDEF: 8)
 1d8:	01000004 	tsteq	r0, r4
 1dc:	02030156 	andeq	r0, r3, #-2147483627	; 0x80000015
 1e0:	08000001 	stmdaeq	r0, {r0}
 1e4:	000004d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 1e8:	0c015601 	stceq	6, cr5, [r1], {1}
 1ec:	0000019a 	muleq	r0, sl, r1
 1f0:	00016212 	andeq	r6, r1, r2, lsl r2
 1f4:	01940100 	orrseq	r0, r4, r0, lsl #2
 1f8:	0000e20a 	andeq	lr, r0, sl, lsl #4
 1fc:	c8030500 	stmdagt	r3, {r8, sl}
 200:	1220000e 	eorne	r0, r0, #14, 0
 204:	000003db 	ldrdeq	r0, [r0], -fp
 208:	0a01cf01 	beq	73e14 <startup-0x1ff8c1ec>
 20c:	000000e2 	andeq	r0, r0, r2, ror #1
 210:	11900305 	orrsne	r0, r0, r5, lsl #6
 214:	0d122000 	ldceq	0, cr2, [r2, #-0]
 218:	01000004 	tsteq	r0, r4
 21c:	e20a020a 	and	r0, sl, #-1610612736	; 0xa0000000
 220:	05000000 	streq	r0, [r0, #-0]
 224:	00145803 	andseq	r5, r4, r3, lsl #16
 228:	00331220 	eorseq	r1, r3, r0, lsr #4
 22c:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
 230:	00e20a02 	rsceq	r0, r2, r2, lsl #20
 234:	03050000 	movweq	r0, #20480	; 0x5000
 238:	20001720 	andcs	r1, r0, r0, lsr #14
 23c:	0000bf12 	andeq	fp, r0, r2, lsl pc
 240:	02330100 	eorseq	r0, r3, #0
 244:	0000e20a 	andeq	lr, r0, sl, lsl #4
 248:	e8030500 	stmda	r3, {r8, sl}
 24c:	13200019 			; <UNDEFINED> instruction: 0x13200019
 250:	000003f9 	strdeq	r0, [r0], -r9
 254:	0f02fb01 	svceq	0x0002fb01
 258:	000001d6 	ldrdeq	r0, [r0], -r6
 25c:	1cb00305 	ldcne	3, cr0, [r0], #20
 260:	fd132000 	ldc2	0, cr2, [r3, #-0]
 264:	01000001 	tsteq	r0, r1
 268:	d60f0303 	strle	r0, [pc], -r3, lsl #6
 26c:	05000001 	streq	r0, [r0, #-1]
 270:	001cd403 	andseq	sp, ip, r3, lsl #8
 274:	02231320 	eoreq	r1, r3, #32, 6	; 0x80000000
 278:	0d010000 	stceq	0, cr0, [r1, #-0]
 27c:	01d60f03 	bicseq	r0, r6, r3, lsl #30
 280:	03050000 	movweq	r0, #20480	; 0x5000
 284:	20001cf8 	strdcs	r1, [r0], -r8
 288:	00021013 	andeq	r1, r2, r3, lsl r0
 28c:	03170100 	tsteq	r7, #0
 290:	0001d60f 	andeq	sp, r1, pc, lsl #12
 294:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
 298:	1320001d 			; <UNDEFINED> instruction: 0x1320001d
 29c:	00000178 	andeq	r0, r0, r8, ror r1
 2a0:	0f032101 	svceq	0x00032101
 2a4:	000001d6 	ldrdeq	r0, [r0], -r6
 2a8:	1d400305 	stclne	3, cr0, [r0, #-20]	; 0xffffffec
 2ac:	54132000 	ldrpl	r2, [r3], #-0
 2b0:	01000001 	tsteq	r0, r1
 2b4:	d60f032b 	strle	r0, [pc], -fp, lsr #6
 2b8:	05000001 	streq	r0, [r0, #-1]
 2bc:	001d6403 	andseq	r6, sp, r3, lsl #8
 2c0:	00461320 	subeq	r1, r6, r0, lsr #6
 2c4:	35010000 	strcc	r0, [r1, #-0]
 2c8:	01d60f03 	bicseq	r0, r6, r3, lsl #30
 2cc:	03050000 	movweq	r0, #20480	; 0x5000
 2d0:	20001d88 	andcs	r1, r0, r8, lsl #27
 2d4:	0000d814 	andeq	sp, r0, r4, lsl r8
 2d8:	034e0100 	movteq	r0, #57600	; 0xe100
 2dc:	00087206 	andeq	r7, r8, r6, lsl #4
 2e0:	00036620 	andeq	r6, r3, r0, lsr #12
 2e4:	bc9c0100 	ldflts	f0, [ip], {0}
 2e8:	15000003 	strne	r0, [r0, #-3]
 2ec:	55010073 	strpl	r0, [r1, #-115]	; 0xffffff8d
 2f0:	03bc0803 			; <UNDEFINED> instruction: 0x03bc0803
 2f4:	91020000 	mrsls	r0, (UNDEF: 2)
 2f8:	031a136c 	tsteq	sl, #108, 6	; 0xb0000001
 2fc:	56010000 	strpl	r0, [r1], -r0
 300:	03c20703 	biceq	r0, r2, #786432	; 0xc0000
 304:	91020000 	mrsls	r0, (UNDEF: 2)
 308:	002c1358 	eoreq	r1, ip, r8, asr r3
 30c:	5f010000 	svcpl	0x00010000
 310:	03d20803 	bicseq	r0, r2, #196608	; 0x30000
 314:	91020000 	mrsls	r0, (UNDEF: 2)
 318:	02891366 	addeq	r1, r9, #-1744830463	; 0x98000001
 31c:	60010000 	andvs	r0, r1, r0
 320:	00370603 	eorseq	r0, r7, r3, lsl #12
 324:	91020000 	mrsls	r0, (UNDEF: 2)
 328:	008e1368 	addeq	r1, lr, r8, ror #6
 32c:	62010000 	andvs	r0, r1, #0, 0
 330:	01e31103 	mvneq	r1, r3, lsl #2
 334:	03050000 	movweq	r0, #20480	; 0x5000
 338:	20001db0 			; <UNDEFINED> instruction: 0x20001db0
 33c:	00005413 	andeq	r5, r0, r3, lsl r4
 340:	03630100 	cmneq	r3, #0
 344:	0001e311 	andeq	lr, r1, r1, lsl r3
 348:	b4030500 	strlt	r0, [r3], #-1280	; 0xfffffb00
 34c:	1320001d 			; <UNDEFINED> instruction: 0x1320001d
 350:	0000009d 	muleq	r0, sp, r0
 354:	11036401 	tstne	r3, r1, lsl #8
 358:	000001e3 	andeq	r0, r0, r3, ror #3
 35c:	1db80305 	ldcne	3, cr0, [r8, #20]!
 360:	66132000 	ldrvs	r2, [r3], -r0
 364:	01000000 	mrseq	r0, (UNDEF: 0)
 368:	e3110365 	tst	r1, #-1811939327	; 0x94000001
 36c:	05000001 	streq	r0, [r0, #-1]
 370:	001dbc03 	andseq	fp, sp, r3, lsl #24
 374:	03981320 	orrseq	r1, r8, #32, 6	; 0x80000000
 378:	66010000 	strvs	r0, [r1], -r0
 37c:	01e31103 	mvneq	r1, r3, lsl #2
 380:	03050000 	movweq	r0, #20480	; 0x5000
 384:	20001dac 	andcs	r1, r0, ip, lsr #27
 388:	0003ce13 	andeq	ip, r3, r3, lsl lr
 38c:	03670100 	cmneq	r7, #0
 390:	0001e311 	andeq	lr, r1, r1, lsl r3
 394:	c0030500 	andgt	r0, r3, r0, lsl #10
 398:	1320001d 			; <UNDEFINED> instruction: 0x1320001d
 39c:	0000034d 	andeq	r0, r0, sp, asr #6
 3a0:	08036901 	stmdaeq	r3, {r0, r8, fp, sp, lr}
 3a4:	000003d2 	ldrdeq	r0, [r0], -r2
 3a8:	13649102 	cmnne	r4, #-2147483648	; 0x80000000
 3ac:	0000038c 	andeq	r0, r0, ip, lsl #7
 3b0:	08036a01 	stmdaeq	r3, {r0, r9, fp, sp, lr}
 3b4:	000003d2 	ldrdeq	r0, [r0], -r2
 3b8:	00629102 	rsbeq	r9, r2, r2, lsl #2
 3bc:	0050040d 	subseq	r0, r0, sp, lsl #8
 3c0:	500b0000 	andpl	r0, fp, r0
 3c4:	d2000000 	andle	r0, r0, #0, 0
 3c8:	16000003 	strne	r0, [r0], -r3
 3cc:	000000db 	ldrdeq	r0, [r0], -fp
 3d0:	02050008 	andeq	r0, r5, #8, 0
 3d4:	00007805 	andeq	r7, r0, r5, lsl #16
 3d8:	00ac1700 	adceq	r1, ip, r0, lsl #14
 3dc:	3f010000 	svccc	0x00010000
 3e0:	081c0603 	ldmdaeq	ip, {r0, r1, r9, sl}
 3e4:	00562000 	subseq	r2, r6, r0
 3e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 3ec:	0000044f 	andeq	r0, r0, pc, asr #8
 3f0:	31746f18 	cmncc	r4, r8, lsl pc
 3f4:	033f0100 	teqeq	pc, #0
 3f8:	0001e321 	andeq	lr, r1, r1, lsr #6
 3fc:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 400:	31626f18 	cmncc	r2, r8, lsl pc
 404:	033f0100 	teqeq	pc, #0
 408:	0001e32e 	andeq	lr, r1, lr, lsr #6
 40c:	70910200 	addsvc	r0, r1, r0, lsl #4
 410:	32746f18 	rsbscc	r6, r4, #24, 30	; 0x60
 414:	033f0100 	teqeq	pc, #0
 418:	0001e33b 	andeq	lr, r1, fp, lsr r3
 41c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 420:	32626f18 	rsbcc	r6, r2, #24, 30	; 0x60
 424:	033f0100 	teqeq	pc, #0
 428:	0001e348 	andeq	lr, r1, r8, asr #6
 42c:	68910200 	ldmvs	r1, {r9}
 430:	00736218 	rsbseq	r6, r3, r8, lsl r2
 434:	55033f01 	strpl	r3, [r3, #-3841]	; 0xfffff0ff
 438:	000001e3 	andeq	r0, r0, r3, ror #3
 43c:	18009102 	stmdane	r0, {r1, r8, ip, pc}
 440:	01006662 	tsteq	r0, r2, ror #12
 444:	e361033f 	cmn	r1, #-67108864	; 0xfc000000
 448:	02000001 	andeq	r0, r0, #1, 0
 44c:	14000491 	strne	r0, [r0], #-1169	; 0xfffffb6f
 450:	00000130 	andeq	r0, r0, r0, lsr r1
 454:	06018d01 	streq	r8, [r1], -r1, lsl #26
 458:	200007d6 	ldrdcs	r0, [r0], -r6
 45c:	00000046 	andeq	r0, r0, r6, asr #32
 460:	04c39c01 	strbeq	r9, [r3], #3073	; 0xc01
 464:	78180000 	ldmdavc	r8, {}	; <UNPREDICTABLE>
 468:	018d0100 	orreq	r0, sp, r0, lsl #2
 46c:	0000371d 	andeq	r3, r0, sp, lsl r7
 470:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 474:	01007918 	tsteq	r0, r8, lsl r9
 478:	3724018d 	strcc	r0, [r4, -sp, lsl #3]!
 47c:	02000000 	andeq	r0, r0, #0, 0
 480:	6f187091 	svcvs	0x00187091
 484:	01007431 	tsteq	r0, r1, lsr r4
 488:	e32f018d 			; <UNDEFINED> instruction: 0xe32f018d
 48c:	02000001 	andeq	r0, r0, #1, 0
 490:	6f186c91 	svcvs	0x00186c91
 494:	01006231 	tsteq	r0, r1, lsr r2
 498:	e33c018d 	teq	ip, #1073741859	; 0x40000023
 49c:	02000001 	andeq	r0, r0, #1, 0
 4a0:	6f186891 	svcvs	0x00186891
 4a4:	01007432 	tsteq	r0, r2, lsr r4
 4a8:	e349018d 	movt	r0, #37261	; 0x918d
 4ac:	02000001 	andeq	r0, r0, #1, 0
 4b0:	6f180091 	svcvs	0x00180091
 4b4:	01006232 	tsteq	r0, r2, lsr r2
 4b8:	e356018d 	cmp	r6, #1073741859	; 0x40000023
 4bc:	02000001 	andeq	r0, r0, #1, 0
 4c0:	14000491 	strne	r0, [r0], #-1169	; 0xfffffb6f
 4c4:	000003b6 			; <UNDEFINED> instruction: 0x000003b6
 4c8:	06018601 	streq	r8, [r1], -r1, lsl #12
 4cc:	20000798 	mulcs	r0, r8, r7
 4d0:	0000003e 	andeq	r0, r0, lr, lsr r0
 4d4:	051b9c01 	ldreq	r9, [fp, #-3073]	; 0xfffff3ff
 4d8:	6f180000 	svcvs	0x00180000
 4dc:	01007431 	tsteq	r0, r1, lsr r4
 4e0:	e31d0186 	tst	sp, #-2147483615	; 0x80000021
 4e4:	02000001 	andeq	r0, r0, #1, 0
 4e8:	6f187491 	svcvs	0x00187491
 4ec:	01006231 	tsteq	r0, r1, lsr r2
 4f0:	e32a0186 			; <UNDEFINED> instruction: 0xe32a0186
 4f4:	02000001 	andeq	r0, r0, #1, 0
 4f8:	6f187091 	svcvs	0x00187091
 4fc:	01007432 	tsteq	r0, r2, lsr r4
 500:	e3370186 	teq	r7, #-2147483615	; 0x80000021
 504:	02000001 	andeq	r0, r0, #1, 0
 508:	6f186c91 	svcvs	0x00186c91
 50c:	01006232 	tsteq	r0, r2, lsr r2
 510:	e3440186 	movt	r0, #16774	; 0x4186
 514:	02000001 	andeq	r0, r0, #1, 0
 518:	19006891 	stmdbne	r0, {r0, r4, r7, fp, sp, lr}
 51c:	000004a3 	andeq	r0, r0, r3, lsr #9
 520:	06017f01 	streq	r7, [r1], -r1, lsl #30
 524:	2000075e 	andcs	r0, r0, lr, asr r7
 528:	0000003a 	andeq	r0, r0, sl, lsr r0
 52c:	2f179c01 	svccs	0x00179c01
 530:	01000003 	tsteq	r0, r3
 534:	3e06017a 	mcrcc	1, 0, r0, cr6, cr10, {3}
 538:	20200007 	eorcs	r0, r0, r7
 53c:	01000000 	mrseq	r0, (UNDEF: 0)
 540:	0005729c 	muleq	r5, ip, r2
 544:	626f1800 	rsbvs	r1, pc, #0, 16
 548:	7a01006a 	bvc	406f8 <startup-0x1ffbf908>
 54c:	01e31f01 	mvneq	r1, r1, lsl #30
 550:	91020000 	mrsls	r0, (UNDEF: 2)
 554:	00781874 	rsbseq	r1, r8, r4, ror r8
 558:	28017a01 	stmdacs	r1, {r0, r9, fp, ip, sp, lr}
 55c:	00000037 	andeq	r0, r0, r7, lsr r0
 560:	18709102 	ldmdane	r0!, {r1, r8, ip, pc}^
 564:	7a010079 	bvc	40750 <startup-0x1ffbf8b0>
 568:	00372f01 	eorseq	r2, r7, r1, lsl #30
 56c:	91020000 	mrsls	r0, (UNDEF: 2)
 570:	9d14006c 	ldcls	0, cr0, [r4, #-432]	; 0xfffffe50
 574:	01000003 	tsteq	r0, r3
 578:	02060173 	andeq	r0, r6, #-1073741796	; 0xc000001c
 57c:	3c200007 	stccc	0, cr0, [r0], #-28	; 0xffffffe4
 580:	01000000 	mrseq	r0, (UNDEF: 0)
 584:	00059a9c 	muleq	r5, ip, sl
 588:	626f1800 	rsbvs	r1, pc, #0, 16
 58c:	7301006a 	movwvc	r0, #4202	; 0x106a
 590:	01e31a01 	mvneq	r1, r1, lsl #20
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	60140074 	andsvs	r0, r4, r4, ror r0
 59c:	01000004 	tsteq	r0, r4
 5a0:	a206016d 	andge	r0, r6, #1073741851	; 0x4000001b
 5a4:	60200006 	eorvs	r0, r0, r6
 5a8:	01000000 	mrseq	r0, (UNDEF: 0)
 5ac:	0005da9c 	muleq	r5, ip, sl
 5b0:	626f1800 	rsbvs	r1, pc, #0, 16
 5b4:	6d01006a 	stcvs	0, cr0, [r1, #-424]	; 0xfffffe58
 5b8:	01e31b01 	mvneq	r1, r1, lsl #22
 5bc:	91020000 	mrsls	r0, (UNDEF: 2)
 5c0:	06aa1a6c 	strteq	r1, [sl], ip, ror #20
 5c4:	004e2000 	subeq	r2, lr, r0
 5c8:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 5cc:	016e0100 	cmneq	lr, r0, lsl #2
 5d0:	0000370a 	andeq	r3, r0, sl, lsl #14
 5d4:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 5d8:	f0140000 			; <UNDEFINED> instruction: 0xf0140000
 5dc:	01000004 	tsteq	r0, r4
 5e0:	42060167 	andmi	r0, r6, #-1073741799	; 0xc0000019
 5e4:	60200006 	eorvs	r0, r0, r6
 5e8:	01000000 	mrseq	r0, (UNDEF: 0)
 5ec:	00061a9c 	muleq	r6, ip, sl
 5f0:	626f1800 	rsbvs	r1, pc, #0, 16
 5f4:	6701006a 	strvs	r0, [r1, -sl, rrx]
 5f8:	01e31a01 	mvneq	r1, r1, lsl #20
 5fc:	91020000 	mrsls	r0, (UNDEF: 2)
 600:	064a1a6c 	strbeq	r1, [sl], -ip, ror #20
 604:	004e2000 	subeq	r2, lr, r0
 608:	69150000 	ldmdbvs	r5, {}	; <UNPREDICTABLE>
 60c:	01680100 	cmneq	r8, r0, lsl #2
 610:	0000370a 	andeq	r3, r0, sl, lsl #14
 614:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 618:	5c1b0000 	ldcpl	0, cr0, [fp], {-0}
 61c:	01000003 	tsteq	r0, r3
 620:	37050158 	smlsdcc	r5, r8, r1, r0
 624:	6e000000 	cdpvs	0, 0, cr0, cr0, cr0, {0}
 628:	d4200005 	strtle	r0, [r0], #-5
 62c:	01000000 	mrseq	r0, (UNDEF: 0)
 630:	0006869c 	muleq	r6, ip, r6
 634:	00051c00 	andeq	r1, r5, r0, lsl #24
 638:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 63c:	01e31e01 	mvneq	r1, r1, lsl #28
 640:	91020000 	mrsls	r0, (UNDEF: 2)
 644:	01121c74 	tsteq	r2, r4, ror ip
 648:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 64c:	01e33401 	mvneq	r3, r1, lsl #8
 650:	91020000 	mrsls	r0, (UNDEF: 2)
 654:	00231c70 	eoreq	r1, r3, r0, ror ip
 658:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 65c:	01e34601 	mvneq	r4, r1, lsl #12
 660:	91020000 	mrsls	r0, (UNDEF: 2)
 664:	04201c6c 	strteq	r1, [r0], #-3180	; 0xfffff394
 668:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 66c:	01e35801 	mvneq	r5, r1, lsl #16
 670:	91020000 	mrsls	r0, (UNDEF: 2)
 674:	04fc1c68 	ldrbteq	r1, [ip], #3176	; 0xc68
 678:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 67c:	01e36a01 	mvneq	r6, r1, lsl #20
 680:	91020000 	mrsls	r0, (UNDEF: 2)
 684:	65140000 	ldrvs	r0, [r4, #-0]
 688:	01000002 	tsteq	r0, r2
 68c:	2e060138 	mcrcs	1, 0, r0, cr6, cr8, {1}
 690:	40200005 	eormi	r0, r0, r5
 694:	01000000 	mrseq	r0, (UNDEF: 0)
 698:	0006ad9c 	muleq	r6, ip, sp
 69c:	736d1800 	cmnvc	sp, #0, 16
 6a0:	01380100 	teqeq	r8, r0, lsl #2
 6a4:	0000db1f 	andeq	sp, r0, pc, lsl fp
 6a8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6ac:	00821400 	addeq	r1, r2, r0, lsl #8
 6b0:	2a010000 	bcs	406b8 <startup-0x1ffbf948>
 6b4:	04e80601 	strbteq	r0, [r8], #1537	; 0x601
 6b8:	00462000 	subeq	r2, r6, r0
 6bc:	9c010000 	stcls	0, cr0, [r1], {-0}
 6c0:	000006d4 	ldrdeq	r0, [r0], -r4
 6c4:	00737518 	rsbseq	r7, r3, r8, lsl r5
 6c8:	1f012a01 	svcne	0x00012a01
 6cc:	000000db 	ldrdeq	r0, [r0], -fp
 6d0:	00749102 	rsbseq	r9, r4, r2, lsl #2
 6d4:	00046d1d 	andeq	r6, r4, sp, lsl sp
 6d8:	01210100 			; <UNDEFINED> instruction: 0x01210100
 6dc:	0004a406 	andeq	sl, r4, r6, lsl #8
 6e0:	00004420 	andeq	r4, r0, r0, lsr #8
 6e4:	1e9c0100 	fmlnee	f0, f4, f0
 6e8:	0000047e 	andeq	r0, r0, lr, ror r4
 6ec:	0f010e01 	svceq	0x00010e01
 6f0:	0000071b 	andeq	r0, r0, fp, lsl r7
 6f4:	2000043c 	andcs	r0, r0, ip, lsr r4
 6f8:	00000068 	andeq	r0, r0, r8, rrx
 6fc:	071b9c01 	ldreq	r9, [fp, -r1, lsl #24]
 700:	721a0000 	andsvc	r0, sl, #0, 0
 704:	22200004 	eorcs	r0, r0, #4, 0
 708:	15000000 	strne	r0, [r0, #-0]
 70c:	19010063 	stmdbne	r1, {r0, r1, r5, r6}
 710:	00500801 	subseq	r0, r0, r1, lsl #16
 714:	91020000 	mrsls	r0, (UNDEF: 2)
 718:	0500006f 	streq	r0, [r0, #-111]	; 0xffffff91
 71c:	02900801 	addseq	r0, r0, #65536	; 0x10000
 720:	d8140000 	ldmdale	r4, {}	; <UNPREDICTABLE>
 724:	01000004 	tsteq	r0, r4
 728:	f8060106 			; <UNDEFINED> instruction: 0xf8060106
 72c:	44200003 	strtmi	r0, [r0], #-3
 730:	01000000 	mrseq	r0, (UNDEF: 0)
 734:	0007589c 	muleq	r7, ip, r8
 738:	00631800 	rsbeq	r1, r3, r0, lsl #16
 73c:	1c010601 	stcne	6, cr0, [r1], {1}
 740:	0000071b 	andeq	r0, r0, fp, lsl r7
 744:	135f9102 	cmpne	pc, #-2147483648	; 0x80000000
 748:	000004bf 			; <UNDEFINED> instruction: 0x000004bf
 74c:	13010801 	movwne	r0, #6145	; 0x1801
 750:	00000758 	andeq	r0, r0, r8, asr r7
 754:	00609102 	rsbeq	r9, r0, r2, lsl #2
 758:	00071b0b 	andeq	r1, r7, fp, lsl #22
 75c:	00076800 	andeq	r6, r7, r0, lsl #16
 760:	00db1600 	sbcseq	r1, fp, r0, lsl #12
 764:	000f0000 	andeq	r0, pc, r0
 768:	0003221f 	andeq	r2, r3, pc, lsl r2
 76c:	0ff80100 	svceq	0x00f80100
 770:	0000071b 	andeq	r0, r0, fp, lsl r7
 774:	20000390 	mulcs	r0, r0, r3
 778:	00000068 	andeq	r0, r0, r8, rrx
 77c:	07b09c01 	ldreq	r9, [r0, r1, lsl #24]!
 780:	6b200000 	blvs	800788 <startup-0x1f7ff878>
 784:	01007965 	tsteq	r0, r5, ror #18
 788:	075813f9 	smmlsreq	r8, r9, r3, r1
 78c:	91020000 	mrsls	r0, (UNDEF: 2)
 790:	6f722058 	svcvs	0x00722058
 794:	fa010077 	blx	40978 <startup-0x1ffbf688>
 798:	00003709 	andeq	r3, r0, r9, lsl #14
 79c:	6c910200 	lfmvs	f0, 4, [r1], {0}
 7a0:	6c6f6320 	stclvs	3, cr6, [pc], #-128	; 728 <startup-0x1ffff8d8>
 7a4:	0efa0100 	cdpeq	1, 15, cr0, cr10, cr0, {0}
 7a8:	00000037 	andeq	r0, r0, r7, lsr r0
 7ac:	00689102 	rsbeq	r9, r8, r2, lsl #2
 7b0:	00036c21 	andeq	r6, r3, r1, lsr #24
 7b4:	06e00100 	strbteq	r0, [r0], r0, lsl #2
 7b8:	20000334 	andcs	r0, r0, r4, lsr r3
 7bc:	0000005c 	andeq	r0, r0, ip, asr r0
 7c0:	07d69c01 	ldrbeq	r9, [r6, r1, lsl #24]
 7c4:	72220000 	eorvc	r0, r2, #0, 0
 7c8:	0100776f 	tsteq	r0, pc, ror #14
 7cc:	00db1fe0 	sbcseq	r1, fp, r0, ror #31
 7d0:	91020000 	mrsls	r0, (UNDEF: 2)
 7d4:	fe230074 	mcr2	0, 1, r0, cr3, cr4, {3}
 7d8:	01000000 	mrseq	r0, (UNDEF: 0)
 7dc:	003705d4 	ldrsbteq	r0, [r7], -r4
 7e0:	02e00000 	rsceq	r0, r0, #0, 0
 7e4:	00542000 	subseq	r2, r4, r0
 7e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 7ec:	000007fe 	strdeq	r0, [r0], -lr
 7f0:	01006320 	tsteq	r0, r0, lsr #6
 7f4:	071b13d7 			; <UNDEFINED> instruction: 0x071b13d7
 7f8:	91020000 	mrsls	r0, (UNDEF: 2)
 7fc:	a9240077 	stmdbge	r4!, {r0, r1, r2, r4, r5, r6}
 800:	01000003 	tsteq	r0, r3
 804:	02a806cc 	adceq	r0, r8, #204, 12	; 0xcc00000
 808:	00382000 	eorseq	r2, r8, r0
 80c:	9c010000 	stcls	0, cr0, [r1], {-0}
 810:	0000083e 	andeq	r0, r0, lr, lsr r8
 814:	01007822 	tsteq	r0, r2, lsr #16
 818:	003717cc 	eorseq	r1, r7, ip, asr #15
 81c:	91020000 	mrsls	r0, (UNDEF: 2)
 820:	0079226c 	rsbseq	r2, r9, ip, ror #4
 824:	371ecc01 	ldrcc	ip, [lr, -r1, lsl #24]
 828:	02000000 	andeq	r0, r0, #0, 0
 82c:	27046891 			; <UNDEFINED> instruction: 0x27046891
 830:	01000003 	tsteq	r0, r3
 834:	003706cd 	eorseq	r0, r7, sp, asr #13
 838:	91020000 	mrsls	r0, (UNDEF: 2)
 83c:	43240074 			; <UNDEFINED> instruction: 0x43240074
 840:	01000001 	tsteq	r0, r1
 844:	027606c5 	rsbseq	r0, r6, #206569472	; 0xc500000
 848:	00322000 	eorseq	r2, r2, r0
 84c:	9c010000 	stcls	0, cr0, [r1], {-0}
 850:	00000870 	andeq	r0, r0, r0, ror r8
 854:	01006322 	tsteq	r0, r2, lsr #6
 858:	071b25c5 	ldreq	r2, [fp, -r5, asr #11]
 85c:	91020000 	mrsls	r0, (UNDEF: 2)
 860:	00822577 	addeq	r2, r2, r7, ror r5
 864:	b0010000 	andlt	r0, r1, r0
 868:	00003702 	andeq	r3, r0, r2, lsl #14
 86c:	00002600 	andeq	r2, r0, r0, lsl #12
 870:	00050527 	andeq	r0, r5, r7, lsr #10
 874:	06bc0100 	ldrteq	r0, [ip], r0, lsl #2
 878:	2000024e 	andcs	r0, r0, lr, asr #4
 87c:	00000028 	andeq	r0, r0, r8, lsr #32
 880:	57289c01 	strpl	r9, [r8, -r1, lsl #24]!
 884:	01000002 	tsteq	r0, r2
 888:	020c06ae 	andeq	r0, ip, #182452224	; 0xae00000
 88c:	00422000 	subeq	r2, r2, r0
 890:	9c010000 	stcls	0, cr0, [r1], {-0}
 894:	000008d2 	ldrdeq	r0, [r0], -r2
 898:	00025d29 	andeq	r5, r2, r9, lsr #26
 89c:	06ae0100 	strteq	r0, [lr], r0, lsl #2
 8a0:	00000037 	andeq	r0, r0, r7, lsr r0
 8a4:	2a749102 	bcs	1d24cb4 <startup-0x1e2db34c>
 8a8:	00000082 	andeq	r0, r0, r2, lsl #1
 8ac:	3702b001 	strcc	fp, [r2, -r1]
 8b0:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
 8b4:	26000008 	strcs	r0, [r0], -r8
 8b8:	02381a00 	eorseq	r1, r8, #0, 20
 8bc:	00062000 	andeq	r2, r6, r0
 8c0:	65250000 	strvs	r0, [r5, #-0]!
 8c4:	01000002 	tsteq	r0, r2
 8c8:	003703b5 	ldrhteq	r0, [r7], -r5
 8cc:	00260000 	eoreq	r0, r6, r0
 8d0:	af1f0000 	svcge	0x001f0000
 8d4:	01000004 	tsteq	r0, r4
 8d8:	071b0fa2 	ldreq	r0, [fp, -r2, lsr #31]
 8dc:	01cc0000 	biceq	r0, ip, r0
 8e0:	00402000 	subeq	r2, r0, r0
 8e4:	9c010000 	stcls	0, cr0, [r1], {-0}
 8e8:	000008fa 	strdeq	r0, [r0], -sl
 8ec:	01006320 	tsteq	r0, r0, lsr #6
 8f0:	005007a3 	subseq	r0, r0, r3, lsr #15
 8f4:	91020000 	mrsls	r0, (UNDEF: 2)
 8f8:	3f1f006f 	svccc	0x001f006f
 8fc:	01000004 	tsteq	r0, r4
 900:	071b0f96 			; <UNDEFINED> instruction: 0x071b0f96
 904:	018c0000 	orreq	r0, ip, r0
 908:	00402000 	subeq	r2, r0, r0
 90c:	9c010000 	stcls	0, cr0, [r1], {-0}
 910:	00000922 	andeq	r0, r0, r2, lsr #18
 914:	01006320 	tsteq	r0, r0, lsr #6
 918:	00500797 			; <UNDEFINED> instruction: 0x00500797
 91c:	91020000 	mrsls	r0, (UNDEF: 2)
 920:	1224006f 	eorne	r0, r4, #111, 0	; 0x6f
 924:	01000000 	mrseq	r0, (UNDEF: 0)
 928:	01620690 			; <UNDEFINED> instruction: 0x01620690
 92c:	002a2000 	eoreq	r2, sl, r0
 930:	9c010000 	stcls	0, cr0, [r1], {-0}
 934:	00000948 	andeq	r0, r0, r8, asr #18
 938:	0004ba29 	andeq	fp, r4, r9, lsr #20
 93c:	25900100 	ldrcs	r0, [r0, #256]	; 0x100
 940:	0000071b 	andeq	r0, r0, fp, lsl r7
 944:	00779102 	rsbseq	r9, r7, r2, lsl #2
 948:	00051024 	andeq	r1, r5, r4, lsr #32
 94c:	068a0100 	streq	r0, [sl], r0, lsl #2
 950:	20000138 	andcs	r0, r0, r8, lsr r1
 954:	0000002a 	andeq	r0, r0, sl, lsr #32
 958:	096e9c01 	stmdbeq	lr!, {r0, sl, fp, ip, pc}^
 95c:	5d290000 	stcpl	0, cr0, [r9, #-0]
 960:	01000002 	tsteq	r0, r2
 964:	071b248a 	ldreq	r2, [fp, -sl, lsl #9]
 968:	91020000 	mrsls	r0, (UNDEF: 2)
 96c:	291f0077 	ldmdbcs	pc, {r0, r1, r2, r4, r5, r6}	; <UNPREDICTABLE>
 970:	01000004 	tsteq	r0, r4
 974:	071b0f7c 			; <UNDEFINED> instruction: 0x071b0f7c
 978:	01040000 	mrseq	r0, (UNDEF: 4)
 97c:	00342000 	eorseq	r2, r4, r0
 980:	9c010000 	stcls	0, cr0, [r1], {-0}
 984:	000009a4 	andeq	r0, r0, r4, lsr #19
 988:	01006320 	tsteq	r0, r0, lsr #6
 98c:	071b107d 			; <UNDEFINED> instruction: 0x071b107d
 990:	91020000 	mrsls	r0, (UNDEF: 2)
 994:	046d2577 	strbteq	r2, [sp], #-1399	; 0xfffffa89
 998:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
 99c:	00003702 	andeq	r3, r0, r2, lsl #14
 9a0:	00002600 	andeq	r2, r0, r0, lsl #12
 9a4:	00048c24 	andeq	r8, r4, r4, lsr #24
 9a8:	06740100 	ldrbteq	r0, [r4], -r0, lsl #2
 9ac:	200000d4 	ldrdcs	r0, [r0], -r4
 9b0:	00000030 	andeq	r0, r0, r0, lsr r0
 9b4:	09d89c01 	ldmibeq	r8, {r0, sl, fp, ip, pc}^
 9b8:	79290000 	stmdbvc	r9!, {}	; <UNPREDICTABLE>
 9bc:	01000004 	tsteq	r0, r4
 9c0:	071b2b74 			; <UNDEFINED> instruction: 0x071b2b74
 9c4:	91020000 	mrsls	r0, (UNDEF: 2)
 9c8:	046d2577 	strbteq	r2, [sp], #-1399	; 0xfffffa89
 9cc:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
 9d0:	00003702 	andeq	r3, r0, r2, lsl #14
 9d4:	00002600 	andeq	r2, r0, r0, lsl #12
 9d8:	00027121 	andeq	r7, r2, r1, lsr #2
 9dc:	066d0100 	strbteq	r0, [sp], -r0, lsl #2
 9e0:	2000008c 	andcs	r0, r0, ip, lsl #1
 9e4:	00000048 	andeq	r0, r0, r8, asr #32
 9e8:	0a099c01 	beq	2679f4 <startup-0x1fd9860c>
 9ec:	78220000 	stmdavc	r2!, {}	; <UNPREDICTABLE>
 9f0:	296d0100 	stmdbcs	sp!, {r8}^
 9f4:	0000071b 	andeq	r0, r0, fp, lsl r7
 9f8:	206f9102 	rsbcs	r9, pc, r2, lsl #2
 9fc:	6e010063 	cdpvs	0, 0, cr0, cr1, cr3, {3}
 a00:	00005007 	andeq	r5, r0, r7
 a04:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 a08:	01a72100 			; <UNDEFINED> instruction: 0x01a72100
 a0c:	67010000 	strvs	r0, [r1, -r0]
 a10:	00005006 	andeq	r5, r0, r6
 a14:	00003c20 	andeq	r3, r0, r0, lsr #24
 a18:	3a9c0100 	bcc	fe700e20 <ts_state+0xde6ff018>
 a1c:	2200000a 	andcs	r0, r0, #10, 0
 a20:	67010078 	smlsdxvs	r1, r8, r0, r0
 a24:	00071b27 	andeq	r1, r7, r7, lsr #22
 a28:	6f910200 	svcvs	0x00910200
 a2c:	01006320 	tsteq	r0, r0, lsr #6
 a30:	00500768 	subseq	r0, r0, r8, ror #14
 a34:	91020000 	mrsls	r0, (UNDEF: 2)
 a38:	c52b0077 	strgt	r0, [fp, #-119]!	; 0xffffff89
 a3c:	01000003 	tsteq	r0, r3
 a40:	00280662 	eoreq	r0, r8, r2, ror #12
 a44:	00282000 	eoreq	r2, r8, r0
 a48:	9c010000 	stcls	0, cr0, [r1], {-0}
 a4c:	00037821 	andeq	r7, r3, r1, lsr #16
 a50:	065d0100 	ldrbeq	r0, [sp], -r0, lsl #2
 a54:	20000022 	andcs	r0, r0, r2, lsr #32
 a58:	00000006 	andeq	r0, r0, r6
 a5c:	0a7b9c01 	beq	1ee7a68 <startup-0x1e118598>
 a60:	78220000 	stmdavc	r2!, {}	; <UNPREDICTABLE>
 a64:	1e5d0100 	rdfnee	f0, f5, f0
 a68:	00000037 	andeq	r0, r0, r7, lsr r0
 a6c:	79225001 	stmdbvc	r2!, {r0, ip, lr}
 a70:	255d0100 	ldrbcs	r0, [sp, #-256]	; 0xffffff00
 a74:	00000037 	andeq	r0, r0, r7, lsr r0
 a78:	21005101 	tstcs	r0, r1, lsl #2
 a7c:	00000245 	andeq	r0, r0, r5, asr #4
 a80:	1c065701 	stcne	7, cr5, [r6], {1}
 a84:	06200000 	strteq	r0, [r0], -r0
 a88:	01000000 	mrseq	r0, (UNDEF: 0)
 a8c:	000aaa9c 	muleq	sl, ip, sl
 a90:	00782200 	rsbseq	r2, r8, r0, lsl #4
 a94:	371c5701 	ldrcc	r5, [ip, -r1, lsl #14]
 a98:	01000000 	mrseq	r0, (UNDEF: 0)
 a9c:	00792250 	rsbseq	r2, r9, r0, asr r2
 aa0:	37235701 	strcc	r5, [r3, -r1, lsl #14]!
 aa4:	01000000 	mrseq	r0, (UNDEF: 0)
 aa8:	1b2b0051 	blne	ac0bf4 <startup-0x1f53f40c>
 aac:	01000001 	tsteq	r0, r1
 ab0:	00160651 	andseq	r0, r6, r1, asr r6
 ab4:	00062000 	andeq	r2, r6, r0
 ab8:	9c010000 	stcls	0, cr0, [r1], {-0}
 abc:	00018e2b 	andeq	r8, r1, fp, lsr #28
 ac0:	064b0100 	strbeq	r0, [fp], -r0, lsl #2
 ac4:	20000010 	andcs	r0, r0, r0, lsl r0
 ac8:	00000006 	andeq	r0, r0, r6
 acc:	c82b9c01 	stmdagt	fp!, {r0, sl, fp, ip, pc}
 ad0:	01000004 	tsteq	r0, r4
 ad4:	00000642 	andeq	r0, r0, r2, asr #12
 ad8:	000c2000 	andeq	r2, ip, r0
 adc:	9c010000 	stcls	0, cr0, [r1], {-0}
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23, 0
  14:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  18:	0b3b0b3a 	bleq	ec2d08 <startup-0x1f13d2f8>
  1c:	13490b39 	movtne	r0, #39737	; 0x9b39
  20:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  24:	24030000 	strcs	r0, [r3], #-0
  28:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  2c:	0008030b 	andeq	r0, r8, fp, lsl #6
  30:	00340400 	eorseq	r0, r4, r0, lsl #8
  34:	0b3a0e03 	bleq	e83848 <startup-0x1f17c7b8>
  38:	0b390b3b 	bleq	e42d2c <startup-0x1f1bd2d4>
  3c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  40:	24050000 	strcs	r0, [r5], #-0
  44:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  48:	000e030b 	andeq	r0, lr, fp, lsl #6
  4c:	01130600 	tsteq	r3, r0, lsl #12
  50:	0b3a0b0b 	bleq	e82c84 <startup-0x1f17d37c>
  54:	0b39053b 	bleq	e41548 <startup-0x1f1beab8>
  58:	00001301 	andeq	r1, r0, r1, lsl #6
  5c:	03000d07 	movweq	r0, #3335	; 0xd07
  60:	3b0b3a08 	blcc	2ce888 <startup-0x1fd31778>
  64:	490b3905 	stmdbmi	fp, {r0, r2, r8, fp, ip, sp}
  68:	000b3813 	andeq	r3, fp, r3, lsl r8
  6c:	00160800 	andseq	r0, r6, r0, lsl #16
  70:	0b3a0e03 	bleq	e83884 <startup-0x1f17c77c>
  74:	0b39053b 	bleq	e41568 <startup-0x1f1bea98>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	0b011309 	bleq	44ca8 <startup-0x1ffbb358>
  80:	3b0b3a05 	blcc	2ce89c <startup-0x1fd31764>
  84:	010b3905 	tsteq	fp, r5, lsl #18
  88:	0a000013 	beq	dc <startup-0x1fffff24>
  8c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  90:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  94:	13490b39 	movtne	r0, #39737	; 0x9b39
  98:	00000b38 	andeq	r0, r0, r8, lsr fp
  9c:	4901010b 	stmdbmi	r1, {r0, r1, r3, r8}
  a0:	00130113 	andseq	r0, r3, r3, lsl r1
  a4:	00210c00 	eoreq	r0, r1, r0, lsl #24
  a8:	052f1349 	streq	r1, [pc, #-841]!	; fffffd67 <ts_state+0xdfffdf5f>
  ac:	0f0d0000 	svceq	0x000d0000
  b0:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  b4:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  b8:	0e030113 	mcreq	1, 0, r0, cr3, cr3, {0}
  bc:	0b3a0b0b 	bleq	e82cf0 <startup-0x1f17d310>
  c0:	0b39053b 	bleq	e415b4 <startup-0x1f1bea4c>
  c4:	00001301 	andeq	r1, r0, r1, lsl #6
  c8:	2701150f 	strcs	r1, [r1, -pc, lsl #10]
  cc:	00130119 	andseq	r0, r3, r9, lsl r1
  d0:	00051000 	andeq	r1, r5, r0
  d4:	00001349 	andeq	r1, r0, r9, asr #6
  d8:	27011511 	smladcs	r1, r1, r5, r1
  dc:	01134919 	tsteq	r3, r9, lsl r9
  e0:	12000013 	andne	r0, r0, #19, 0
  e4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  e8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  ec:	13490b39 	movtne	r0, #39737	; 0x9b39
  f0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  f4:	34130000 	ldrcc	r0, [r3], #-0
  f8:	3a0e0300 	bcc	380d00 <startup-0x1fc7f300>
  fc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 100:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 104:	14000018 	strne	r0, [r0], #-24	; 0xffffffe8
 108:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 10c:	0b3a0e03 	bleq	e83920 <startup-0x1f17c6e0>
 110:	0b39053b 	bleq	e41604 <startup-0x1f1be9fc>
 114:	01111927 	tsteq	r1, r7, lsr #18
 118:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 11c:	01194296 			; <UNDEFINED> instruction: 0x01194296
 120:	15000013 	strne	r0, [r0, #-19]	; 0xffffffed
 124:	08030034 	stmdaeq	r3, {r2, r4, r5}
 128:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 12c:	13490b39 	movtne	r0, #39737	; 0x9b39
 130:	00001802 	andeq	r1, r0, r2, lsl #16
 134:	49002116 	stmdbmi	r0, {r1, r2, r4, r8, sp}
 138:	000b2f13 	andeq	r2, fp, r3, lsl pc
 13c:	012e1700 			; <UNDEFINED> instruction: 0x012e1700
 140:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 144:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
 148:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 14c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 150:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 154:	00130119 	andseq	r0, r3, r9, lsl r1
 158:	00051800 	andeq	r1, r5, r0, lsl #16
 15c:	0b3a0803 	bleq	e82170 <startup-0x1f17de90>
 160:	0b39053b 	bleq	e41654 <startup-0x1f1be9ac>
 164:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 168:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
 16c:	03193f00 	tsteq	r9, #0, 30
 170:	3b0b3a0e 	blcc	2ce9b0 <startup-0x1fd31650>
 174:	110b3905 	tstne	fp, r5, lsl #18
 178:	40061201 	andmi	r1, r6, r1, lsl #4
 17c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 180:	0b1a0000 	bleq	680188 <startup-0x1f97fe78>
 184:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 188:	1b000006 	blne	1a8 <startup-0x1ffffe58>
 18c:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	0b39053b 	bleq	e41688 <startup-0x1f1be978>
 198:	13491927 	movtne	r1, #39207	; 0x9927
 19c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1a0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1a4:	00130119 	andseq	r0, r3, r9, lsl r1
 1a8:	00051c00 	andeq	r1, r5, r0, lsl #24
 1ac:	0b3a0e03 	bleq	e839c0 <startup-0x1f17c640>
 1b0:	0b39053b 	bleq	e416a4 <startup-0x1f1be95c>
 1b4:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1b8:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1bc:	03193f00 	tsteq	r9, #0, 30
 1c0:	3b0b3a0e 	blcc	2cea00 <startup-0x1fd31600>
 1c4:	270b3905 	strcs	r3, [fp, -r5, lsl #18]
 1c8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1cc:	97184006 	ldrls	r4, [r8, -r6]
 1d0:	00001942 	andeq	r1, r0, r2, asr #18
 1d4:	3f012e1e 	svccc	0x00012e1e
 1d8:	3a0e0319 	bcc	380e44 <startup-0x1fc7f1bc>
 1dc:	39053b0b 	stmdbcc	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
 1e0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1e4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1e8:	96184006 	ldrls	r4, [r8], -r6
 1ec:	13011942 	movwne	r1, #6466	; 0x1942
 1f0:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
 1f4:	03193f01 	tsteq	r9, #1, 30
 1f8:	3b0b3a0e 	blcc	2cea38 <startup-0x1fd315c8>
 1fc:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 200:	11134919 	tstne	r3, r9, lsl r9
 204:	40061201 	andmi	r1, r6, r1, lsl #4
 208:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 20c:	00001301 	andeq	r1, r0, r1, lsl #6
 210:	03003420 	movweq	r3, #1056	; 0x420
 214:	3b0b3a08 	blcc	2cea3c <startup-0x1fd315c4>
 218:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 21c:	00180213 	andseq	r0, r8, r3, lsl r2
 220:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 224:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 228:	0b3b0b3a 	bleq	ec2f18 <startup-0x1f13d0e8>
 22c:	19270b39 	stmdbne	r7!, {r0, r3, r4, r5, r8, r9, fp}
 230:	06120111 			; <UNDEFINED> instruction: 0x06120111
 234:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 238:	00130119 	andseq	r0, r3, r9, lsl r1
 23c:	00052200 	andeq	r2, r5, r0, lsl #4
 240:	0b3a0803 	bleq	e82254 <startup-0x1f17ddac>
 244:	0b390b3b 	bleq	e42f38 <startup-0x1f1bd0c8>
 248:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 24c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
 250:	03193f01 	tsteq	r9, #1, 30
 254:	3b0b3a0e 	blcc	2cea94 <startup-0x1fd3156c>
 258:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 25c:	11134919 	tstne	r3, r9, lsl r9
 260:	40061201 	andmi	r1, r6, r1, lsl #4
 264:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 268:	00001301 	andeq	r1, r0, r1, lsl #6
 26c:	3f012e24 	svccc	0x00012e24
 270:	3a0e0319 	bcc	380edc <startup-0x1fc7f124>
 274:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 278:	1119270b 	tstne	r9, fp, lsl #14
 27c:	40061201 	andmi	r1, r6, r1, lsl #4
 280:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 284:	00001301 	andeq	r1, r0, r1, lsl #6
 288:	3f012e25 	svccc	0x00012e25
 28c:	3a0e0319 	bcc	380ef8 <startup-0x1fc7f108>
 290:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 294:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 298:	26000019 			; <UNDEFINED> instruction: 0x26000019
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	3f002e27 	svccc	0x00002e27
 2a4:	3a0e0319 	bcc	380f10 <startup-0x1fc7f0f0>
 2a8:	390b3b0b 	stmdbcc	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2ac:	1119270b 	tstne	r9, fp, lsl #14
 2b0:	40061201 	andmi	r1, r6, r1, lsl #4
 2b4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2b8:	2e280000 	cdpcs	0, 2, cr0, cr8, cr0, {0}
 2bc:	03193f01 	tsteq	r9, #1, 30
 2c0:	3b0b3a0e 	blcc	2ceb00 <startup-0x1fd31500>
 2c4:	110b390b 	tstne	fp, fp, lsl #18
 2c8:	40061201 	andmi	r1, r6, r1, lsl #4
 2cc:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 2d0:	00001301 	andeq	r1, r0, r1, lsl #6
 2d4:	03000529 	movweq	r0, #1321	; 0x529
 2d8:	3b0b3a0e 	blcc	2ceb18 <startup-0x1fd314e8>
 2dc:	490b390b 	stmdbmi	fp, {r0, r1, r3, r8, fp, ip, sp}
 2e0:	00180213 	andseq	r0, r8, r3, lsl r2
 2e4:	012e2a00 			; <UNDEFINED> instruction: 0x012e2a00
 2e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2ec:	0b3b0b3a 	bleq	ec2fdc <startup-0x1f13d024>
 2f0:	13490b39 	movtne	r0, #39737	; 0x9b39
 2f4:	1301193c 	movwne	r1, #6460	; 0x193c
 2f8:	2e2b0000 	cdpcs	0, 2, cr0, cr11, cr0, {0}
 2fc:	03193f00 	tsteq	r9, #0, 30
 300:	3b0b3a0e 	blcc	2ceb40 <startup-0x1fd314c0>
 304:	270b390b 	strcs	r3, [fp, -fp, lsl #18]
 308:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 30c:	97184006 	ldrls	r4, [r8, -r6]
 310:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000bc8 	andeq	r0, r0, r8, asr #23
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	20000bd8 	ldrdcs	r0, [r0], -r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000006d5 	ldrdeq	r0, [r0], -r5
   4:	00410003 	subeq	r0, r1, r3
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	2f010000 	svccs	0x00010000
  1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  20:	6f722f73 	svcvs	0x00722f73
  24:	7261677a 	rsbvc	r6, r1, #31981568	; 0x1e80000
  28:	7365442f 	cmnvc	r5, #788529152	; 0x2f000000
  2c:	706f746b 	rsbvc	r7, pc, fp, ror #8
  30:	504f4d2f 	subpl	r4, pc, pc, lsr #26
  34:	62616c2f 	rsbvs	r6, r1, #12032	; 0x2f00
  38:	002d3562 	eoreq	r3, sp, r2, ror #10
  3c:	61747300 	cmnvs	r4, r0, lsl #6
  40:	70757472 	rsbsvc	r7, r5, r2, ror r4
  44:	0100632e 	tsteq	r0, lr, lsr #6
  48:	05000000 	streq	r0, [r0, #-0]
  4c:	02050001 	andeq	r0, r5, #1, 0
  50:	20000000 	andcs	r0, r0, r0
  54:	0100c203 	tsteq	r0, r3, lsl #4
  58:	2f212113 	svccs	0x00212113
  5c:	00030221 	andeq	r0, r3, r1, lsr #4
  60:	1e050101 	adfnes	f0, f5, f1
  64:	10020500 	andne	r0, r2, r0, lsl #10
  68:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
  6c:	050100ca 	streq	r0, [r1, #-202]	; 0xffffff36
  70:	05132105 	ldreq	r2, [r3, #-261]	; 0xfffffefb
  74:	20052101 	andcs	r2, r5, r1, lsl #2
  78:	21050523 	tstcs	r5, r3, lsr #10
  7c:	21010513 	tstcs	r1, r3, lsl r5
  80:	05232505 	streq	r2, [r3, #-1285]!	; 0xfffffafb
  84:	05132105 	ldreq	r2, [r3, #-261]	; 0xfffffefb
  88:	27052101 	strcs	r2, [r5, -r1, lsl #2]
  8c:	21050523 	tstcs	r5, r3, lsr #10
  90:	21010513 	tstcs	r1, r3, lsl r5
  94:	05221505 	streq	r1, [r2, #-1285]!	; 0xfffffafb
  98:	13052f05 	movwne	r2, #24325	; 0x5f05
  9c:	2f020520 	svccs	0x00020520
  a0:	05201005 	streq	r1, [r0, #-5]!
  a4:	29052f01 	stmdbcs	r5, {r0, r8, r9, sl, fp, sp}
  a8:	680605bc 	stmdavs	r6, {r2, r3, r4, r5, r7, r8, sl}
  ac:	05200405 	streq	r0, [r0, #-1029]!	; 0xfffffbfb
  b0:	02054b12 	andeq	r4, r5, #18432	; 0x4800
  b4:	20120566 	andscs	r0, r2, r6, ror #10
  b8:	054b0105 	strbeq	r0, [fp, #-261]	; 0xfffffefb
  bc:	0605842b 	streq	r8, [r5], -fp, lsr #8
  c0:	20040568 	andcs	r0, r4, r8, ror #10
  c4:	054b0805 	strbeq	r0, [fp, #-2053]	; 0xfffff7fb
  c8:	02059e04 	andeq	r9, r5, #4, 28	; 0x40
  cc:	2012052f 	andscs	r0, r2, pc, lsr #10
  d0:	05670105 	strbeq	r0, [r7, #-261]!	; 0xfffffefb
  d4:	02056830 	andeq	r6, r5, #48, 16	; 0x300000
  d8:	13053d67 	movwne	r3, #23911	; 0x5d67
  dc:	3d020520 	cfstr32cc	mvfx0, [r2, #-128]	; 0xffffff80
  e0:	2f01053d 	svccs	0x0001053d
  e4:	05692a05 	strbeq	r2, [r9, #-2565]!	; 0xfffff5fb
  e8:	2f3e3e02 	svccs	0x003e3e02
  ec:	05300605 	ldreq	r0, [r0, #-1541]!	; 0xfffff9fb
  f0:	02052004 	andeq	r2, r5, #4, 0
  f4:	3e09053e 	mcrcc	5, 0, r0, cr9, cr14, {1}
  f8:	052f0105 	streq	r0, [pc, #-261]!	; fffffffb <ts_state+0xdfffe1f3>
  fc:	0205762c 	andeq	r7, r5, #44, 12	; 0x2c00000
 100:	053d3d67 	ldreq	r3, [sp, #-3431]!	; 0xfffff299
 104:	2a055901 	bcs	156510 <startup-0x1fea9af0>
 108:	6702054c 	strvs	r0, [r2, -ip, asr #10]
 10c:	01053d3d 	tsteq	r5, sp, lsr sp
 110:	4c260559 	cfstr32mi	mvfx0, [r6], #-356	; 0xfffffe9c
 114:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 118:	02052010 	andeq	r2, r5, #16, 0
 11c:	06053d2f 	streq	r3, [r5], -pc, lsr #26
 120:	5a02053d 	bpl	8161c <startup-0x1ff7e9e4>
 124:	05201005 	streq	r1, [r0, #-5]!
 128:	01053009 	tsteq	r5, r9
 12c:	a024052f 	eorge	r0, r4, pc, lsr #10
 130:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 134:	02052010 	andeq	r2, r5, #16, 0
 138:	06053d2f 	streq	r3, [r5], -pc, lsr #26
 13c:	5a02053d 	bpl	81638 <startup-0x1ff7e9c8>
 140:	05201005 	streq	r1, [r0, #-5]!
 144:	01053009 	tsteq	r5, r9
 148:	a01c052f 	andsge	r0, ip, pc, lsr #10
 14c:	054b0705 	strbeq	r0, [fp, #-1797]	; 0xfffff8fb
 150:	04020009 	streq	r0, [r2], #-9
 154:	07052001 	streq	r2, [r5, -r1]
 158:	01040200 	mrseq	r0, R12_usr
 15c:	2f02054a 	svccs	0x0002054a
 160:	5a04053e 	bpl	101660 <startup-0x1fefe9a0>
 164:	053d0305 	ldreq	r0, [sp, #-773]!	; 0xfffffcfb
 168:	03054101 	movweq	r4, #20737	; 0x5101
 16c:	3e01051e 	mcrcc	5, 0, r0, cr1, cr14, {0}
 170:	054c1605 	strbeq	r1, [ip, #-1541]	; 0xfffff9fb
 174:	3e3d2f02 	cdpcc	15, 3, cr2, cr13, cr2, {0}
 178:	01053d3d 	tsteq	r5, sp, lsr sp
 17c:	3e27053d 	mcrcc	5, 1, r0, cr7, cr13, {1}
 180:	05670705 	strbeq	r0, [r7, #-1797]!	; 0xfffff8fb
 184:	04020009 	streq	r0, [r2], #-9
 188:	07052001 	streq	r2, [r5, -r1]
 18c:	01040200 	mrseq	r0, R12_usr
 190:	2f02054a 	svccs	0x0002054a
 194:	5901053e 	stmdbpl	r1, {r1, r2, r3, r4, r5, r8, sl}
 198:	054c2005 	strbeq	r2, [ip, #-5]
 19c:	05055906 	streq	r5, [r5, #-2310]	; 0xfffff6fa
 1a0:	3d0b053d 	cfstr32cc	mvfx0, [fp, #-244]	; 0xffffff0c
 1a4:	053e1705 	ldreq	r1, [lr, #-1797]!	; 0xfffff8fb
 1a8:	01056602 	tsteq	r5, r2, lsl #12
 1ac:	4c15054b 	cfldr32mi	mvfx0, [r5], {75}	; 0x4b
 1b0:	05400905 	strbeq	r0, [r0, #-2309]	; 0xfffff6fb
 1b4:	0b052007 	bleq	1481d8 <startup-0x1feb7e28>
 1b8:	4a08053d 	bmi	2016b4 <startup-0x1fdfe94c>
 1bc:	02001905 	andeq	r1, r0, #81920	; 0x14000
 1c0:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 1c4:	08052f0b 	stmdaeq	r5, {r0, r1, r3, r8, r9, sl, fp, sp}
 1c8:	0019054a 	andseq	r0, r9, sl, asr #10
 1cc:	20010402 	andcs	r0, r1, r2, lsl #8
 1d0:	052f0b05 	streq	r0, [pc, #-2821]!	; fffff6d3 <ts_state+0xdfffd8cb>
 1d4:	19054a08 	stmdbne	r5, {r3, r9, fp, lr}
 1d8:	01040200 	mrseq	r0, R12_usr
 1dc:	2f0b0520 	svccs	0x000b0520
 1e0:	054a0805 	strbeq	r0, [sl, #-2053]	; 0xfffff7fb
 1e4:	04020019 	streq	r0, [r2], #-25	; 0xffffffe7
 1e8:	0c052001 	stceq	0, cr2, [r5], {1}
 1ec:	2101052f 	tstcs	r1, pc, lsr #10
 1f0:	05682405 	strbeq	r2, [r8, #-1029]!	; 0xfffffbfb
 1f4:	1e05cc0d 	cdpne	12, 0, cr12, cr5, cr13, {0}
 1f8:	2f0d0520 	svccs	0x000d0520
 1fc:	201e0522 	andscs	r0, lr, r2, lsr #10
 200:	222f0d05 	eorcs	r0, pc, #320	; 0x140
 204:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
 208:	05222f0d 	streq	r2, [r2, #-3853]!	; 0xfffff0f3
 20c:	0d05201e 	stceq	0, cr2, [r5, #-120]	; 0xffffff88
 210:	1e05222f 	cdpne	2, 0, cr2, cr5, cr15, {1}
 214:	2f0d0520 	svccs	0x000d0520
 218:	201e0522 	andscs	r0, lr, r2, lsr #10
 21c:	052f0d05 	streq	r0, [pc, #-3333]!	; fffff51f <ts_state+0xdfffd717>
 220:	1a052201 	bne	148a2c <startup-0x1feb75d4>
 224:	3d130592 	cfldr32cc	mvfx0, [r3, #-584]	; 0xfffffdb8
 228:	05680e05 	strbeq	r0, [r8, #-3589]!	; 0xfffff1fb
 22c:	09052e05 	stmdbeq	r5, {r0, r2, r9, sl, fp, sp}
 230:	4b140521 	blmi	5016bc <startup-0x1fafe944>
 234:	054a0c05 	strbeq	r0, [sl, #-3077]	; 0xfffff3fb
 238:	21053d0d 	tstcs	r5, sp, lsl #26
 23c:	2e1a053d 	mrccs	5, 0, r0, cr10, cr13, {1}
 240:	05202d05 	streq	r2, [r0, #-3333]!	; 0xfffff2fb
 244:	17052e26 	strne	r2, [r5, -r6, lsr #28]
 248:	00200520 	eoreq	r0, r0, r0, lsr #10
 24c:	38020402 	stmdacc	r2, {r1, sl}
 250:	02000505 	andeq	r0, r0, #20971520	; 0x1400000
 254:	433c0104 	teqmi	ip, #1
 258:	053d0c05 	ldreq	r0, [sp, #-3077]!	; 0xfffff3fb
 25c:	04020001 	streq	r0, [r2], #-1
 260:	1f052101 	svcne	0x00052101
 264:	67080576 	smlsdxvs	r8, r6, r5, r0
 268:	02001105 	andeq	r1, r0, #1073741825	; 0x40000001
 26c:	054a0104 	strbeq	r0, [sl, #-260]	; 0xfffffefc
 270:	1f053d13 	svcne	0x00053d13
 274:	2e050576 	cfrshl64cs	mvdx5, mvdx6, r0
 278:	05201f05 	streq	r1, [r0, #-3845]!	; 0xfffff0fb
 27c:	01052e15 	tsteq	r5, r5, lsl lr
 280:	84220522 	strthi	r0, [r2], #-1314	; 0xfffffade
 284:	053e0705 	ldreq	r0, [lr, #-1797]!	; 0xfffff8fb
 288:	03052e05 	movweq	r2, #24069	; 0x5e05
 28c:	3d07052f 	cfstr32cc	mvfx0, [r7, #-188]	; 0xffffff44
 290:	053c0505 	ldreq	r0, [ip, #-1285]!	; 0xfffffafb
 294:	0402001e 	streq	r0, [r2], #-30	; 0xffffffe2
 298:	11052001 	tstne	r5, r1
 29c:	3d0a054b 	cfstr32cc	mvfx0, [sl, #-300]	; 0xfffffed4
 2a0:	05320605 	ldreq	r0, [r2, #-1541]!	; 0xfffff9fb
 2a4:	0c052e04 	stceq	14, cr2, [r5], {4}
 2a8:	5908052f 	stmdbpl	r8, {r0, r1, r2, r3, r5, r8, sl}
 2ac:	052e0505 	streq	r0, [lr, #-1285]!	; 0xfffffafb
 2b0:	0b054b0d 	bleq	152eec <startup-0x1fead114>
 2b4:	3f01053d 	svccc	0x0001053d
 2b8:	05841705 	streq	r1, [r4, #1797]	; 0x705
 2bc:	0f052f05 	svceq	0x00052f05
 2c0:	2f050520 	svccs	0x00050520
 2c4:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 2c8:	0e052f05 	cdpeq	15, 0, cr2, cr5, cr5, {0}
 2cc:	2f050520 	svccs	0x00050520
 2d0:	05200f05 	streq	r0, [r0, #-3845]!	; 0xfffff0fb
 2d4:	0d052f0a 	stceq	15, cr2, [r5, #-40]	; 0xffffffd8
 2d8:	01040200 	mrseq	r0, R12_usr
 2dc:	00170520 	andseq	r0, r7, r0, lsr #10
 2e0:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 2e4:	02000a05 	andeq	r0, r0, #20480	; 0x5000
 2e8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 2ec:	0f052105 	svceq	0x00052105
 2f0:	2f010520 	svccs	0x00010520
 2f4:	05a02205 	streq	r2, [r0, #517]!	; 0x205
 2f8:	07054c08 	streq	r4, [r5, -r8, lsl #24]
 2fc:	3e0a0583 	cfsh32cc	mvfx0, mvfx10, #-61
 300:	2f210905 	svccs	0x00210905
 304:	0b052f2f 	bleq	14bfc8 <startup-0x1feb4038>
 308:	370a052f 	strcc	r0, [sl, -pc, lsr #10]
 30c:	05430105 	strbeq	r0, [r3, #-261]	; 0xfffffefb
 310:	08055a22 	stmdaeq	r5, {r1, r5, r9, fp, ip, lr}
 314:	8307054c 	movwhi	r0, #30028	; 0x754c
 318:	053e0a05 	ldreq	r0, [lr, #-2565]!	; 0xfffff5fb
 31c:	0b052109 	bleq	148748 <startup-0x1feb78b8>
 320:	3a0a0559 	bcc	28188c <startup-0x1fd7e774>
 324:	05400105 	strbeq	r0, [r0, #-261]	; 0xfffffefb
 328:	58170373 	ldmdapl	r7, {r0, r1, r4, r5, r6, r8, r9}
 32c:	05762305 	ldrbeq	r2, [r6, #-773]!	; 0xfffffcfb
 330:	3d052e38 	stccc	14, cr2, [r5, #-224]	; 0xffffff20
 334:	202a052e 	eorcs	r0, sl, lr, lsr #10
 338:	05200d05 	streq	r0, [r0, #-3333]!	; 0xfffff2fb
 33c:	56052e04 	strpl	r2, [r5], -r4, lsl #28
 340:	01040200 	mrseq	r0, R12_usr
 344:	0067052e 	rsbeq	r0, r7, lr, lsr #10
 348:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 34c:	02006c05 	andeq	r6, r0, #1280	; 0x500
 350:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 354:	0402005d 	streq	r0, [r2], #-93	; 0xffffffa3
 358:	82052001 	andhi	r2, r5, #1, 0
 35c:	04020001 	streq	r0, [r2], #-1
 360:	49052001 	stmdbmi	r5, {r0, sp}
 364:	01040200 	mrseq	r0, R12_usr
 368:	2f12052e 	svccs	0x0012052e
 36c:	052e2405 	streq	r2, [lr, #-1029]!	; 0xfffffbfb
 370:	3a052e35 	bcc	14bc4c <startup-0x1feb43b4>
 374:	202b052e 	eorcs	r0, fp, lr, lsr #10
 378:	05200505 	streq	r0, [r0, #-1285]!	; 0xfffffafb
 37c:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 380:	17052e01 	strne	r2, [r5, -r1, lsl #28]
 384:	2e2c052f 	cfsh64cs	mvdx0, mvdx12, #31
 388:	052e3105 	streq	r3, [lr, #-261]!	; 0xfffffefb
 38c:	3d05201e 	stccc	0, cr2, [r5, #-120]	; 0xffffff88
 390:	20480520 	subcs	r0, r8, r0, lsr #10
 394:	052e0a05 	streq	r0, [lr, #-2565]!	; 0xfffff5fb
 398:	04020057 	streq	r0, [r2], #-87	; 0xffffffa9
 39c:	0f052e01 	svceq	0x00052e01
 3a0:	3128052f 			; <UNDEFINED> instruction: 0x3128052f
 3a4:	052e3d05 	streq	r3, [lr, #-3333]!	; 0xfffff2fb
 3a8:	2f052e42 	svccs	0x00052e42
 3ac:	20120520 	andscs	r0, r2, r0, lsr #10
 3b0:	052e0905 	streq	r0, [lr, #-2309]!	; 0xfffff6fb
 3b4:	0402005b 	streq	r0, [r2], #-91	; 0xffffffa5
 3b8:	6c052e01 	stcvs	14, cr2, [r5], {1}
 3bc:	01040200 	mrseq	r0, R12_usr
 3c0:	0071052e 	rsbseq	r0, r1, lr, lsr #10
 3c4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
 3c8:	02006205 	andeq	r6, r0, #1342177280	; 0x50000000
 3cc:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3d0:	02000187 	andeq	r0, r0, #-1073741791	; 0xc0000021
 3d4:	05200104 	streq	r0, [r0, #-260]!	; 0xfffffefc
 3d8:	0402004e 	streq	r0, [r2], #-78	; 0xffffffb2
 3dc:	12052e01 	andne	r2, r5, #1, 28
 3e0:	2e24052f 	cfsh64cs	mvdx0, mvdx4, #31
 3e4:	052e3505 	streq	r3, [lr, #-1285]!	; 0xfffffafb
 3e8:	2b052e3a 	blcs	14bcd8 <startup-0x1feb4328>
 3ec:	20050520 	andcs	r0, r5, r0, lsr #10
 3f0:	02004a05 	andeq	r4, r0, #20480	; 0x5000
 3f4:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 3f8:	2c052f17 	stccs	15, cr2, [r5], {23}
 3fc:	2e31052e 	cdpcs	5, 3, cr0, cr1, cr14, {1}
 400:	05201e05 	streq	r1, [r0, #-3589]!	; 0xfffff1fb
 404:	4805203d 	stmdami	r5, {r0, r2, r3, r4, r5, sp}
 408:	2e0a0520 	cfsh32cs	mvfx0, mvfx10, #16
 40c:	02005705 	andeq	r5, r0, #1310720	; 0x140000
 410:	052e0104 	streq	r0, [lr, #-260]!	; 0xfffffefc
 414:	10052f0f 	andne	r2, r5, pc, lsl #30
 418:	2101052f 	tstcs	r1, pc, lsr #10
 41c:	054c1e05 	strbeq	r1, [ip, #-3589]	; 0xfffff1fb
 420:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 424:	0018052e 	andseq	r0, r8, lr, lsr #10
 428:	21030402 	tstcs	r3, r2, lsl #8
 42c:	02002405 	andeq	r2, r0, #83886080	; 0x5000000
 430:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 434:	0402002c 	streq	r0, [r2], #-44	; 0xffffffd4
 438:	03057403 	movweq	r7, #21507	; 0x5403
 43c:	03040200 	movweq	r0, #16896	; 0x4200
 440:	0037052e 	eorseq	r0, r7, lr, lsr #10
 444:	20030402 	andcs	r0, r3, r2, lsl #8
 448:	02004305 	andeq	r4, r0, #335544320	; 0x14000000
 44c:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 450:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 454:	03057403 	movweq	r7, #21507	; 0x5403
 458:	03040200 	movweq	r0, #16896	; 0x4200
 45c:	002b052e 	eoreq	r0, fp, lr, lsr #10
 460:	49030402 	stmdbmi	r3, {r1, sl}
 464:	02001805 	andeq	r1, r0, #327680	; 0x50000
 468:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 46c:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 470:	02052e01 	andeq	r2, r5, #1, 28
 474:	01040200 	mrseq	r0, R12_usr
 478:	3f010520 	svccc	0x00010520
 47c:	055a1f05 	ldrbeq	r1, [sl, #-3845]	; 0xfffff0fb
 480:	02054b0a 	andeq	r4, r5, #10240	; 0x2800
 484:	001a052e 	andseq	r0, sl, lr, lsr #10
 488:	21030402 	tstcs	r3, r2, lsl #8
 48c:	02002605 	andeq	r2, r0, #5242880	; 0x500000
 490:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 494:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 498:	03057403 	movweq	r7, #21507	; 0x5403
 49c:	03040200 	movweq	r0, #16896	; 0x4200
 4a0:	0039052e 	eorseq	r0, r9, lr, lsr #10
 4a4:	20030402 	andcs	r0, r3, r2, lsl #8
 4a8:	02004505 	andeq	r4, r0, #20971520	; 0x1400000
 4ac:	052e0304 	streq	r0, [lr, #-772]!	; 0xfffffcfc
 4b0:	0402004d 	streq	r0, [r2], #-77	; 0xffffffb3
 4b4:	03057403 	movweq	r7, #21507	; 0x5403
 4b8:	03040200 	movweq	r0, #16896	; 0x4200
 4bc:	002b052e 	eoreq	r0, fp, lr, lsr #10
 4c0:	49030402 	stmdbmi	r3, {r1, sl}
 4c4:	02001805 	andeq	r1, r0, #327680	; 0x50000
 4c8:	053c0104 	ldreq	r0, [ip, #-260]!	; 0xfffffefc
 4cc:	0402001d 	streq	r0, [r2], #-29	; 0xffffffe3
 4d0:	02052e01 	andeq	r2, r5, #1, 28
 4d4:	01040200 	mrseq	r0, R12_usr
 4d8:	3f010520 	svccc	0x00010520
 4dc:	055a1e05 	ldrbeq	r1, [sl, #-3589]	; 0xfffff1fb
 4e0:	0c054b02 			; <UNDEFINED> instruction: 0x0c054b02
 4e4:	2e12054b 	cfmac32cs	mvfx0, mvfx2, mvfx11
 4e8:	3d2e0c05 	stccc	12, cr0, [lr, #-20]!	; 0xffffffec
 4ec:	052e1205 	streq	r1, [lr, #-517]!	; 0xfffffdfb
 4f0:	02052e0c 	andeq	r2, r5, #12, 28	; 0xc0
 4f4:	4b01053d 	blmi	419f0 <startup-0x1ffbe610>
 4f8:	054c3105 	strbeq	r3, [ip, #-261]	; 0xfffffefb
 4fc:	053d670c 	ldreq	r6, [sp, #-1804]!	; 0xfffff8f4
 500:	13053d01 	movwne	r3, #23809	; 0x5d01
 504:	2f0c054c 	svccs	0x000c054c
 508:	05830205 	streq	r0, [r3, #517]	; 0x205
 50c:	053d200c 	ldreq	r2, [sp, #-12]!
 510:	48058401 	stmdami	r5, {r0, sl, pc}
 514:	75050576 	strvc	r0, [r5, #-1398]	; 0xfffffa8a
 518:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 51c:	02053d05 	andeq	r3, r5, #320	; 0x140
 520:	3d05052e 	cfstr32cc	mvfx0, [r5, #-184]	; 0xffffff48
 524:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 528:	02053d05 	andeq	r3, r5, #320	; 0x140
 52c:	3d01052e 	cfstr32cc	mvfx0, [r1, #-184]	; 0xffffff48
 530:	054c5a05 	strbeq	r5, [ip, #-2565]	; 0xfffff5fb
 534:	02057505 	andeq	r7, r5, #20971520	; 0x1400000
 538:	4b05052e 	blmi	1419f8 <startup-0x1febe608>
 53c:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 540:	02054b05 	andeq	r4, r5, #5120	; 0x1400
 544:	4b05052e 	blmi	141a04 <startup-0x1febe5fc>
 548:	052e0205 	streq	r0, [lr, #-517]!	; 0xfffffdfb
 54c:	64054b01 	strvs	r4, [r5], #-2817	; 0xfffff4ff
 550:	4a03ad03 	bmi	eb964 <startup-0x1ff1469c>
 554:	3d750c05 	ldclcc	12, cr0, [r5, #-20]!	; 0xffffffec
 558:	3d3e3d4b 	ldccc	13, cr3, [lr, #-300]!	; 0xfffffed4
 55c:	0b053d4b 	bleq	14fa90 <startup-0x1feb0570>
 560:	01053d3e 	tsteq	r5, lr, lsr sp
 564:	4c10053d 	cfldr32mi	mvfx0, [r0], {61}	; 0x3d
 568:	2f3d0205 	svccs	0x003d0205
 56c:	052f2f2f 	streq	r2, [pc, #-3887]!	; fffff645 <ts_state+0xdfffd83d>
 570:	02053107 	andeq	r3, r5, #-1073741823	; 0xc0000001
 574:	4b040568 	blmi	101b1c <startup-0x1fefe4e4>
 578:	05300705 	ldreq	r0, [r0, #-1797]!	; 0xfffff8fb
 57c:	03052116 	movweq	r2, #20758	; 0x5116
 580:	4908053c 	stmdbmi	r8, {r2, r3, r4, r5, r8, sl}
 584:	052e0705 	streq	r0, [lr, #-1797]!	; 0xfffff8fb
 588:	1d053208 	sfmne	f3, 4, [r5, #-32]	; 0xffffffe0
 58c:	054a0a03 	strbeq	r0, [sl, #-2563]	; 0xfffff5fd
 590:	1f053c08 	svcne	0x00053c08
 594:	3c08053d 	cfstr32cc	mvfx0, [r8], {61}	; 0x3d
 598:	053e0205 	ldreq	r0, [lr, #-517]!	; 0xfffffdfb
 59c:	0515080a 	ldreq	r0, [r5, #-2058]	; 0xfffff7f6
 5a0:	052f2f03 	streq	r2, [pc, #-3843]!	; fffff6a5 <ts_state+0xdfffd89d>
 5a4:	0305e50f 	movweq	lr, #21775	; 0x550f
 5a8:	4b08053c 	blmi	201aa0 <startup-0x1fdfe560>
 5ac:	05210905 	streq	r0, [r1, #-2309]!	; 0xfffff6fb
 5b0:	4b593d04 	blmi	164f9c8 <startup-0x1e9b0638>
 5b4:	05590905 	ldrbeq	r0, [r9, #-2309]	; 0xfffff6fb
 5b8:	4b593d04 	blmi	164f9d0 <startup-0x1e9b0630>
 5bc:	78030905 	stmdavc	r3, {r0, r2, r8, fp}
 5c0:	3c080558 	cfstr32cc	mvfx0, [r8], {88}	; 0x58
 5c4:	0a030305 	beq	c11e0 <startup-0x1ff3ee20>
 5c8:	3008052e 	andcc	r0, r8, lr, lsr #10
 5cc:	4b3c0405 	blmi	f015e8 <startup-0x1f0fea18>
 5d0:	a107054b 	tstge	r7, fp, asr #10
 5d4:	053c0605 	ldreq	r0, [ip, #-1541]!	; 0xfffff9fb
 5d8:	14052f1a 	strne	r2, [r5], #-3866	; 0xfffff0e6
 5dc:	3d1c053c 	cfldr32cc	mvfx0, [ip, #-240]	; 0xffffff10
 5e0:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 5e4:	0a053d05 	beq	14fa00 <startup-0x1feb0600>
 5e8:	3d090559 	cfstr32cc	mvfx0, [r9, #-356]	; 0xfffffe9c
 5ec:	052e1005 	streq	r1, [lr, #-5]!
 5f0:	10054b09 	andne	r4, r5, r9, lsl #22
 5f4:	4b09052e 	blmi	241ab4 <startup-0x1fdbe54c>
 5f8:	052e1005 	streq	r1, [lr, #-5]!
 5fc:	05053d09 	streq	r3, [r5, #-3337]	; 0xfffff2f7
 600:	0b054b3c 	bleq	1532f8 <startup-0x1feacd08>
 604:	3c06054d 	cfstr32cc	mvfx0, [r6], {77}	; 0x4d
 608:	052f1005 	streq	r1, [pc, #-5]!	; 60b <startup-0x1ffff9f5>
 60c:	0c058411 	cfstrseq	mvf8, [r5], {17}
 610:	2f10053c 	svccs	0x0010053c
 614:	05770b05 	ldrbeq	r0, [r7, #-2821]!	; 0xfffff4fb
 618:	1a053c06 	bne	14f638 <startup-0x1feb09c8>
 61c:	3c14052f 	cfldr32cc	mvfx0, [r4], {47}	; 0x2f
 620:	053d1c05 	ldreq	r1, [sp, #-3077]!	; 0xfffff3fb
 624:	05053c16 	streq	r3, [r5, #-3094]	; 0xfffff3ea
 628:	590a053d 	stmdbpl	sl, {r0, r2, r3, r4, r5, r8, sl}
 62c:	053d0905 	ldreq	r0, [sp, #-2309]!	; 0xfffff6fb
 630:	09052e10 	stmdbeq	r5, {r4, r9, sl, fp, sp}
 634:	2e10054b 	cfmac32cs	mvfx0, mvfx0, mvfx11
 638:	054d0805 	strbeq	r0, [sp, #-2053]	; 0xfffff7fb
 63c:	054b3c04 	strbeq	r3, [fp, #-3076]	; 0xfffff3fc
 640:	07054c08 	streq	r4, [r5, -r8, lsl #24]
 644:	241505e4 	ldrcs	r0, [r5], #-1508	; 0xfffffa1c
 648:	053c2c05 	ldreq	r2, [ip, #-3077]!	; 0xfffff3fb
 64c:	1c053c31 	stcne	12, cr3, [r5], {49}	; 0x31
 650:	20060520 	andcs	r0, r6, r0, lsr #10
 654:	052f0505 	streq	r0, [pc, #-1285]!	; 157 <startup-0x1ffffea9>
 658:	0e053d15 	mcreq	13, 0, r3, cr5, cr5, {0}
 65c:	200c053c 	andcs	r0, ip, ip, lsr r5
 660:	9f13053d 	svcls	0x0013053d
 664:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
 668:	1d052f16 	stcne	15, cr2, [r5, #-88]	; 0xffffffa8
 66c:	2f20052e 	svccs	0x0020052e
 670:	053c1305 	ldreq	r1, [ip, #-773]!	; 0xfffffcfb
 674:	1a052e20 	bne	14befc <startup-0x1feb4104>
 678:	2122053c 			; <UNDEFINED> instruction: 0x2122053c
 67c:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 680:	1d052e22 	stcne	14, cr2, [r5, #-136]	; 0xffffff78
 684:	2315052e 	tstcs	r5, #192937984	; 0xb800000
 688:	053c2c05 	ldreq	r2, [ip, #-3077]!	; 0xfffff3fb
 68c:	1c053c31 	stcne	12, cr3, [r5], {49}	; 0x31
 690:	20060520 	andcs	r0, r6, r0, lsr #10
 694:	053d0505 	ldreq	r0, [sp, #-1285]!	; 0xfffffafb
 698:	0e053d15 	mcreq	13, 0, r3, cr5, cr5, {0}
 69c:	200c053c 	andcs	r0, ip, ip, lsr r5
 6a0:	9f13053d 	svcls	0x0013053d
 6a4:	052e1a05 	streq	r1, [lr, #-2565]!	; 0xfffff5fb
 6a8:	1d052f16 	stcne	15, cr2, [r5, #-88]	; 0xffffffa8
 6ac:	2f20052e 	svccs	0x0020052e
 6b0:	053c1305 	ldreq	r1, [ip, #-773]!	; 0xfffffcfb
 6b4:	1a052e20 	bne	14bf3c <startup-0x1feb40c4>
 6b8:	21220520 			; <UNDEFINED> instruction: 0x21220520
 6bc:	053c1605 	ldreq	r1, [ip, #-1541]!	; 0xfffff9fb
 6c0:	1d052e22 	stcne	14, cr2, [r5, #-136]	; 0xffffff78
 6c4:	03040520 	movweq	r0, #17696	; 0x4520
 6c8:	05052047 	streq	r2, [r5, #-71]	; 0xffffffb9
 6cc:	05202503 	streq	r2, [r0, #-1283]!	; 0xfffffafd
 6d0:	204b030a 	subcs	r0, fp, sl, lsl #6
 6d4:	01001802 	tsteq	r0, r2, lsl #16
 6d8:	Address 0x00000000000006d8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
   4:	63756600 	cmnvs	r5, #0, 12
   8:	676e696b 	strbvs	r6, [lr, -fp, ror #18]!
   c:	7269625f 	rsbvc	r6, r9, #-268435451	; 0xf0000005
  10:	73610064 	cmnvc	r1, #100, 0	; 0x64
  14:	5f696963 	svcpl	0x00696963
  18:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
  1c:	61645f65 	cmnvs	r4, r5, ror #30
  20:	6f006174 	svcvs	0x00006174
  24:	5f747362 	svcpl	0x00747362
  28:	00625f31 	rsbeq	r5, r2, r1, lsr pc
  2c:	646e6172 	strbtvs	r6, [lr], #-370	; 0xfffffe8e
  30:	62006d6f 	andvs	r6, r0, #7104	; 0x1bc0
  34:	5f647269 	svcpl	0x00647269
  38:	72616f73 	rsbvc	r6, r1, #460	; 0x1cc
  3c:	6f65675f 	svcvs	0x0065675f
  40:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
  44:	69620079 	stmdbvs	r2!, {r0, r3, r4, r5, r6}^
  48:	665f6472 			; <UNDEFINED> instruction: 0x665f6472
  4c:	5f70616c 	svcpl	0x0070616c
  50:	006a626f 	rsbeq	r6, sl, pc, ror #4
  54:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
  58:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
  5c:	746f625f 	strbtvc	r6, [pc], #-607	; 64 <startup-0x1fffff9c>
  60:	5f6d6f74 	svcpl	0x006d6f74
  64:	626f0031 	rsbvs	r0, pc, #49, 0	; 0x31
  68:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
  6c:	625f656c 	subsvs	r6, pc, #108, 10	; 0x1b000000
  70:	6f74746f 	svcvs	0x0074746f
  74:	00325f6d 	eorseq	r5, r2, sp, ror #30
  78:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  7c:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
  80:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
  84:	5f79616c 	svcpl	0x0079616c
  88:	7263696d 	rsbvc	r6, r3, #1785856	; 0x1b4000
  8c:	626f006f 	rsbvs	r0, pc, #111, 0	; 0x6f
  90:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
  94:	745f656c 	ldrbvc	r6, [pc], #-1388	; 9c <startup-0x1fffff64>
  98:	315f706f 	cmpcc	pc, pc, rrx
  9c:	73626f00 	cmnvc	r2, #0, 30
  a0:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
  a4:	6f745f65 	svcvs	0x00745f65
  a8:	00325f70 	eorseq	r5, r2, r0, ror pc
  ac:	65736572 	ldrbvs	r6, [r3, #-1394]!	; 0xfffffa8e
  b0:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
  b4:	6f705f6a 	svcvs	0x00705f6a
  b8:	69746973 	ldmdbvs	r4!, {r0, r1, r4, r5, r6, r8, fp, sp, lr}^
  bc:	73006e6f 	movwvc	r6, #3695	; 0xe6f
  c0:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  c4:	5f676e69 	svcpl	0x00676e69
  c8:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
  cc:	675f6e65 	ldrbvs	r6, [pc, -r5, ror #28]
  d0:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
  d4:	00797274 	rsbseq	r7, r9, r4, ror r2
  d8:	6e69616d 	powvsez	f6, f1, #5.0
  dc:	73552f00 	cmpvc	r5, #0, 30
  e0:	2f737265 	svccs	0x00737265
  e4:	677a6f72 			; <UNDEFINED> instruction: 0x677a6f72
  e8:	442f7261 	strtmi	r7, [pc], #-609	; f0 <startup-0x1fffff10>
  ec:	746b7365 	strbtvc	r7, [fp], #-869	; 0xfffffc9b
  f0:	4d2f706f 	stcmi	0, cr7, [pc, #-444]!	; ffffff3c <ts_state+0xdfffe134>
  f4:	6c2f504f 	stcvs	0, cr5, [pc], #-316	; ffffffc0 <ts_state+0xdfffe1b8>
  f8:	35626261 	strbcc	r6, [r2, #-609]!	; 0xfffffd9f
  fc:	626b002d 	rsbvs	r0, fp, #45, 0	; 0x2d
 100:	74654764 	strbtvc	r4, [r5], #-1892	; 0xfffff89c
 104:	006c6f43 	rsbeq	r6, ip, r3, asr #30
 108:	4f454750 	svcmi	0x00454750
 10c:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
 110:	626f0059 	rsbvs	r0, pc, #89, 0	; 0x59
 114:	315f7473 	cmpcc	pc, r3, ror r4	; <UNPREDICTABLE>
 118:	6700745f 	smlsdvs	r0, pc, r4, r7	; <UNPREDICTABLE>
 11c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 120:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 124:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 128:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 12c:	006e6565 	rsbeq	r6, lr, r5, ror #10
 130:	5f746573 	svcpl	0x00746573
 134:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 138:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 13c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 140:	61006465 	tstvs	r0, r5, ror #8
 144:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 148:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 14c:	635f6574 	cmpvs	pc, #116, 10	; 0x1d000000
 150:	00726168 	rsbseq	r6, r2, r8, ror #2
 154:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 158:	616f735f 	cmnvs	pc, pc, asr r3	; <UNPREDICTABLE>
 15c:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 160:	626f006a 	rsbvs	r0, pc, #106, 0	; 0x6a
 164:	63617473 	cmnvs	r1, #1929379840	; 0x73000000
 168:	745f656c 	ldrbvc	r6, [pc], #-1388	; 170 <startup-0x1ffffe90>
 16c:	675f706f 	ldrbvs	r7, [pc, -pc, rrx]
 170:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 174:	00797274 	rsbseq	r7, r9, r4, ror r2
 178:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 17c:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 180:	746f625f 	strbtvc	r6, [pc], #-607	; 188 <startup-0x1ffffe78>
 184:	5f6d6f74 	svcpl	0x006d6f74
 188:	5f6a626f 	svcpl	0x006a626f
 18c:	72670032 	rsbvc	r0, r7, #50, 0	; 0x32
 190:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 194:	6e695f63 	cdpvs	15, 6, cr5, cr9, cr3, {3}
 198:	61697469 	cmnvs	r9, r9, ror #8
 19c:	657a696c 	ldrbvs	r6, [sl, #-2412]!	; 0xfffff694
 1a0:	494f5000 	stmdbmi	pc, {ip, lr}^	; <UNPREDICTABLE>
 1a4:	6100544e 	tstvs	r0, lr, asr #8
 1a8:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 1ac:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1b0:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b4:	65735f74 	ldrbvs	r5, [r3, #-3956]!	; 0xfffff08c
 1b8:	6f700074 	svcvs	0x00700074
 1bc:	74007973 	strvc	r7, [r0], #-2419	; 0xfffff68d
 1c0:	74735f73 	ldrbtvc	r5, [r3], #-3955	; 0xfffff08d
 1c4:	00657461 	rsbeq	r7, r5, r1, ror #8
 1c8:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 1cc:	72696400 	rsbvc	r6, r9, #0, 8
 1d0:	552f0079 	strpl	r0, [pc, #-121]!	; 15f <startup-0x1ffffea1>
 1d4:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 1d8:	7a6f722f 	bvc	1bdca9c <startup-0x1e423564>
 1dc:	2f726167 	svccs	0x00726167
 1e0:	6b736544 	blvs	1cd96f8 <startup-0x1e326908>
 1e4:	2f706f74 	svccs	0x00706f74
 1e8:	2f504f4d 	svccs	0x00504f4d
 1ec:	6262616c 	rsbvs	r6, r2, #27
 1f0:	732f2d35 			; <UNDEFINED> instruction: 0x732f2d35
 1f4:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 1f8:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 1fc:	73626f00 	cmnvc	r2, #0, 30
 200:	6c636174 	stfvse	f6, [r3], #-464	; 0xfffffe30
 204:	6f745f65 	svcvs	0x00745f65
 208:	626f5f70 	rsbvs	r5, pc, #112, 30	; 0x1c0
 20c:	00315f6a 	eorseq	r5, r1, sl, ror #30
 210:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 214:	656c6361 	strbvs	r6, [ip, #-865]!	; 0xfffffc9f
 218:	706f745f 	rsbvc	r7, pc, pc, asr r4	; <UNPREDICTABLE>
 21c:	6a626f5f 	bvs	189bfa0 <startup-0x1e764060>
 220:	6f00325f 	svcvs	0x0000325f
 224:	61747362 	cmnvs	r4, r2, ror #6
 228:	5f656c63 	svcpl	0x00656c63
 22c:	74746f62 	ldrbtvc	r6, [r4], #-3938	; 0xfffff09e
 230:	6f5f6d6f 	svcvs	0x005f6d6f
 234:	315f6a62 	cmpcc	pc, r2, ror #20
 238:	7a697300 	bvc	1a5ce40 <startup-0x1e5a31c0>
 23c:	73007865 	movwvc	r7, #2149	; 0x865
 240:	79657a69 	stmdbvc	r5!, {r0, r3, r5, r6, r9, fp, ip, sp, lr}^
 244:	61726700 	cmnvs	r2, r0, lsl #14
 248:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 24c:	7869705f 	stmdavc	r9!, {r0, r1, r2, r3, r4, r6, ip, sp, lr}^
 250:	735f6c65 	cmpvc	pc, #25856	; 0x6500
 254:	61007465 	tstvs	r0, r5, ror #8
 258:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 25c:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; e8 <startup-0x1fffff18>
 260:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
 264:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 268:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; 1ae <startup-0x1ffffe52>	; <UNPREDICTABLE>
 26c:	696c6c69 	stmdbvs	ip!, {r0, r3, r5, r6, sl, fp, sp, lr}^
 270:	63736100 	cmnvs	r3, #0
 274:	635f6969 	cmpvs	pc, #1720320	; 0x1a4000
 278:	5f6c7274 	svcpl	0x006c7274
 27c:	5f746962 	svcpl	0x00746962
 280:	61656c63 	cmnvs	r5, r3, ror #24
 284:	756e0072 	strbvc	r0, [lr, #-114]!	; 0xffffff8e
 288:	696f706d 	stmdbvs	pc!, {r0, r2, r3, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
 28c:	0073746e 	rsbseq	r7, r3, lr, ror #8
 290:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 294:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 298:	61686320 	cmnvs	r8, r0, lsr #6
 29c:	4e470072 	mcrmi	0, 2, r0, cr7, cr2, {3}
 2a0:	39432055 	stmdbcc	r3, {r0, r2, r4, r6, sp}^
 2a4:	2e392039 	mrccs	0, 1, r2, cr9, cr9, {1}
 2a8:	20312e32 	eorscs	r2, r1, r2, lsr lr
 2ac:	39313032 	ldmdbcc	r1!, {r1, r4, r5, ip, sp}
 2b0:	35323031 	ldrcc	r3, [r2, #-49]!	; 0xffffffcf
 2b4:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
 2b8:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
 2bc:	5b202965 	blpl	80a858 <startup-0x1f7f57a8>
 2c0:	2f4d5241 	svccs	0x004d5241
 2c4:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 2c8:	72622d39 	rsbvc	r2, r2, #3648	; 0xe40
 2cc:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 2d0:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 2d4:	6f697369 	svcvs	0x00697369
 2d8:	3732206e 	ldrcc	r2, [r2, -lr, rrx]!
 2dc:	39393537 	ldmdbcc	r9!, {r0, r1, r2, r4, r5, r8, sl, ip, sp}
 2e0:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 2e4:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 2e8:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 2ec:	616f6c66 	cmnvs	pc, r6, ror #24
 2f0:	62612d74 	rsbvs	r2, r1, #116, 26	; 0x1d00
 2f4:	6f733d69 	svcvs	0x00733d69
 2f8:	2d207466 	cfstrscs	mvf7, [r0, #-408]!	; 0xfffffe68
 2fc:	6372616d 	cmnvs	r2, #1073741851	; 0x4000001b
 300:	72613d68 	rsbvc	r3, r1, #104, 26	; 0x1a00
 304:	2d36766d 	ldccs	6, cr7, [r6, #-436]!	; 0xfffffe4c
 308:	672d206d 	strvs	r2, [sp, -sp, rrx]!
 30c:	304f2d20 	subcc	r2, pc, r0, lsr #26
 310:	74732d20 	ldrbtvc	r2, [r3], #-3360	; 0xfffff2e0
 314:	39633d64 	stmdbcc	r3!, {r2, r5, r6, r8, sl, fp, ip, sp}^
 318:	6f630039 	svcvs	0x00630039
 31c:	65746e75 	ldrbvs	r6, [r4, #-3701]!	; 0xfffff18b
 320:	656b0072 	strbvs	r0, [fp, #-114]!	; 0xffffff8e
 324:	61006279 	tstvs	r0, r9, ror r2
 328:	65726464 	ldrbvs	r6, [r2, #-1124]!	; 0xfffffb9c
 32c:	73007373 	movwvc	r7, #883	; 0x373
 330:	6f5f7465 	svcvs	0x005f7465
 334:	63656a62 	cmnvs	r5, #401408	; 0x62000
 338:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 33c:	00646565 	rsbeq	r6, r4, r5, ror #10
 340:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 344:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 348:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 34c:	65687400 	strbvs	r7, [r8, #-1024]!	; 0xfffffc00
 350:	705f795f 	subsvc	r7, pc, pc, asr r9	; <UNPREDICTABLE>
 354:	625f736f 	subsvs	r7, pc, #-1140850687	; 0xbc000001
 358:	00647269 	rsbeq	r7, r4, r9, ror #4
 35c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 360:	5f737463 	svcpl	0x00737463
 364:	7265766f 	rsbvc	r7, r5, #116391936	; 0x6f00000
 368:	0070616c 	rsbseq	r6, r0, ip, ror #2
 36c:	4164626b 	cmnmi	r4, fp, ror #4
 370:	76697463 	strbtvc	r7, [r9], -r3, ror #8
 374:	00657461 	rsbeq	r7, r5, r1, ror #8
 378:	70617267 	rsbvc	r7, r1, r7, ror #4
 37c:	5f636968 	svcpl	0x00636968
 380:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
 384:	6c635f6c 	stclvs	15, cr5, [r3], #-432	; 0xfffffe50
 388:	00726165 	rsbseq	r6, r2, r5, ror #2
 38c:	5f656874 	svcpl	0x00656874
 390:	70735f79 	rsbsvc	r5, r3, r9, ror pc
 394:	5f646565 	svcpl	0x00646565
 398:	64726962 	ldrbtvs	r6, [r2], #-2402	; 0xfffff69e
 39c:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
 3a0:	626f5f65 	rsbvs	r5, pc, #404	; 0x194
 3a4:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 3a8:	63736100 	cmnvs	r3, #0
 3ac:	675f6969 	ldrbvs	r6, [pc, -r9, ror #18]
 3b0:	786f746f 	stmdavc	pc!, {r0, r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
 3b4:	6f6d0079 	svcvs	0x006d0079
 3b8:	6f5f6576 	svcvs	0x005f6576
 3bc:	61747362 	cmnvs	r4, r2, ror #6
 3c0:	73656c63 	cmnvc	r5, #25344	; 0x6300
 3c4:	696e6900 	stmdbvs	lr!, {r8, fp, sp, lr}^
 3c8:	70615f74 	rsbvc	r5, r1, r4, ror pc
 3cc:	74730070 	ldrbtvc	r0, [r3], #-112	; 0xffffff90
 3d0:	5f747261 	svcpl	0x00747261
 3d4:	65726373 	ldrbvs	r6, [r2, #-883]!	; 0xfffffc8d
 3d8:	6f006e65 	svcvs	0x00006e65
 3dc:	61747362 	cmnvs	r4, r2, ror #6
 3e0:	5f656c63 	svcpl	0x00656c63
 3e4:	74746f62 	ldrbtvc	r6, [r4], #-3938	; 0xfffff09e
 3e8:	675f6d6f 	ldrbvs	r6, [pc, -pc, ror #26]
 3ec:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 3f0:	00797274 	rsbseq	r7, r9, r4, ror r2
 3f4:	6a624f74 	bvs	18941cc <startup-0x1e76be34>
 3f8:	61747300 	cmnvs	r4, r0, lsl #6
 3fc:	6e697472 	mcrvs	4, 3, r7, cr9, cr2, {3}
 400:	63735f67 	cmnvs	r3, #412	; 0x19c
 404:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 408:	6a626f5f 	bvs	189c18c <startup-0x1e763e74>
 40c:	72696200 	rsbvc	r6, r9, #0, 4
 410:	6c665f64 	stclvs	15, cr5, [r6], #-400	; 0xfffffe70
 414:	675f7061 	ldrbvs	r7, [pc, -r1, rrx]
 418:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 41c:	00797274 	rsbseq	r7, r9, r4, ror r2
 420:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 424:	745f325f 	ldrbvc	r3, [pc], #-607	; 42c <startup-0x1ffffbd4>
 428:	63736100 	cmnvs	r3, #0
 42c:	725f6969 	subsvc	r6, pc, #1720320	; 0x1a4000
 430:	5f646165 	svcpl	0x00646165
 434:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 438:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 43c:	61007265 	tstvs	r0, r5, ror #4
 440:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 444:	6165725f 	cmnvs	r5, pc, asr r2
 448:	74735f64 	ldrbtvc	r5, [r3], #-3940	; 0xfffff09c
 44c:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
 450:	61726400 	cmnvs	r2, r0, lsl #8
 454:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 458:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 45c:	00646565 	rsbeq	r6, r4, r5, ror #10
 460:	61656c63 	cmnvs	r5, r3, ror #24
 464:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 468:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 46c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 470:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 474:	736e3035 	cmnvc	lr, #53, 0	; 0x35
 478:	74796200 	ldrbtvc	r6, [r9], #-512	; 0xfffffe00
 47c:	656b0065 	strbvs	r0, [fp, #-101]!	; 0xffffff9b
 480:	655f6279 	ldrbvs	r6, [pc, #-633]	; 20f <startup-0x1ffffdf1>
 484:	6e61686e 	cdpvs	8, 6, cr6, cr1, cr14, {3}
 488:	00646563 	rsbeq	r6, r4, r3, ror #10
 48c:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 490:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 494:	5f657469 	svcpl	0x00657469
 498:	746e6f63 	strbtvc	r6, [lr], #-3939	; 0xfffff09d
 49c:	6c6c6f72 	stclvs	15, cr6, [ip], #-456	; 0xfffffe38
 4a0:	74007265 	strvc	r7, [r0], #-613	; 0xfffffd9b
 4a4:	72656d69 	rsbvc	r6, r5, #6720	; 0x1a40
 4a8:	6e695f36 	mcrvs	15, 3, r5, cr9, cr6, {1}
 4ac:	61007469 	tstvs	r0, r9, ror #8
 4b0:	69696373 	stmdbvs	r9!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
 4b4:	6165725f 	cmnvs	r5, pc, asr r2
 4b8:	61645f64 	cmnvs	r4, r4, ror #30
 4bc:	73006174 	movwvc	r6, #372	; 0x174
 4c0:	6f436765 	svcvs	0x00436765
 4c4:	00736564 	rsbseq	r6, r3, r4, ror #10
 4c8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 4cc:	00707574 	rsbseq	r7, r0, r4, ror r5
 4d0:	4a424f50 	bmi	1094218 <startup-0x1ef6bde8>
 4d4:	00544345 	subseq	r4, r4, r5, asr #6
 4d8:	3774756f 	ldrbcc	r7, [r4, -pc, ror #10]!
 4dc:	00676573 	rsbeq	r6, r7, r3, ror r5
 4e0:	6279656b 	rsbsvs	r6, r9, #448790528	; 0x1ac00000
 4e4:	6174735f 	cmnvs	r4, pc, asr r3
 4e8:	6d006574 	cfstr32vs	mvfx6, [r0, #-464]	; 0xfffffe30
 4ec:	0065766f 	rsbeq	r7, r5, pc, ror #12
 4f0:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 4f4:	6a626f5f 	bvs	189c278 <startup-0x1e763d88>
 4f8:	00746365 	rsbseq	r6, r4, r5, ror #6
 4fc:	7473626f 	ldrbtvc	r6, [r3], #-623	; 0xfffffd91
 500:	625f325f 	subsvs	r3, pc, #-268435451	; 0xf0000005
 504:	63736100 	cmnvs	r3, #0
 508:	695f6969 	ldmdbvs	pc, {r0, r3, r5, r6, r8, fp, sp, lr}^	; <UNPREDICTABLE>
 50c:	0074696e 	rsbseq	r6, r4, lr, ror #18
 510:	69637361 	stmdbvs	r3!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 514:	72775f69 	rsbsvc	r5, r7, #420	; 0x1a4
 518:	5f657469 	svcpl	0x00657469
 51c:	00646d63 	rsbeq	r6, r4, r3, ror #26

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d39 	eorscc	r2, r2, r9, lsr sp
  30:	712d3931 			; <UNDEFINED> instruction: 0x712d3931
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3920 	eorcc	r3, lr, #32, 18	; 0x80000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	31393130 	teqcc	r9, r0, lsr r1
  48:	20353230 	eorscs	r3, r5, r0, lsr r2
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	612f4d52 			; <UNDEFINED> instruction: 0x612f4d52
  5c:	392d6d72 	pushcc	{r1, r4, r5, r6, r8, sl, fp, sp, lr}
  60:	6172622d 	cmnvs	r2, sp, lsr #4
  64:	2068636e 	rsbcs	r6, r8, lr, ror #6
  68:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  6c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  70:	37373220 	ldrcc	r3, [r7, -r0, lsr #4]!
  74:	5d393935 			; <UNDEFINED> instruction: 0x5d393935
	...

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002b41 	andeq	r2, r0, r1, asr #22
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000021 	andeq	r0, r0, r1, lsr #32
  10:	2d533605 	ldclcs	6, cr3, [r3, #-20]	; 0xffffffec
  14:	0c06004d 	stceq	0, cr0, [r6], {77}	; 0x4d
  18:	01094d07 	tsteq	r9, r7, lsl #26
  1c:	01140412 	tsteq	r4, r2, lsl r4
  20:	03170115 	tsteq	r7, #1073741829	; 0x40000005
  24:	01190118 	tsteq	r9, r8, lsl r1
  28:	061e011a 			; <UNDEFINED> instruction: 0x061e011a

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000006 	andeq	r0, r0, r6
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	20000016 	andcs	r0, r0, r6, lsl r0
  3c:	00000006 	andeq	r0, r0, r6
  40:	0000000c 	andeq	r0, r0, ip
  44:	00000000 	andeq	r0, r0, r0
  48:	2000001c 	andcs	r0, r0, ip, lsl r0
  4c:	00000006 	andeq	r0, r0, r6
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	20000022 	andcs	r0, r0, r2, lsr #32
  5c:	00000006 	andeq	r0, r0, r6
  60:	00000018 	andeq	r0, r0, r8, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000028 	andcs	r0, r0, r8, lsr #32
  6c:	00000028 	andeq	r0, r0, r8, lsr #32
  70:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  74:	41018e02 	tstmi	r1, r2, lsl #28
  78:	0000070d 	andeq	r0, r0, sp, lsl #14
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	20000050 	andcs	r0, r0, r0, asr r0
  88:	0000003c 	andeq	r0, r0, ip, lsr r0
  8c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  90:	41018e02 	tstmi	r1, r2, lsl #28
  94:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  98:	00000007 	andeq	r0, r0, r7
  9c:	0000001c 	andeq	r0, r0, ip, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	2000008c 	andcs	r0, r0, ip, lsl #1
  a8:	00000048 	andeq	r0, r0, r8, asr #32
  ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  b0:	41018e02 	tstmi	r1, r2, lsl #28
  b4:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
  b8:	00000007 	andeq	r0, r0, r7
  bc:	0000001c 	andeq	r0, r0, ip, lsl r0
  c0:	00000000 	andeq	r0, r0, r0
  c4:	200000d4 	ldrdcs	r0, [r0], -r4
  c8:	00000030 	andeq	r0, r0, r0, lsr r0
  cc:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  d0:	41018e02 	tstmi	r1, r2, lsl #28
  d4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  d8:	00000007 	andeq	r0, r0, r7
  dc:	0000001c 	andeq	r0, r0, ip, lsl r0
  e0:	00000000 	andeq	r0, r0, r0
  e4:	20000104 	andcs	r0, r0, r4, lsl #2
  e8:	00000034 	andeq	r0, r0, r4, lsr r0
  ec:	87080e41 	strhi	r0, [r8, -r1, asr #28]
  f0:	41018e02 	tstmi	r1, r2, lsl #28
  f4:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
  f8:	00000007 	andeq	r0, r0, r7
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	20000138 	andcs	r0, r0, r8, lsr r1
 108:	0000002a 	andeq	r0, r0, sl, lsr #32
 10c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 110:	41018e02 	tstmi	r1, r2, lsl #28
 114:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 118:	00000007 	andeq	r0, r0, r7
 11c:	0000001c 	andeq	r0, r0, ip, lsl r0
 120:	00000000 	andeq	r0, r0, r0
 124:	20000162 	andcs	r0, r0, r2, ror #2
 128:	0000002a 	andeq	r0, r0, sl, lsr #32
 12c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 130:	41018e02 	tstmi	r1, r2, lsl #28
 134:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 138:	00000007 	andeq	r0, r0, r7
 13c:	0000001c 	andeq	r0, r0, ip, lsl r0
 140:	00000000 	andeq	r0, r0, r0
 144:	2000018c 	andcs	r0, r0, ip, lsl #3
 148:	00000040 	andeq	r0, r0, r0, asr #32
 14c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 150:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 154:	180e4101 	stmdane	lr, {r0, r8, lr}
 158:	00070d41 	andeq	r0, r7, r1, asr #26
 15c:	0000001c 	andeq	r0, r0, ip, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	200001cc 	andcs	r0, r0, ip, asr #3
 168:	00000040 	andeq	r0, r0, r0, asr #32
 16c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 170:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 174:	180e4101 	stmdane	lr, {r0, r8, lr}
 178:	00070d41 	andeq	r0, r7, r1, asr #26
 17c:	0000001c 	andeq	r0, r0, ip, lsl r0
 180:	00000000 	andeq	r0, r0, r0
 184:	2000020c 	andcs	r0, r0, ip, lsl #4
 188:	00000042 	andeq	r0, r0, r2, asr #32
 18c:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 190:	41018e02 	tstmi	r1, r2, lsl #28
 194:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 198:	00000007 	andeq	r0, r0, r7
 19c:	00000018 	andeq	r0, r0, r8, lsl r0
 1a0:	00000000 	andeq	r0, r0, r0
 1a4:	2000024e 	andcs	r0, r0, lr, asr #4
 1a8:	00000028 	andeq	r0, r0, r8, lsr #32
 1ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1b0:	41018e02 	tstmi	r1, r2, lsl #28
 1b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 1b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1bc:	00000000 	andeq	r0, r0, r0
 1c0:	20000276 	andcs	r0, r0, r6, ror r2
 1c4:	00000032 	andeq	r0, r0, r2, lsr r0
 1c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1cc:	41018e02 	tstmi	r1, r2, lsl #28
 1d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 1d4:	00000007 	andeq	r0, r0, r7
 1d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1dc:	00000000 	andeq	r0, r0, r0
 1e0:	200002a8 	andcs	r0, r0, r8, lsr #5
 1e4:	00000038 	andeq	r0, r0, r8, lsr r0
 1e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 1ec:	41018e02 	tstmi	r1, r2, lsl #28
 1f0:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 1f4:	00000007 	andeq	r0, r0, r7
 1f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 1fc:	00000000 	andeq	r0, r0, r0
 200:	200002e0 	andcs	r0, r0, r0, ror #5
 204:	00000054 	andeq	r0, r0, r4, asr r0
 208:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 20c:	41018e02 	tstmi	r1, r2, lsl #28
 210:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 214:	00000007 	andeq	r0, r0, r7
 218:	0000001c 	andeq	r0, r0, ip, lsl r0
 21c:	00000000 	andeq	r0, r0, r0
 220:	20000334 	andcs	r0, r0, r4, lsr r3
 224:	0000005c 	andeq	r0, r0, ip, asr r0
 228:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 22c:	41018e02 	tstmi	r1, r2, lsl #28
 230:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 234:	00000007 	andeq	r0, r0, r7
 238:	0000001c 	andeq	r0, r0, ip, lsl r0
 23c:	00000000 	andeq	r0, r0, r0
 240:	20000390 	mulcs	r0, r0, r3
 244:	00000068 	andeq	r0, r0, r8, rrx
 248:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 24c:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 250:	280e4101 	stmdacs	lr, {r0, r8, lr}
 254:	00070d41 	andeq	r0, r7, r1, asr #26
 258:	00000020 	andeq	r0, r0, r0, lsr #32
 25c:	00000000 	andeq	r0, r0, r0
 260:	200003f8 	strdcs	r0, [r0], -r8
 264:	00000044 	andeq	r0, r0, r4, asr #32
 268:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 26c:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 270:	41018e02 	tstmi	r1, r2, lsl #28
 274:	0d41280e 	stcleq	8, cr2, [r1, #-56]	; 0xffffffc8
 278:	00000007 	andeq	r0, r0, r7
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000000 	andeq	r0, r0, r0
 284:	2000043c 	andcs	r0, r0, ip, lsr r4
 288:	00000068 	andeq	r0, r0, r8, rrx
 28c:	840c0e41 	strhi	r0, [ip], #-3649	; 0xfffff1bf
 290:	8e028703 	cdphi	7, 0, cr8, cr2, cr3, {0}
 294:	180e4101 	stmdane	lr, {r0, r8, lr}
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	200004a4 	andcs	r0, r0, r4, lsr #9
 2a8:	00000044 	andeq	r0, r0, r4, asr #32
 2ac:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2b0:	41018e02 	tstmi	r1, r2, lsl #28
 2b4:	0000070d 	andeq	r0, r0, sp, lsl #14
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	200004e8 	andcs	r0, r0, r8, ror #9
 2c4:	00000046 	andeq	r0, r0, r6, asr #32
 2c8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2cc:	41018e02 	tstmi	r1, r2, lsl #28
 2d0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2d4:	00000007 	andeq	r0, r0, r7
 2d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2dc:	00000000 	andeq	r0, r0, r0
 2e0:	2000052e 	andcs	r0, r0, lr, lsr #10
 2e4:	00000040 	andeq	r0, r0, r0, asr #32
 2e8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 2ec:	41018e02 	tstmi	r1, r2, lsl #28
 2f0:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 2f4:	00000007 	andeq	r0, r0, r7
 2f8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2fc:	00000000 	andeq	r0, r0, r0
 300:	2000056e 	andcs	r0, r0, lr, ror #10
 304:	000000d4 	ldrdeq	r0, [r0], -r4
 308:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 30c:	41018e02 	tstmi	r1, r2, lsl #28
 310:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 314:	00000007 	andeq	r0, r0, r7
 318:	0000001c 	andeq	r0, r0, ip, lsl r0
 31c:	00000000 	andeq	r0, r0, r0
 320:	20000642 	andcs	r0, r0, r2, asr #12
 324:	00000060 	andeq	r0, r0, r0, rrx
 328:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 32c:	41018e02 	tstmi	r1, r2, lsl #28
 330:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 334:	00000007 	andeq	r0, r0, r7
 338:	0000001c 	andeq	r0, r0, ip, lsl r0
 33c:	00000000 	andeq	r0, r0, r0
 340:	200006a2 	andcs	r0, r0, r2, lsr #13
 344:	00000060 	andeq	r0, r0, r0, rrx
 348:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 34c:	41018e02 	tstmi	r1, r2, lsl #28
 350:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 354:	00000007 	andeq	r0, r0, r7
 358:	0000001c 	andeq	r0, r0, ip, lsl r0
 35c:	00000000 	andeq	r0, r0, r0
 360:	20000702 	andcs	r0, r0, r2, lsl #14
 364:	0000003c 	andeq	r0, r0, ip, lsr r0
 368:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 36c:	41018e02 	tstmi	r1, r2, lsl #28
 370:	0d41100e 	stcleq	0, cr1, [r1, #-56]	; 0xffffffc8
 374:	00000007 	andeq	r0, r0, r7
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	00000000 	andeq	r0, r0, r0
 380:	2000073e 	andcs	r0, r0, lr, lsr r7
 384:	00000020 	andeq	r0, r0, r0, lsr #32
 388:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 38c:	41018e02 	tstmi	r1, r2, lsl #28
 390:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 394:	00000007 	andeq	r0, r0, r7
 398:	00000018 	andeq	r0, r0, r8, lsl r0
 39c:	00000000 	andeq	r0, r0, r0
 3a0:	2000075e 	andcs	r0, r0, lr, asr r7
 3a4:	0000003a 	andeq	r0, r0, sl, lsr r0
 3a8:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3ac:	41018e02 	tstmi	r1, r2, lsl #28
 3b0:	0000070d 	andeq	r0, r0, sp, lsl #14
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	20000798 	mulcs	r0, r8, r7
 3c0:	0000003e 	andeq	r0, r0, lr, lsr r0
 3c4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3c8:	41018e02 	tstmi	r1, r2, lsl #28
 3cc:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3d0:	00000007 	andeq	r0, r0, r7
 3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	200007d6 	ldrdcs	r0, [r0], -r6
 3e0:	00000046 	andeq	r0, r0, r6, asr #32
 3e4:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 3e8:	41018e02 	tstmi	r1, r2, lsl #28
 3ec:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 3f0:	00000007 	andeq	r0, r0, r7
 3f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	2000081c 	andcs	r0, r0, ip, lsl r8
 400:	00000056 	andeq	r0, r0, r6, asr r0
 404:	87080e41 	strhi	r0, [r8, -r1, asr #28]
 408:	41018e02 	tstmi	r1, r2, lsl #28
 40c:	0d41180e 	stcleq	8, cr1, [r1, #-56]	; 0xffffffc8
 410:	00000007 	andeq	r0, r0, r7
 414:	00000020 	andeq	r0, r0, r0, lsr #32
 418:	00000000 	andeq	r0, r0, r0
 41c:	20000872 	andcs	r0, r0, r2, ror r8
 420:	00000366 	andeq	r0, r0, r6, ror #6
 424:	84100e41 	ldrhi	r0, [r0], #-3649	; 0xfffff1bf
 428:	87038504 	strhi	r8, [r3, -r4, lsl #10]
 42c:	41018e02 	tstmi	r1, r2, lsl #28
 430:	0c41300e 	mcrreq	0, 0, r3, r1, cr14
 434:	00002807 	andeq	r2, r0, r7, lsl #16
 438:	0000000c 	andeq	r0, r0, ip
 43c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 440:	7c010001 	stcvc	0, cr0, [r1], {1}
 444:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 448:	0000000c 	andeq	r0, r0, ip
 44c:	00000438 	andeq	r0, r0, r8, lsr r4
 450:	20000bd9 	ldrdcs	r0, [r0], -r9
 454:	0000010a 	andeq	r0, r0, sl, lsl #2
 458:	0000000c 	andeq	r0, r0, ip
 45c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 460:	7c010001 	stcvc	0, cr0, [r1], {1}
 464:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 468:	0000000c 	andeq	r0, r0, ip
 46c:	00000458 	andeq	r0, r0, r8, asr r4
 470:	20000ced 	andcs	r0, r0, sp, ror #25
 474:	000001cc 	andeq	r0, r0, ip, asr #3
